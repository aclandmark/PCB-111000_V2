
Proj_2F_Segment_entry_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000010e  00800100  00000770  00000804  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000770  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080020e  0080020e  00000912  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000912  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000944  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000278  00000000  00000000  00000988  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000024b2  00000000  00000000  00000c00  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000891  00000000  00000000  000030b2  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000014f3  00000000  00000000  00003943  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000078c  00000000  00000000  00004e38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000978  00000000  00000000  000055c4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000207a  00000000  00000000  00005f3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000270  00000000  00000000  00007fb6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	12 e0       	ldi	r17, 0x02	; 2
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e0 e7       	ldi	r30, 0x70	; 112
  7c:	f7 e0       	ldi	r31, 0x07	; 7
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	ae 30       	cpi	r26, 0x0E	; 14
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	22 e0       	ldi	r18, 0x02	; 2
  8c:	ae e0       	ldi	r26, 0x0E	; 14
  8e:	b2 e0       	ldi	r27, 0x02	; 2
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	af 30       	cpi	r26, 0x0F	; 15
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 b6 02 	call	0x56c	; 0x56c <main>
  9e:	0c 94 b6 03 	jmp	0x76c	; 0x76c <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <USART_init>:



/************************************************************************/
void shred_328_cal(void){
I2C_Tx_initiate_mode('Y');}
  a6:	e1 ec       	ldi	r30, 0xC1	; 193
  a8:	f0 e0       	ldi	r31, 0x00	; 0
  aa:	10 82       	st	Z, r1
  ac:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
  b0:	60 93 c4 00 	sts	0x00C4, r22	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
  b4:	82 e0       	ldi	r24, 0x02	; 2
  b6:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
  ba:	88 e1       	ldi	r24, 0x18	; 24
  bc:	80 83       	st	Z, r24
  be:	86 e0       	ldi	r24, 0x06	; 6
  c0:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
  c4:	08 95       	ret

000000c6 <Timer_T0_sub>:
  c6:	66 bd       	out	0x26, r22	; 38
  c8:	85 bd       	out	0x25, r24	; 37
  ca:	a8 9b       	sbis	0x15, 0	; 21
  cc:	fe cf       	rjmp	.-4      	; 0xca <Timer_T0_sub+0x4>
  ce:	a8 9a       	sbi	0x15, 0	; 21
  d0:	15 bc       	out	0x25, r1	; 37
  d2:	08 95       	ret

000000d4 <Timer_T0_10mS_delay_x_m>:
  d4:	0f 93       	push	r16
  d6:	1f 93       	push	r17
  d8:	cf 93       	push	r28
  da:	df 93       	push	r29
  dc:	18 16       	cp	r1, r24
  de:	19 06       	cpc	r1, r25
  e0:	5c f4       	brge	.+22     	; 0xf8 <Timer_T0_10mS_delay_x_m+0x24>
  e2:	8c 01       	movw	r16, r24
  e4:	c0 e0       	ldi	r28, 0x00	; 0
  e6:	d0 e0       	ldi	r29, 0x00	; 0
  e8:	62 eb       	ldi	r22, 0xB2	; 178
  ea:	85 e0       	ldi	r24, 0x05	; 5
  ec:	0e 94 63 00 	call	0xc6	; 0xc6 <Timer_T0_sub>
  f0:	21 96       	adiw	r28, 0x01	; 1
  f2:	0c 17       	cp	r16, r28
  f4:	1d 07       	cpc	r17, r29
  f6:	c1 f7       	brne	.-16     	; 0xe8 <Timer_T0_10mS_delay_x_m+0x14>
  f8:	df 91       	pop	r29
  fa:	cf 91       	pop	r28
  fc:	1f 91       	pop	r17
  fe:	0f 91       	pop	r16
 100:	08 95       	ret

00000102 <Timer_T1_sub>:
 102:	70 93 85 00 	sts	0x0085, r23	; 0x800085 <__DATA_REGION_ORIGIN__+0x25>
 106:	60 93 84 00 	sts	0x0084, r22	; 0x800084 <__DATA_REGION_ORIGIN__+0x24>
 10a:	9f ef       	ldi	r25, 0xFF	; 255
 10c:	96 bb       	out	0x16, r25	; 22
 10e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
 112:	b0 9b       	sbis	0x16, 0	; 22
 114:	fe cf       	rjmp	.-4      	; 0x112 <Timer_T1_sub+0x10>
 116:	b0 9a       	sbi	0x16, 0	; 22
 118:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__DATA_REGION_ORIGIN__+0x21>
 11c:	08 95       	ret

0000011e <waitforkeypress>:
 11e:	e0 ec       	ldi	r30, 0xC0	; 192
 120:	f0 e0       	ldi	r31, 0x00	; 0
 122:	80 81       	ld	r24, Z
 124:	88 23       	and	r24, r24
 126:	ec f7       	brge	.-6      	; 0x122 <waitforkeypress+0x4>
 128:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 12c:	08 95       	ret

0000012e <isCharavailable>:
 12e:	20 e0       	ldi	r18, 0x00	; 0
 130:	30 e0       	ldi	r19, 0x00	; 0
 132:	e0 ec       	ldi	r30, 0xC0	; 192
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	0b c0       	rjmp	.+22     	; 0x14e <isCharavailable+0x20>
 138:	2f 5f       	subi	r18, 0xFF	; 255
 13a:	3f 4f       	sbci	r19, 0xFF	; 255
 13c:	21 34       	cpi	r18, 0x41	; 65
 13e:	9f e1       	ldi	r25, 0x1F	; 31
 140:	39 07       	cpc	r19, r25
 142:	1c f0       	brlt	.+6      	; 0x14a <isCharavailable+0x1c>
 144:	81 50       	subi	r24, 0x01	; 1
 146:	20 e0       	ldi	r18, 0x00	; 0
 148:	30 e0       	ldi	r19, 0x00	; 0
 14a:	88 23       	and	r24, r24
 14c:	29 f0       	breq	.+10     	; 0x158 <isCharavailable+0x2a>
 14e:	90 81       	ld	r25, Z
 150:	99 23       	and	r25, r25
 152:	94 f7       	brge	.-28     	; 0x138 <isCharavailable+0xa>
 154:	81 e0       	ldi	r24, 0x01	; 1
 156:	08 95       	ret
 158:	80 e0       	ldi	r24, 0x00	; 0
 15a:	08 95       	ret

0000015c <Char_to_PC>:
 15c:	e0 ec       	ldi	r30, 0xC0	; 192
 15e:	f0 e0       	ldi	r31, 0x00	; 0
 160:	90 81       	ld	r25, Z
 162:	95 ff       	sbrs	r25, 5
 164:	fd cf       	rjmp	.-6      	; 0x160 <Char_to_PC+0x4>
 166:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
 16a:	08 95       	ret

0000016c <String_to_PC>:
 16c:	0f 93       	push	r16
 16e:	1f 93       	push	r17
 170:	cf 93       	push	r28
 172:	df 93       	push	r29
 174:	fc 01       	movw	r30, r24
 176:	80 81       	ld	r24, Z
 178:	81 11       	cpse	r24, r1
 17a:	0a c0       	rjmp	.+20     	; 0x190 <String_to_PC+0x24>
 17c:	11 c0       	rjmp	.+34     	; 0x1a0 <String_to_PC+0x34>
 17e:	89 91       	ld	r24, Y+
 180:	88 23       	and	r24, r24
 182:	71 f0       	breq	.+28     	; 0x1a0 <String_to_PC+0x34>
 184:	0e 94 ae 00 	call	0x15c	; 0x15c <Char_to_PC>
 188:	0c 17       	cp	r16, r28
 18a:	1d 07       	cpc	r17, r29
 18c:	c1 f7       	brne	.-16     	; 0x17e <String_to_PC+0x12>
 18e:	08 c0       	rjmp	.+16     	; 0x1a0 <String_to_PC+0x34>
 190:	8f 01       	movw	r16, r30
 192:	0e 94 ae 00 	call	0x15c	; 0x15c <Char_to_PC>
 196:	e8 01       	movw	r28, r16
 198:	21 96       	adiw	r28, 0x01	; 1
 19a:	08 53       	subi	r16, 0x38	; 56
 19c:	1f 4f       	sbci	r17, 0xFF	; 255
 19e:	ef cf       	rjmp	.-34     	; 0x17e <String_to_PC+0x12>
 1a0:	df 91       	pop	r29
 1a2:	cf 91       	pop	r28
 1a4:	1f 91       	pop	r17
 1a6:	0f 91       	pop	r16
 1a8:	08 95       	ret

000001aa <newline>:
 1aa:	81 e4       	ldi	r24, 0x41	; 65
 1ac:	91 e0       	ldi	r25, 0x01	; 1
 1ae:	0e 94 b6 00 	call	0x16c	; 0x16c <String_to_PC>
 1b2:	08 95       	ret

000001b4 <send_byte_with_Ack>:
 1b4:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 1b8:	84 ec       	ldi	r24, 0xC4	; 196
 1ba:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 1be:	ec eb       	ldi	r30, 0xBC	; 188
 1c0:	f0 e0       	ldi	r31, 0x00	; 0
 1c2:	80 81       	ld	r24, Z
 1c4:	88 23       	and	r24, r24
 1c6:	ec f7       	brge	.-6      	; 0x1c2 <send_byte_with_Ack+0xe>
 1c8:	08 95       	ret

000001ca <send_byte_with_Nack>:
 1ca:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 1ce:	84 e8       	ldi	r24, 0x84	; 132
 1d0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 1d4:	ec eb       	ldi	r30, 0xBC	; 188
 1d6:	f0 e0       	ldi	r31, 0x00	; 0
 1d8:	80 81       	ld	r24, Z
 1da:	88 23       	and	r24, r24
 1dc:	ec f7       	brge	.-6      	; 0x1d8 <send_byte_with_Nack+0xe>
 1de:	08 95       	ret

000001e0 <I2C_Tx_initiate_mode>:
 1e0:	cf 93       	push	r28
 1e2:	c8 2f       	mov	r28, r24
 1e4:	84 e4       	ldi	r24, 0x44	; 68
 1e6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 1ea:	ec eb       	ldi	r30, 0xBC	; 188
 1ec:	f0 e0       	ldi	r31, 0x00	; 0
 1ee:	80 81       	ld	r24, Z
 1f0:	88 23       	and	r24, r24
 1f2:	ec f7       	brge	.-6      	; 0x1ee <I2C_Tx_initiate_mode+0xe>
 1f4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 1f8:	80 e0       	ldi	r24, 0x00	; 0
 1fa:	0e 94 da 00 	call	0x1b4	; 0x1b4 <send_byte_with_Ack>
 1fe:	8c 2f       	mov	r24, r28
 200:	0e 94 e5 00 	call	0x1ca	; 0x1ca <send_byte_with_Nack>
 204:	80 e8       	ldi	r24, 0x80	; 128
 206:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 20a:	cf 91       	pop	r28
 20c:	08 95       	ret

0000020e <I2C_Tx>:
 20e:	cf 92       	push	r12
 210:	df 92       	push	r13
 212:	ef 92       	push	r14
 214:	ff 92       	push	r15
 216:	0f 93       	push	r16
 218:	1f 93       	push	r17
 21a:	cf 93       	push	r28
 21c:	df 93       	push	r29
 21e:	e8 2e       	mov	r14, r24
 220:	c6 2f       	mov	r28, r22
 222:	d4 2e       	mov	r13, r20
 224:	d5 2f       	mov	r29, r21
 226:	84 e4       	ldi	r24, 0x44	; 68
 228:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 22c:	ec eb       	ldi	r30, 0xBC	; 188
 22e:	f0 e0       	ldi	r31, 0x00	; 0
 230:	80 81       	ld	r24, Z
 232:	88 23       	and	r24, r24
 234:	ec f7       	brge	.-6      	; 0x230 <I2C_Tx+0x22>
 236:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 23a:	8e 2d       	mov	r24, r14
 23c:	0e 94 da 00 	call	0x1b4	; 0x1b4 <send_byte_with_Ack>
 240:	8c 2f       	mov	r24, r28
 242:	0e 94 da 00 	call	0x1b4	; 0x1b4 <send_byte_with_Ack>
 246:	f1 2c       	mov	r15, r1
 248:	1e 14       	cp	r1, r14
 24a:	1f 04       	cpc	r1, r15
 24c:	d4 f4       	brge	.+52     	; 0x282 <I2C_Tx+0x74>
 24e:	0d 2d       	mov	r16, r13
 250:	1d 2f       	mov	r17, r29
 252:	c0 e0       	ldi	r28, 0x00	; 0
 254:	d0 e0       	ldi	r29, 0x00	; 0
 256:	67 01       	movw	r12, r14
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	c8 1a       	sub	r12, r24
 25c:	d1 08       	sbc	r13, r1
 25e:	cc 16       	cp	r12, r28
 260:	dd 06       	cpc	r13, r29
 262:	29 f4       	brne	.+10     	; 0x26e <I2C_Tx+0x60>
 264:	f8 01       	movw	r30, r16
 266:	80 81       	ld	r24, Z
 268:	0e 94 e5 00 	call	0x1ca	; 0x1ca <send_byte_with_Nack>
 26c:	04 c0       	rjmp	.+8      	; 0x276 <I2C_Tx+0x68>
 26e:	f8 01       	movw	r30, r16
 270:	80 81       	ld	r24, Z
 272:	0e 94 da 00 	call	0x1b4	; 0x1b4 <send_byte_with_Ack>
 276:	21 96       	adiw	r28, 0x01	; 1
 278:	0f 5f       	subi	r16, 0xFF	; 255
 27a:	1f 4f       	sbci	r17, 0xFF	; 255
 27c:	ce 15       	cp	r28, r14
 27e:	df 05       	cpc	r29, r15
 280:	71 f7       	brne	.-36     	; 0x25e <I2C_Tx+0x50>
 282:	80 e8       	ldi	r24, 0x80	; 128
 284:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 288:	df 91       	pop	r29
 28a:	cf 91       	pop	r28
 28c:	1f 91       	pop	r17
 28e:	0f 91       	pop	r16
 290:	ff 90       	pop	r15
 292:	ef 90       	pop	r14
 294:	df 90       	pop	r13
 296:	cf 90       	pop	r12
 298:	08 95       	ret

0000029a <I2C_Tx_2_integers>:
 29a:	cf 93       	push	r28
 29c:	df 93       	push	r29
 29e:	00 d0       	rcall	.+0      	; 0x2a0 <I2C_Tx_2_integers+0x6>
 2a0:	00 d0       	rcall	.+0      	; 0x2a2 <I2C_Tx_2_integers+0x8>
 2a2:	cd b7       	in	r28, 0x3d	; 61
 2a4:	de b7       	in	r29, 0x3e	; 62
 2a6:	89 83       	std	Y+1, r24	; 0x01
 2a8:	9a 83       	std	Y+2, r25	; 0x02
 2aa:	6b 83       	std	Y+3, r22	; 0x03
 2ac:	7c 83       	std	Y+4, r23	; 0x04
 2ae:	ae 01       	movw	r20, r28
 2b0:	4f 5f       	subi	r20, 0xFF	; 255
 2b2:	5f 4f       	sbci	r21, 0xFF	; 255
 2b4:	61 e0       	ldi	r22, 0x01	; 1
 2b6:	84 e0       	ldi	r24, 0x04	; 4
 2b8:	0e 94 07 01 	call	0x20e	; 0x20e <I2C_Tx>
 2bc:	0f 90       	pop	r0
 2be:	0f 90       	pop	r0
 2c0:	0f 90       	pop	r0
 2c2:	0f 90       	pop	r0
 2c4:	df 91       	pop	r29
 2c6:	cf 91       	pop	r28
 2c8:	08 95       	ret

000002ca <I2C_Tx_any_segment>:
 2ca:	cf 93       	push	r28
 2cc:	df 93       	push	r29
 2ce:	00 d0       	rcall	.+0      	; 0x2d0 <I2C_Tx_any_segment+0x6>
 2d0:	cd b7       	in	r28, 0x3d	; 61
 2d2:	de b7       	in	r29, 0x3e	; 62
 2d4:	89 83       	std	Y+1, r24	; 0x01
 2d6:	6a 83       	std	Y+2, r22	; 0x02
 2d8:	ae 01       	movw	r20, r28
 2da:	4f 5f       	subi	r20, 0xFF	; 255
 2dc:	5f 4f       	sbci	r21, 0xFF	; 255
 2de:	63 e0       	ldi	r22, 0x03	; 3
 2e0:	82 e0       	ldi	r24, 0x02	; 2
 2e2:	0e 94 07 01 	call	0x20e	; 0x20e <I2C_Tx>
 2e6:	0f 90       	pop	r0
 2e8:	0f 90       	pop	r0
 2ea:	df 91       	pop	r29
 2ec:	cf 91       	pop	r28
 2ee:	08 95       	ret

000002f0 <I2C_Tx_any_segment_clear_all>:
 2f0:	cf 93       	push	r28
 2f2:	df 93       	push	r29
 2f4:	00 d0       	rcall	.+0      	; 0x2f6 <I2C_Tx_any_segment_clear_all+0x6>
 2f6:	cd b7       	in	r28, 0x3d	; 61
 2f8:	de b7       	in	r29, 0x3e	; 62
 2fa:	81 e6       	ldi	r24, 0x61	; 97
 2fc:	89 83       	std	Y+1, r24	; 0x01
 2fe:	1a 82       	std	Y+2, r1	; 0x02
 300:	ae 01       	movw	r20, r28
 302:	4f 5f       	subi	r20, 0xFF	; 255
 304:	5f 4f       	sbci	r21, 0xFF	; 255
 306:	62 e0       	ldi	r22, 0x02	; 2
 308:	82 e0       	ldi	r24, 0x02	; 2
 30a:	0e 94 07 01 	call	0x20e	; 0x20e <I2C_Tx>
 30e:	0f 90       	pop	r0
 310:	0f 90       	pop	r0
 312:	df 91       	pop	r29
 314:	cf 91       	pop	r28
 316:	08 95       	ret

00000318 <I2C_Tx_LED_dimmer>:
 318:	cf 93       	push	r28
 31a:	df 93       	push	r29
 31c:	1f 92       	push	r1
 31e:	cd b7       	in	r28, 0x3d	; 61
 320:	de b7       	in	r29, 0x3e	; 62
 322:	1e 99       	sbic	0x03, 6	; 3
 324:	03 c0       	rjmp	.+6      	; 0x32c <I2C_Tx_LED_dimmer+0x14>
 326:	81 e0       	ldi	r24, 0x01	; 1
 328:	89 83       	std	Y+1, r24	; 0x01
 32a:	01 c0       	rjmp	.+2      	; 0x32e <I2C_Tx_LED_dimmer+0x16>
 32c:	19 82       	std	Y+1, r1	; 0x01
 32e:	ae 01       	movw	r20, r28
 330:	4f 5f       	subi	r20, 0xFF	; 255
 332:	5f 4f       	sbci	r21, 0xFF	; 255
 334:	61 e5       	ldi	r22, 0x51	; 81
 336:	81 e0       	ldi	r24, 0x01	; 1
 338:	0e 94 07 01 	call	0x20e	; 0x20e <I2C_Tx>
 33c:	0f 90       	pop	r0
 33e:	df 91       	pop	r29
 340:	cf 91       	pop	r28
 342:	08 95       	ret

00000344 <receive_byte_with_Ack>:
 344:	84 ec       	ldi	r24, 0xC4	; 196
 346:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 34a:	ec eb       	ldi	r30, 0xBC	; 188
 34c:	f0 e0       	ldi	r31, 0x00	; 0
 34e:	80 81       	ld	r24, Z
 350:	88 23       	and	r24, r24
 352:	ec f7       	brge	.-6      	; 0x34e <receive_byte_with_Ack+0xa>
 354:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 358:	08 95       	ret

0000035a <receive_byte_with_Nack>:
 35a:	84 e8       	ldi	r24, 0x84	; 132
 35c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 360:	ec eb       	ldi	r30, 0xBC	; 188
 362:	f0 e0       	ldi	r31, 0x00	; 0
 364:	80 81       	ld	r24, Z
 366:	88 23       	and	r24, r24
 368:	ec f7       	brge	.-6      	; 0x364 <receive_byte_with_Nack+0xa>
 36a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 36e:	08 95       	ret

00000370 <Read_Hello_world_string>:
 370:	88 e4       	ldi	r24, 0x48	; 72
 372:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <I2C_Tx_initiate_mode>
 376:	84 e4       	ldi	r24, 0x44	; 68
 378:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 37c:	ec eb       	ldi	r30, 0xBC	; 188
 37e:	f0 e0       	ldi	r31, 0x00	; 0
 380:	80 81       	ld	r24, Z
 382:	88 23       	and	r24, r24
 384:	ec f7       	brge	.-6      	; 0x380 <Read_Hello_world_string+0x10>
 386:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 38a:	0e 94 a2 01 	call	0x344	; 0x344 <receive_byte_with_Ack>
 38e:	88 23       	and	r24, r24
 390:	19 f0       	breq	.+6      	; 0x398 <Read_Hello_world_string+0x28>
 392:	0e 94 ae 00 	call	0x15c	; 0x15c <Char_to_PC>
 396:	f9 cf       	rjmp	.-14     	; 0x38a <Read_Hello_world_string+0x1a>
 398:	0e 94 ad 01 	call	0x35a	; 0x35a <receive_byte_with_Nack>
 39c:	80 e8       	ldi	r24, 0x80	; 128
 39e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 3a2:	08 95       	ret

000003a4 <PRN_16bit_GEN>:
 3a4:	cf 93       	push	r28
 3a6:	df 93       	push	r29
 3a8:	00 97       	sbiw	r24, 0x00	; 0
 3aa:	e9 f5       	brne	.+122    	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
 3ac:	8b ef       	ldi	r24, 0xFB	; 251
 3ae:	91 e0       	ldi	r25, 0x01	; 1
 3b0:	0e 94 a0 03 	call	0x740	; 0x740 <eeprom_read_byte>
 3b4:	c8 2f       	mov	r28, r24
 3b6:	8a ef       	ldi	r24, 0xFA	; 250
 3b8:	91 e0       	ldi	r25, 0x01	; 1
 3ba:	0e 94 a0 03 	call	0x740	; 0x740 <eeprom_read_byte>
 3be:	2c 2f       	mov	r18, r28
 3c0:	30 e0       	ldi	r19, 0x00	; 0
 3c2:	32 2f       	mov	r19, r18
 3c4:	22 27       	eor	r18, r18
 3c6:	28 0f       	add	r18, r24
 3c8:	31 1d       	adc	r19, r1
 3ca:	e9 01       	movw	r28, r18
 3cc:	d6 95       	lsr	r29
 3ce:	c7 95       	ror	r28
 3d0:	d6 95       	lsr	r29
 3d2:	c7 95       	ror	r28
 3d4:	c9 01       	movw	r24, r18
 3d6:	96 95       	lsr	r25
 3d8:	87 95       	ror	r24
 3da:	96 95       	lsr	r25
 3dc:	87 95       	ror	r24
 3de:	96 95       	lsr	r25
 3e0:	87 95       	ror	r24
 3e2:	c8 27       	eor	r28, r24
 3e4:	d9 27       	eor	r29, r25
 3e6:	c2 27       	eor	r28, r18
 3e8:	d3 27       	eor	r29, r19
 3ea:	c9 01       	movw	r24, r18
 3ec:	96 95       	lsr	r25
 3ee:	87 95       	ror	r24
 3f0:	92 95       	swap	r25
 3f2:	82 95       	swap	r24
 3f4:	8f 70       	andi	r24, 0x0F	; 15
 3f6:	89 27       	eor	r24, r25
 3f8:	9f 70       	andi	r25, 0x0F	; 15
 3fa:	89 27       	eor	r24, r25
 3fc:	c8 27       	eor	r28, r24
 3fe:	d9 27       	eor	r29, r25
 400:	dd 27       	eor	r29, r29
 402:	c6 95       	lsr	r28
 404:	d7 95       	ror	r29
 406:	cc 27       	eor	r28, r28
 408:	36 95       	lsr	r19
 40a:	27 95       	ror	r18
 40c:	c2 2b       	or	r28, r18
 40e:	d3 2b       	or	r29, r19
 410:	6d 2f       	mov	r22, r29
 412:	8b ef       	ldi	r24, 0xFB	; 251
 414:	91 e0       	ldi	r25, 0x01	; 1
 416:	0e 94 a8 03 	call	0x750	; 0x750 <eeprom_write_byte>
 41a:	6c 2f       	mov	r22, r28
 41c:	8a ef       	ldi	r24, 0xFA	; 250
 41e:	91 e0       	ldi	r25, 0x01	; 1
 420:	0e 94 a8 03 	call	0x750	; 0x750 <eeprom_write_byte>
 424:	23 c0       	rjmp	.+70     	; 0x46c <__LOCK_REGION_LENGTH__+0x6c>
 426:	ec 01       	movw	r28, r24
 428:	d6 95       	lsr	r29
 42a:	c7 95       	ror	r28
 42c:	d6 95       	lsr	r29
 42e:	c7 95       	ror	r28
 430:	9c 01       	movw	r18, r24
 432:	36 95       	lsr	r19
 434:	27 95       	ror	r18
 436:	36 95       	lsr	r19
 438:	27 95       	ror	r18
 43a:	36 95       	lsr	r19
 43c:	27 95       	ror	r18
 43e:	c2 27       	eor	r28, r18
 440:	d3 27       	eor	r29, r19
 442:	c8 27       	eor	r28, r24
 444:	d9 27       	eor	r29, r25
 446:	9c 01       	movw	r18, r24
 448:	36 95       	lsr	r19
 44a:	27 95       	ror	r18
 44c:	32 95       	swap	r19
 44e:	22 95       	swap	r18
 450:	2f 70       	andi	r18, 0x0F	; 15
 452:	23 27       	eor	r18, r19
 454:	3f 70       	andi	r19, 0x0F	; 15
 456:	23 27       	eor	r18, r19
 458:	c2 27       	eor	r28, r18
 45a:	d3 27       	eor	r29, r19
 45c:	dd 27       	eor	r29, r29
 45e:	c6 95       	lsr	r28
 460:	d7 95       	ror	r29
 462:	cc 27       	eor	r28, r28
 464:	96 95       	lsr	r25
 466:	87 95       	ror	r24
 468:	c8 2b       	or	r28, r24
 46a:	d9 2b       	or	r29, r25
 46c:	ce 01       	movw	r24, r28
 46e:	df 91       	pop	r29
 470:	cf 91       	pop	r28
 472:	08 95       	ret

00000474 <I2C_Tx_snowstorm_display>:
 474:	80 e0       	ldi	r24, 0x00	; 0
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	0e 94 d2 01 	call	0x3a4	; 0x3a4 <PRN_16bit_GEN>
 47c:	bc 01       	movw	r22, r24
 47e:	66 0f       	add	r22, r22
 480:	77 1f       	adc	r23, r23
 482:	0e 94 4d 01 	call	0x29a	; 0x29a <I2C_Tx_2_integers>
 486:	62 e6       	ldi	r22, 0x62	; 98
 488:	7e e9       	ldi	r23, 0x9E	; 158
 48a:	83 e0       	ldi	r24, 0x03	; 3
 48c:	0e 94 81 00 	call	0x102	; 0x102 <Timer_T1_sub>
 490:	f1 cf       	rjmp	.-30     	; 0x474 <I2C_Tx_snowstorm_display>

00000492 <I2C_Rx_get_version>:
 492:	cf 92       	push	r12
 494:	df 92       	push	r13
 496:	ef 92       	push	r14
 498:	ff 92       	push	r15
 49a:	0f 93       	push	r16
 49c:	1f 93       	push	r17
 49e:	cf 93       	push	r28
 4a0:	df 93       	push	r29
 4a2:	00 d0       	rcall	.+0      	; 0x4a4 <I2C_Rx_get_version+0x12>
 4a4:	cd b7       	in	r28, 0x3d	; 61
 4a6:	de b7       	in	r29, 0x3e	; 62
 4a8:	89 83       	std	Y+1, r24	; 0x01
 4aa:	1a 82       	std	Y+2, r1	; 0x02
 4ac:	ae 01       	movw	r20, r28
 4ae:	4f 5f       	subi	r20, 0xFF	; 255
 4b0:	5f 4f       	sbci	r21, 0xFF	; 255
 4b2:	60 e5       	ldi	r22, 0x50	; 80
 4b4:	81 e0       	ldi	r24, 0x01	; 1
 4b6:	0e 94 07 01 	call	0x20e	; 0x20e <I2C_Tx>
 4ba:	84 e4       	ldi	r24, 0x44	; 68
 4bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 4c0:	ec eb       	ldi	r30, 0xBC	; 188
 4c2:	f0 e0       	ldi	r31, 0x00	; 0
 4c4:	80 81       	ld	r24, Z
 4c6:	88 23       	and	r24, r24
 4c8:	ec f7       	brge	.-6      	; 0x4c4 <I2C_Rx_get_version+0x32>
 4ca:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 4ce:	0e 94 a2 01 	call	0x344	; 0x344 <receive_byte_with_Ack>
 4d2:	88 0f       	add	r24, r24
 4d4:	80 56       	subi	r24, 0x60	; 96
 4d6:	98 2f       	mov	r25, r24
 4d8:	99 0f       	add	r25, r25
 4da:	99 0f       	add	r25, r25
 4dc:	e8 2e       	mov	r14, r24
 4de:	e9 0e       	add	r14, r25
 4e0:	0e 94 a2 01 	call	0x344	; 0x344 <receive_byte_with_Ack>
 4e4:	8e 0d       	add	r24, r14
 4e6:	80 53       	subi	r24, 0x30	; 48
 4e8:	e8 2e       	mov	r14, r24
 4ea:	f1 2c       	mov	r15, r1
 4ec:	1e 14       	cp	r1, r14
 4ee:	1f 04       	cpc	r1, r15
 4f0:	bc f4       	brge	.+46     	; 0x520 <__stack+0x21>
 4f2:	00 e0       	ldi	r16, 0x00	; 0
 4f4:	10 e0       	ldi	r17, 0x00	; 0
 4f6:	67 01       	movw	r12, r14
 4f8:	81 e0       	ldi	r24, 0x01	; 1
 4fa:	c8 1a       	sub	r12, r24
 4fc:	d1 08       	sbc	r13, r1
 4fe:	c0 16       	cp	r12, r16
 500:	d1 06       	cpc	r13, r17
 502:	29 f4       	brne	.+10     	; 0x50e <__stack+0xf>
 504:	0e 94 ad 01 	call	0x35a	; 0x35a <receive_byte_with_Nack>
 508:	0e 94 ae 00 	call	0x15c	; 0x15c <Char_to_PC>
 50c:	04 c0       	rjmp	.+8      	; 0x516 <__stack+0x17>
 50e:	0e 94 a2 01 	call	0x344	; 0x344 <receive_byte_with_Ack>
 512:	0e 94 ae 00 	call	0x15c	; 0x15c <Char_to_PC>
 516:	0f 5f       	subi	r16, 0xFF	; 255
 518:	1f 4f       	sbci	r17, 0xFF	; 255
 51a:	0e 15       	cp	r16, r14
 51c:	1f 05       	cpc	r17, r15
 51e:	79 f7       	brne	.-34     	; 0x4fe <I2C_Rx_get_version+0x6c>
 520:	80 e8       	ldi	r24, 0x80	; 128
 522:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 526:	0f 90       	pop	r0
 528:	0f 90       	pop	r0
 52a:	df 91       	pop	r29
 52c:	cf 91       	pop	r28
 52e:	1f 91       	pop	r17
 530:	0f 91       	pop	r16
 532:	ff 90       	pop	r15
 534:	ef 90       	pop	r14
 536:	df 90       	pop	r13
 538:	cf 90       	pop	r12
 53a:	08 95       	ret

0000053c <I2C_TX_328_check>:
 53c:	84 e4       	ldi	r24, 0x44	; 68
 53e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 542:	ec eb       	ldi	r30, 0xBC	; 188
 544:	f0 e0       	ldi	r31, 0x00	; 0
 546:	80 81       	ld	r24, Z
 548:	88 23       	and	r24, r24
 54a:	ec f7       	brge	.-6      	; 0x546 <I2C_TX_328_check+0xa>
 54c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 550:	80 e0       	ldi	r24, 0x00	; 0
 552:	0e 94 da 00 	call	0x1b4	; 0x1b4 <send_byte_with_Ack>
 556:	86 e5       	ldi	r24, 0x56	; 86
 558:	0e 94 e5 00 	call	0x1ca	; 0x1ca <send_byte_with_Nack>
 55c:	ec eb       	ldi	r30, 0xBC	; 188
 55e:	f0 e0       	ldi	r31, 0x00	; 0
 560:	84 e8       	ldi	r24, 0x84	; 132
 562:	80 83       	st	Z, r24
 564:	80 81       	ld	r24, Z
 566:	81 64       	ori	r24, 0x41	; 65
 568:	80 83       	st	Z, r24
 56a:	08 95       	ret

0000056c <main>:

	int main (void){

		char keypress = 0, digit_num=0;

		setup_HW;
 56c:	04 b6       	in	r0, 0x34	; 52
 56e:	03 fe       	sbrs	r0, 3
 570:	03 c0       	rjmp	.+6      	; 0x578 <main+0xc>
 572:	81 e0       	ldi	r24, 0x01	; 1
 574:	80 93 0e 02 	sts	0x020E, r24	; 0x80020e <__data_end>
 578:	a8 95       	wdr
 57a:	84 b7       	in	r24, 0x34	; 52
 57c:	87 7f       	andi	r24, 0xF7	; 247
 57e:	84 bf       	out	0x34, r24	; 52
 580:	e0 e6       	ldi	r30, 0x60	; 96
 582:	f0 e0       	ldi	r31, 0x00	; 0
 584:	80 81       	ld	r24, Z
 586:	88 61       	ori	r24, 0x18	; 24
 588:	80 83       	st	Z, r24
 58a:	10 82       	st	Z, r1
 58c:	82 e0       	ldi	r24, 0x02	; 2
 58e:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__DATA_REGION_ORIGIN__+0x5a>
 592:	ec e7       	ldi	r30, 0x7C	; 124
 594:	f0 e0       	ldi	r31, 0x00	; 0
 596:	80 81       	ld	r24, Z
 598:	80 64       	ori	r24, 0x40	; 64
 59a:	80 83       	st	Z, r24
 59c:	85 b7       	in	r24, 0x35	; 53
 59e:	8f 7e       	andi	r24, 0xEF	; 239
 5a0:	85 bf       	out	0x35, r24	; 53
 5a2:	8a b1       	in	r24, 0x0a	; 10
 5a4:	8b 77       	andi	r24, 0x7B	; 123
 5a6:	8a b9       	out	0x0a, r24	; 10
 5a8:	8b b1       	in	r24, 0x0b	; 11
 5aa:	84 68       	ori	r24, 0x84	; 132
 5ac:	8b b9       	out	0x0b, r24	; 11
 5ae:	26 98       	cbi	0x04, 6	; 4
 5b0:	2e 9a       	sbi	0x05, 6	; 5
 5b2:	85 b7       	in	r24, 0x35	; 53
 5b4:	8f 7e       	andi	r24, 0xEF	; 239
 5b6:	85 bf       	out	0x35, r24	; 53
 5b8:	84 b1       	in	r24, 0x04	; 4
 5ba:	8b 77       	andi	r24, 0x7B	; 123
 5bc:	84 b9       	out	0x04, r24	; 4
 5be:	87 b1       	in	r24, 0x07	; 7
 5c0:	88 7f       	andi	r24, 0xF8	; 248
 5c2:	87 b9       	out	0x07, r24	; 7
 5c4:	8a b1       	in	r24, 0x0a	; 10
 5c6:	87 78       	andi	r24, 0x87	; 135
 5c8:	8a b9       	out	0x0a, r24	; 10
 5ca:	85 b1       	in	r24, 0x05	; 5
 5cc:	84 68       	ori	r24, 0x84	; 132
 5ce:	85 b9       	out	0x05, r24	; 5
 5d0:	88 b1       	in	r24, 0x08	; 8
 5d2:	87 60       	ori	r24, 0x07	; 7
 5d4:	88 b9       	out	0x08, r24	; 8
 5d6:	8b b1       	in	r24, 0x0b	; 11
 5d8:	88 67       	ori	r24, 0x78	; 120
 5da:	8b b9       	out	0x0b, r24	; 11
 5dc:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
 5e0:	8d ef       	ldi	r24, 0xFD	; 253
 5e2:	91 e0       	ldi	r25, 0x01	; 1
 5e4:	0e 94 a8 03 	call	0x750	; 0x750 <eeprom_write_byte>
 5e8:	49 9b       	sbis	0x09, 1	; 9
 5ea:	fe cf       	rjmp	.-4      	; 0x5e8 <main+0x7c>
 5ec:	6c ed       	ldi	r22, 0xDC	; 220
 5ee:	85 e0       	ldi	r24, 0x05	; 5
 5f0:	0e 94 63 00 	call	0xc6	; 0xc6 <Timer_T0_sub>
 5f4:	8e ef       	ldi	r24, 0xFE	; 254
 5f6:	91 e0       	ldi	r25, 0x01	; 1
 5f8:	0e 94 a0 03 	call	0x740	; 0x740 <eeprom_read_byte>
 5fc:	c8 2f       	mov	r28, r24
 5fe:	80 ef       	ldi	r24, 0xF0	; 240
 600:	8c 0f       	add	r24, r28
 602:	80 3e       	cpi	r24, 0xE0	; 224
 604:	40 f4       	brcc	.+16     	; 0x616 <main+0xaa>
 606:	8f ef       	ldi	r24, 0xFF	; 255
 608:	91 e0       	ldi	r25, 0x01	; 1
 60a:	0e 94 a0 03 	call	0x740	; 0x740 <eeprom_read_byte>
 60e:	c8 13       	cpse	r28, r24
 610:	02 c0       	rjmp	.+4      	; 0x616 <main+0xaa>
 612:	c0 93 66 00 	sts	0x0066, r28	; 0x800066 <__DATA_REGION_ORIGIN__+0x6>
 616:	60 e1       	ldi	r22, 0x10	; 16
 618:	80 e0       	ldi	r24, 0x00	; 0
 61a:	0e 94 53 00 	call	0xa6	; 0xa6 <USART_init>
 61e:	81 e0       	ldi	r24, 0x01	; 1
 620:	90 e0       	ldi	r25, 0x00	; 0
 622:	0e 94 6a 00 	call	0xd4	; 0xd4 <Timer_T0_10mS_delay_x_m>
 626:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <__data_end>
 62a:	81 11       	cpse	r24, r1
 62c:	45 c0       	rjmp	.+138    	; 0x6b8 <main+0x14c>
 62e:	0e 94 8c 01 	call	0x318	; 0x318 <I2C_Tx_LED_dimmer>
 632:	0e 94 9e 02 	call	0x53c	; 0x53c <I2C_TX_328_check>
 636:	84 e4       	ldi	r24, 0x44	; 68
 638:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 63c:	ec eb       	ldi	r30, 0xBC	; 188
 63e:	f0 e0       	ldi	r31, 0x00	; 0
 640:	80 81       	ld	r24, Z
 642:	88 23       	and	r24, r24
 644:	ec f7       	brge	.-6      	; 0x640 <main+0xd4>
 646:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
 64a:	0e 94 ad 01 	call	0x35a	; 0x35a <receive_byte_with_Nack>
 64e:	81 30       	cpi	r24, 0x01	; 1
 650:	39 f5       	brne	.+78     	; 0x6a0 <main+0x134>
 652:	80 e8       	ldi	r24, 0x80	; 128
 654:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
 658:	8d e5       	ldi	r24, 0x5D	; 93
 65a:	91 e0       	ldi	r25, 0x01	; 1
 65c:	0e 94 b6 00 	call	0x16c	; 0x16c <String_to_PC>
 660:	0e 94 8f 00 	call	0x11e	; 0x11e <waitforkeypress>
 664:	82 33       	cpi	r24, 0x32	; 50
 666:	69 f0       	breq	.+26     	; 0x682 <main+0x116>
 668:	18 f4       	brcc	.+6      	; 0x670 <main+0x104>
 66a:	81 33       	cpi	r24, 0x31	; 49
 66c:	31 f0       	breq	.+12     	; 0x67a <main+0x10e>
 66e:	1b c0       	rjmp	.+54     	; 0x6a6 <main+0x13a>
 670:	83 33       	cpi	r24, 0x33	; 51
 672:	59 f0       	breq	.+22     	; 0x68a <main+0x11e>
 674:	84 33       	cpi	r24, 0x34	; 52
 676:	91 f0       	breq	.+36     	; 0x69c <main+0x130>
 678:	16 c0       	rjmp	.+44     	; 0x6a6 <main+0x13a>
 67a:	80 e3       	ldi	r24, 0x30	; 48
 67c:	0e 94 49 02 	call	0x492	; 0x492 <I2C_Rx_get_version>
 680:	12 c0       	rjmp	.+36     	; 0x6a6 <main+0x13a>
 682:	81 e3       	ldi	r24, 0x31	; 49
 684:	0e 94 49 02 	call	0x492	; 0x492 <I2C_Rx_get_version>
 688:	0e c0       	rjmp	.+28     	; 0x6a6 <main+0x13a>
 68a:	0e 94 b8 01 	call	0x370	; 0x370 <Read_Hello_world_string>
 68e:	0e 94 d5 00 	call	0x1aa	; 0x1aa <newline>
 692:	0e 94 8f 00 	call	0x11e	; 0x11e <waitforkeypress>
 696:	88 37       	cpi	r24, 0x78	; 120
 698:	c1 f7       	brne	.-16     	; 0x68a <main+0x11e>
 69a:	05 c0       	rjmp	.+10     	; 0x6a6 <main+0x13a>
 69c:	0e 94 3a 02 	call	0x474	; 0x474 <I2C_Tx_snowstorm_display>
 6a0:	80 e8       	ldi	r24, 0x80	; 128
 6a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

		if (!(watch_dog_reset)) 												//Normal start up i.e. POR or post programming
 6a6:	80 91 0e 02 	lds	r24, 0x020E	; 0x80020e <__data_end>
 6aa:	81 11       	cpse	r24, r1
 6ac:	05 c0       	rjmp	.+10     	; 0x6b8 <main+0x14c>
		String_to_PC(message_1);												//Send normal start-up message
 6ae:	81 ed       	ldi	r24, 0xD1	; 209
 6b0:	91 e0       	ldi	r25, 0x01	; 1
 6b2:	0e 94 b6 00 	call	0x16c	; 0x16c <String_to_PC>
 6b6:	0c c0       	rjmp	.+24     	; 0x6d0 <main+0x164>


		else {watch_dog_reset = 0;												//Start up following SW_reset (reset watch_dog_reset flag)
 6b8:	10 92 0e 02 	sts	0x020E, r1	; 0x80020e <__data_end>
			newline();String_to_PC(message_2);										//Send abbreviated message
 6bc:	0e 94 d5 00 	call	0x1aa	; 0x1aa <newline>
 6c0:	87 e0       	ldi	r24, 0x07	; 7
 6c2:	92 e0       	ldi	r25, 0x02	; 2
 6c4:	0e 94 b6 00 	call	0x16c	; 0x16c <String_to_PC>
		I2C_Tx_any_segment('h', 0);}											//Restore display after SW_reset
 6c8:	60 e0       	ldi	r22, 0x00	; 0
 6ca:	88 e6       	ldi	r24, 0x68	; 104
 6cc:	0e 94 65 01 	call	0x2ca	; 0x2ca <I2C_Tx_any_segment>





	int main (void){
 6d0:	d0 e0       	ldi	r29, 0x00	; 0
return UDR0;}


/*********************************************************************/
char receiveChar(void)
{return UDR0;}
 6d2:	06 ec       	ldi	r16, 0xC6	; 198
 6d4:	10 e0       	ldi	r17, 0x00	; 0
			newline();String_to_PC(message_2);										//Send abbreviated message
		I2C_Tx_any_segment('h', 0);}											//Restore display after SW_reset

		do{																		//Keep inputting data until x is received

			while(1){if(isCharavailable(10)){keypress = receiveChar();break;}}	//"isCharavailable" is repeatedly executed until a character is received
 6d6:	8a e0       	ldi	r24, 0x0A	; 10
 6d8:	0e 94 97 00 	call	0x12e	; 0x12e <isCharavailable>
 6dc:	88 23       	and	r24, r24
 6de:	d9 f3       	breq	.-10     	; 0x6d6 <main+0x16a>
 6e0:	f8 01       	movw	r30, r16
 6e2:	c0 81       	ld	r28, Z
			// when the "break" command allows program flow to escape from the "while(1)" loop

			switch(keypress){														//Test keypress
 6e4:	c8 36       	cpi	r28, 0x68	; 104
 6e6:	38 f4       	brcc	.+14     	; 0x6f6 <main+0x18a>
 6e8:	c1 36       	cpi	r28, 0x61	; 97
 6ea:	58 f4       	brcc	.+22     	; 0x702 <main+0x196>
 6ec:	80 ed       	ldi	r24, 0xD0	; 208
 6ee:	8c 0f       	add	r24, r28
 6f0:	88 30       	cpi	r24, 0x08	; 8
 6f2:	20 f0       	brcs	.+8      	; 0x6fc <main+0x190>
 6f4:	0b c0       	rjmp	.+22     	; 0x70c <main+0x1a0>
 6f6:	c8 37       	cpi	r28, 0x78	; 120
 6f8:	a1 f0       	breq	.+40     	; 0x722 <main+0x1b6>
 6fa:	08 c0       	rjmp	.+16     	; 0x70c <main+0x1a0>
				case '0': case '1': case '2':
				case '3': case '4': case '5':
				case '6': case '7': digit_num = keypress - '0'; break;					//If numeric save it as "digit_num".
 6fc:	d0 ed       	ldi	r29, 0xD0	; 208
 6fe:	dc 0f       	add	r29, r28
 700:	10 c0       	rjmp	.+32     	; 0x722 <main+0x1b6>

				case 'a': case 'b': case 'c':											//If a letter illuminate the display
				case 'd': case 'e': case 'f':
				case 'g': I2C_Tx_any_segment(keypress, digit_num); break;
 702:	6d 2f       	mov	r22, r29
 704:	8c 2f       	mov	r24, r28
 706:	0e 94 65 01 	call	0x2ca	; 0x2ca <I2C_Tx_any_segment>
 70a:	0b c0       	rjmp	.+22     	; 0x722 <main+0x1b6>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
 70c:	99 e0       	ldi	r25, 0x09	; 9
 70e:	88 e1       	ldi	r24, 0x18	; 24
 710:	0f b6       	in	r0, 0x3f	; 63
 712:	f8 94       	cli
 714:	a8 95       	wdr
 716:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 71a:	0f be       	out	0x3f, r0	; 63
 71c:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
 720:	ff cf       	rjmp	.-2      	; 0x720 <main+0x1b4>

				case 'x': break;														//if x clear the display

				default: {SW_reset;} break;												//if any other key (AOK) execute a SW_reset.
			}																		//Bottom of switch block return to top of "do-loop"
		}while(keypress != 'x');												//Bottom of "do-loop" with exit condition
 722:	c8 37       	cpi	r28, 0x78	; 120
 724:	c1 f6       	brne	.-80     	; 0x6d6 <main+0x16a>

		I2C_Tx_any_segment_clear_all();
 726:	0e 94 78 01 	call	0x2f0	; 0x2f0 <I2C_Tx_any_segment_clear_all>
 72a:	99 e0       	ldi	r25, 0x09	; 9
 72c:	88 e1       	ldi	r24, 0x18	; 24
 72e:	0f b6       	in	r0, 0x3f	; 63
 730:	f8 94       	cli
 732:	a8 95       	wdr
 734:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 738:	0f be       	out	0x3f, r0	; 63
 73a:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__DATA_REGION_ORIGIN__>
 73e:	ff cf       	rjmp	.-2      	; 0x73e <main+0x1d2>

00000740 <eeprom_read_byte>:
 740:	f9 99       	sbic	0x1f, 1	; 31
 742:	fe cf       	rjmp	.-4      	; 0x740 <eeprom_read_byte>
 744:	92 bd       	out	0x22, r25	; 34
 746:	81 bd       	out	0x21, r24	; 33
 748:	f8 9a       	sbi	0x1f, 0	; 31
 74a:	99 27       	eor	r25, r25
 74c:	80 b5       	in	r24, 0x20	; 32
 74e:	08 95       	ret

00000750 <eeprom_write_byte>:
 750:	26 2f       	mov	r18, r22

00000752 <eeprom_write_r18>:
 752:	f9 99       	sbic	0x1f, 1	; 31
 754:	fe cf       	rjmp	.-4      	; 0x752 <eeprom_write_r18>
 756:	1f ba       	out	0x1f, r1	; 31
 758:	92 bd       	out	0x22, r25	; 34
 75a:	81 bd       	out	0x21, r24	; 33
 75c:	20 bd       	out	0x20, r18	; 32
 75e:	0f b6       	in	r0, 0x3f	; 63
 760:	f8 94       	cli
 762:	fa 9a       	sbi	0x1f, 2	; 31
 764:	f9 9a       	sbi	0x1f, 1	; 31
 766:	0f be       	out	0x3f, r0	; 63
 768:	01 96       	adiw	r24, 0x01	; 1
 76a:	08 95       	ret

0000076c <_exit>:
 76c:	f8 94       	cli

0000076e <__stop_program>:
 76e:	ff cf       	rjmp	.-2      	; 0x76e <__stop_program>
