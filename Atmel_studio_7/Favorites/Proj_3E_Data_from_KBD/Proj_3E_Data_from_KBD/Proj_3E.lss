
Proj_3E.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000098  00800100  00002154  000021e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002154  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800198  00800198  00002280  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002280  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000022b0  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000028  00000000  00000000  000022ec  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000028ff  00000000  00000000  00002314  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008e2  00000000  00000000  00004c13  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000198f  00000000  00000000  000054f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000ac4  00000000  00000000  00006e84  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000009fc  00000000  00000000  00007948  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000361d  00000000  00000000  00008344  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000078  00000000  00000000  0000b961  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 6f 00 	jmp	0xde	; 0xde <__ctors_end>
       4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
       8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
       c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      10:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      14:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      18:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      1c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      20:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      24:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      28:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      2c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      30:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      34:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      38:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      3c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      40:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      44:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      48:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      4c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      50:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      54:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      58:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      5c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      60:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      64:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      68:	13 04       	cpc	r1, r3
      6a:	21 04       	cpc	r2, r1
      6c:	2f 04       	cpc	r2, r15
      6e:	3d 04       	cpc	r3, r13
      70:	4b 04       	cpc	r4, r11
      72:	59 04       	cpc	r5, r9
      74:	67 04       	cpc	r6, r7
      76:	75 04       	cpc	r7, r5
      78:	83 04       	cpc	r8, r3
      7a:	91 04       	cpc	r9, r1
      7c:	9e 04       	cpc	r9, r14
      7e:	ab 04       	cpc	r10, r11
      80:	b5 04       	cpc	r11, r5
      82:	bf 04       	cpc	r11, r15
      84:	c9 04       	cpc	r12, r9
      86:	20 05       	cpc	r18, r0
      88:	29 05       	cpc	r18, r9
      8a:	32 05       	cpc	r19, r2
      8c:	3b 05       	cpc	r19, r11
      8e:	44 05       	cpc	r20, r4
      90:	4e 05       	cpc	r20, r14
      92:	57 05       	cpc	r21, r7
      94:	5f 05       	cpc	r21, r15
      96:	66 05       	cpc	r22, r6
      98:	6d 05       	cpc	r22, r13
      9a:	74 05       	cpc	r23, r4
      9c:	7b 05       	cpc	r23, r11
      9e:	83 05       	cpc	r24, r3
      a0:	8b 05       	cpc	r24, r11
      a2:	51 07       	cpc	r21, r17
      a4:	5e 07       	cpc	r21, r30
      a6:	6c 07       	cpc	r22, r28
      a8:	7a 07       	cpc	r23, r26
      aa:	88 07       	cpc	r24, r24
      ac:	96 07       	cpc	r25, r22
      ae:	a4 07       	cpc	r26, r20
      b0:	b2 07       	cpc	r27, r18
      b2:	c0 07       	cpc	r28, r16
      b4:	ce 07       	cpc	r28, r30
      b6:	db 07       	cpc	r29, r27
      b8:	e8 07       	cpc	r30, r24
      ba:	f2 07       	cpc	r31, r18
      bc:	fc 07       	cpc	r31, r28
      be:	06 08       	sbc	r0, r6
      c0:	62 08       	sbc	r6, r2
      c2:	6b 08       	sbc	r6, r11
      c4:	74 08       	sbc	r7, r4
      c6:	7d 08       	sbc	r7, r13
      c8:	86 08       	sbc	r8, r6
      ca:	90 08       	sbc	r9, r0
      cc:	99 08       	sbc	r9, r9
      ce:	a2 08       	sbc	r10, r2
      d0:	aa 08       	sbc	r10, r10
      d2:	b1 08       	sbc	r11, r1
      d4:	b8 08       	sbc	r11, r8
      d6:	bf 08       	sbc	r11, r15
      d8:	c7 08       	sbc	r12, r7
      da:	cf 08       	sbc	r12, r15
      dc:	d7 08       	sbc	r13, r7

000000de <__ctors_end>:
      de:	11 24       	eor	r1, r1
      e0:	1f be       	out	0x3f, r1	; 63
      e2:	cf ef       	ldi	r28, 0xFF	; 255
      e4:	d4 e0       	ldi	r29, 0x04	; 4
      e6:	de bf       	out	0x3e, r29	; 62
      e8:	cd bf       	out	0x3d, r28	; 61

000000ea <__do_copy_data>:
      ea:	11 e0       	ldi	r17, 0x01	; 1
      ec:	a0 e0       	ldi	r26, 0x00	; 0
      ee:	b1 e0       	ldi	r27, 0x01	; 1
      f0:	e4 e5       	ldi	r30, 0x54	; 84
      f2:	f1 e2       	ldi	r31, 0x21	; 33
      f4:	02 c0       	rjmp	.+4      	; 0xfa <__do_copy_data+0x10>
      f6:	05 90       	lpm	r0, Z+
      f8:	0d 92       	st	X+, r0
      fa:	a8 39       	cpi	r26, 0x98	; 152
      fc:	b1 07       	cpc	r27, r17
      fe:	d9 f7       	brne	.-10     	; 0xf6 <__do_copy_data+0xc>

00000100 <__do_clear_bss>:
     100:	21 e0       	ldi	r18, 0x01	; 1
     102:	a8 e9       	ldi	r26, 0x98	; 152
     104:	b1 e0       	ldi	r27, 0x01	; 1
     106:	01 c0       	rjmp	.+2      	; 0x10a <.do_clear_bss_start>

00000108 <.do_clear_bss_loop>:
     108:	1d 92       	st	X+, r1

0000010a <.do_clear_bss_start>:
     10a:	a0 3a       	cpi	r26, 0xA0	; 160
     10c:	b2 07       	cpc	r27, r18
     10e:	e1 f7       	brne	.-8      	; 0x108 <.do_clear_bss_loop>
     110:	0e 94 11 0f 	call	0x1e22	; 0x1e22 <main>
     114:	0c 94 a8 10 	jmp	0x2150	; 0x2150 <_exit>

00000118 <__bad_interrupt>:
     118:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011c <USART_init>:
void sendString(char*);

/*********************************************************************/
void USART_init (unsigned char UBRROH_N, unsigned char UBRR0L_N ){
//Timer_T1_sub(T1_delay_10ms);
UCSR0B = 0;
     11c:	e1 ec       	ldi	r30, 0xC1	; 193
     11e:	f0 e0       	ldi	r31, 0x00	; 0
     120:	10 82       	st	Z, r1
UBRR0H = UBRROH_N;  									
     122:	80 93 c5 00 	sts	0x00C5, r24	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7fc0c5>
UBRR0L = UBRR0L_N;  								
     126:	60 93 c4 00 	sts	0x00C4, r22	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7fc0c4>
UCSR0A = (1 << U2X0);
     12a:	82 e0       	ldi	r24, 0x02	; 2
     12c:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fc0c0>
UCSR0B = (1 << RXEN0) | (1<< TXEN0);
     130:	88 e1       	ldi	r24, 0x18	; 24
     132:	80 83       	st	Z, r24
UCSR0C =  (1 << UCSZ00)| (1 << UCSZ01);}
     134:	86 e0       	ldi	r24, 0x06	; 6
     136:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7fc0c2>
     13a:	08 95       	ret

0000013c <nop_delay>:

/*********************************************************************/
void nop_delay(int nop_counter){for(int q = 0; q<= nop_counter; q++) {asm("nop");}}
     13c:	20 e0       	ldi	r18, 0x00	; 0
     13e:	30 e0       	ldi	r19, 0x00	; 0
     140:	82 17       	cp	r24, r18
     142:	93 07       	cpc	r25, r19
     144:	24 f0       	brlt	.+8      	; 0x14e <nop_delay+0x12>
     146:	00 00       	nop
     148:	2f 5f       	subi	r18, 0xFF	; 255
     14a:	3f 4f       	sbci	r19, 0xFF	; 255
     14c:	f9 cf       	rjmp	.-14     	; 0x140 <nop_delay+0x4>
     14e:	08 95       	ret

00000150 <Timer_T0_sub>:
void Timer_T0_10mS_delay_x_m(int m)
{for (int n = 0; n < m; n++){Timer_T0_sub(T0_delay_10ms);}}

/*********************************************************************/
void Timer_T0_sub(char Counter_speed, unsigned char Start_point){ 
TCNT0 = Start_point;
     150:	66 bd       	out	0x26, r22	; 38
TCCR0B = Counter_speed;
     152:	85 bd       	out	0x25, r24	; 37
while(!(TIFR0 & (1<<TOV0)));
     154:	a8 9b       	sbis	0x15, 0	; 21
     156:	fe cf       	rjmp	.-4      	; 0x154 <Timer_T0_sub+0x4>
TIFR0 |= (1<<TOV0); TCCR0B = 0;}
     158:	a8 9a       	sbi	0x15, 0	; 21
     15a:	15 bc       	out	0x25, r1	; 37
     15c:	08 95       	ret

0000015e <Timer_T0_10mS_delay_x_m>:
/*********************************************************************/
void nop_delay(int nop_counter){for(int q = 0; q<= nop_counter; q++) {asm("nop");}}

/*********************************************************************/
void Timer_T0_10mS_delay_x_m(int m)
{for (int n = 0; n < m; n++){Timer_T0_sub(T0_delay_10ms);}}
     15e:	0f 93       	push	r16
     160:	1f 93       	push	r17
     162:	cf 93       	push	r28
     164:	df 93       	push	r29
     166:	8c 01       	movw	r16, r24
     168:	c0 e0       	ldi	r28, 0x00	; 0
     16a:	d0 e0       	ldi	r29, 0x00	; 0
     16c:	c0 17       	cp	r28, r16
     16e:	d1 07       	cpc	r29, r17
     170:	34 f4       	brge	.+12     	; 0x17e <Timer_T0_10mS_delay_x_m+0x20>
     172:	62 eb       	ldi	r22, 0xB2	; 178
     174:	85 e0       	ldi	r24, 0x05	; 5
     176:	0e 94 a8 00 	call	0x150	; 0x150 <Timer_T0_sub>
     17a:	21 96       	adiw	r28, 0x01	; 1
     17c:	f7 cf       	rjmp	.-18     	; 0x16c <Timer_T0_10mS_delay_x_m+0xe>
     17e:	df 91       	pop	r29
     180:	cf 91       	pop	r28
     182:	1f 91       	pop	r17
     184:	0f 91       	pop	r16
     186:	08 95       	ret

00000188 <Timer_T0_sub_with_interrupt>:
TIFR0 |= (1<<TOV0); TCCR0B = 0;}


/*********************************************************************/
void Timer_T0_sub_with_interrupt(char Counter_speed, unsigned char Start_point){ 
TIMSK0 |= (1 << TOIE0);
     188:	ee e6       	ldi	r30, 0x6E	; 110
     18a:	f0 e0       	ldi	r31, 0x00	; 0
     18c:	90 81       	ld	r25, Z
     18e:	91 60       	ori	r25, 0x01	; 1
     190:	90 83       	st	Z, r25
TCNT0 = Start_point;
     192:	66 bd       	out	0x26, r22	; 38
TCCR0B = Counter_speed;}
     194:	85 bd       	out	0x25, r24	; 37
     196:	08 95       	ret

00000198 <T1_65ms_clock_tick>:


/*********************************************************************/
void T1_65ms_clock_tick(void){ 
TIMSK1 |= (1 << TOIE1);TCCR1B = 0x02;}
     198:	ef e6       	ldi	r30, 0x6F	; 111
     19a:	f0 e0       	ldi	r31, 0x00	; 0
     19c:	80 81       	ld	r24, Z
     19e:	81 60       	ori	r24, 0x01	; 1
     1a0:	80 83       	st	Z, r24
     1a2:	82 e0       	ldi	r24, 0x02	; 2
     1a4:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     1a8:	08 95       	ret

000001aa <Timer_T1_sub>:

/*********************************************************************/
void Timer_T1_sub(char Counter_speed, unsigned int Start_point){ 
TCNT1H = (Start_point >> 8);
     1aa:	70 93 85 00 	sts	0x0085, r23	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
TCNT1L = Start_point & 0x00FF;
     1ae:	60 93 84 00 	sts	0x0084, r22	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
TIFR1 = 0xFF;
     1b2:	9f ef       	ldi	r25, 0xFF	; 255
     1b4:	96 bb       	out	0x16, r25	; 22
TCCR1B = Counter_speed;
     1b6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
while(!(TIFR1 & (1<<TOV1)));
     1ba:	b0 9b       	sbis	0x16, 0	; 22
     1bc:	fe cf       	rjmp	.-4      	; 0x1ba <Timer_T1_sub+0x10>
TIFR1 |= (1<<TOV1); 
     1be:	b0 9a       	sbi	0x16, 0	; 22
TCCR1B = 0;}
     1c0:	10 92 81 00 	sts	0x0081, r1	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     1c4:	08 95       	ret

000001c6 <Timer_T1_sub_with_interrupt>:

/*********************************************************************/
void Timer_T1_sub_with_interrupt(char Counter_speed, unsigned int Start_point){ 
TIMSK1 |= (1 << TOIE1);
     1c6:	ef e6       	ldi	r30, 0x6F	; 111
     1c8:	f0 e0       	ldi	r31, 0x00	; 0
     1ca:	90 81       	ld	r25, Z
     1cc:	91 60       	ori	r25, 0x01	; 1
     1ce:	90 83       	st	Z, r25
TCNT1H = (Start_point >> 8);
     1d0:	70 93 85 00 	sts	0x0085, r23	; 0x800085 <__TEXT_REGION_LENGTH__+0x7fc085>
TCNT1L = Start_point & 0x00FF;
     1d4:	60 93 84 00 	sts	0x0084, r22	; 0x800084 <__TEXT_REGION_LENGTH__+0x7fc084>
TCCR1B = Counter_speed;}
     1d8:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7fc081>
     1dc:	08 95       	ret

000001de <Timer_T2_sub>:


/*********************************************************************/
void Timer_T2_sub(char Counter_speed, char Start_point){ 
TCNT2 = (Start_point );
     1de:	60 93 b2 00 	sts	0x00B2, r22	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7fc0b2>

TCCR2B = Counter_speed;
     1e2:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7fc0b1>
while(!(TIFR2 & (1<<TOV2)));
     1e6:	b8 9b       	sbis	0x17, 0	; 23
     1e8:	fe cf       	rjmp	.-4      	; 0x1e6 <Timer_T2_sub+0x8>
TIFR2 |= (1<<TOV2); 
     1ea:	b8 9a       	sbi	0x17, 0	; 23
TCCR2B = 0;}
     1ec:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7fc0b1>
     1f0:	08 95       	ret

000001f2 <waitforchar>:



/*********************************************************************/
void waitforchar(void){
while (!(UCSR0A & (1 << RXC0)));}
     1f2:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fc0c0>
     1f6:	87 ff       	sbrs	r24, 7
     1f8:	fc cf       	rjmp	.-8      	; 0x1f2 <waitforchar>
     1fa:	08 95       	ret

000001fc <waitforkeypress>:


/*********************************************************************/
char waitforkeypress(void){
while (!(UCSR0A & (1 << RXC0)));
     1fc:	80 91 c0 00 	lds	r24, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fc0c0>
     200:	87 ff       	sbrs	r24, 7
     202:	fc cf       	rjmp	.-8      	; 0x1fc <waitforkeypress>
return UDR0;}
     204:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
     208:	08 95       	ret

0000020a <receiveChar>:


/*********************************************************************/
char receiveChar(void)
{return UDR0;}
     20a:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
     20e:	08 95       	ret

00000210 <isCharavailable>:


/*********************************************************************/
char isCharavailable (char m){int n = 0;
     210:	20 e0       	ldi	r18, 0x00	; 0
     212:	30 e0       	ldi	r19, 0x00	; 0
while (!(UCSR0A & (1 << RXC0))){n++;
     214:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fc0c0>
     218:	97 fd       	sbrc	r25, 7
     21a:	0d c0       	rjmp	.+26     	; 0x236 <isCharavailable+0x26>
     21c:	2f 5f       	subi	r18, 0xFF	; 255
     21e:	3f 4f       	sbci	r19, 0xFF	; 255
if (n>8000) {m--;n = 0;}if (m == 0)return 0;}
     220:	21 34       	cpi	r18, 0x41	; 65
     222:	9f e1       	ldi	r25, 0x1F	; 31
     224:	39 07       	cpc	r19, r25
     226:	1c f0       	brlt	.+6      	; 0x22e <isCharavailable+0x1e>
     228:	81 50       	subi	r24, 0x01	; 1
     22a:	20 e0       	ldi	r18, 0x00	; 0
     22c:	30 e0       	ldi	r19, 0x00	; 0
     22e:	81 11       	cpse	r24, r1
     230:	f1 cf       	rjmp	.-30     	; 0x214 <isCharavailable+0x4>
     232:	80 e0       	ldi	r24, 0x00	; 0
return 1;}
     234:	08 95       	ret
     236:	81 e0       	ldi	r24, 0x01	; 1
     238:	08 95       	ret

0000023a <wait_for_return_key>:

/*********************************************************************/

char wait_for_return_key(void){	
char keypress;
keypress = waitforkeypress();
     23a:	0e 94 fe 00 	call	0x1fc	; 0x1fc <waitforkeypress>
if((keypress == '\r') || (keypress == '\n')){
     23e:	8d 30       	cpi	r24, 0x0D	; 13
     240:	11 f0       	breq	.+4      	; 0x246 <wait_for_return_key+0xc>
     242:	8a 30       	cpi	r24, 0x0A	; 10
     244:	39 f4       	brne	.+14     	; 0x254 <wait_for_return_key+0x1a>
if (isCharavailable(1)){receiveChar();}keypress = '\r';}
     246:	81 e0       	ldi	r24, 0x01	; 1
     248:	0e 94 08 01 	call	0x210	; 0x210 <isCharavailable>
     24c:	81 11       	cpse	r24, r1
return UDR0;}


/*********************************************************************/
char receiveChar(void)
{return UDR0;}
     24e:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>

char wait_for_return_key(void){	
char keypress;
keypress = waitforkeypress();
if((keypress == '\r') || (keypress == '\n')){
if (isCharavailable(1)){receiveChar();}keypress = '\r';}
     252:	8d e0       	ldi	r24, 0x0D	; 13
return keypress;}
     254:	08 95       	ret

00000256 <binUnwantedChars>:
while(1){if (isCharavailable(5)==1){receiveChar();Char_to_PC('.');}else break;}newline();}


/*********************************************************************/
void binUnwantedChars (void){
while(1){if (isCharavailable(5)==1)receiveChar();else break;}}
     256:	85 e0       	ldi	r24, 0x05	; 5
     258:	0e 94 08 01 	call	0x210	; 0x210 <isCharavailable>
     25c:	81 30       	cpi	r24, 0x01	; 1
     25e:	19 f4       	brne	.+6      	; 0x266 <binUnwantedChars+0x10>
return UDR0;}


/*********************************************************************/
char receiveChar(void)
{return UDR0;}
     260:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
     264:	f8 cf       	rjmp	.-16     	; 0x256 <binUnwantedChars>
     266:	08 95       	ret

00000268 <Char_to_PC>:
while(1){if (isCharavailable(5)==1)receiveChar();else break;}}


/*********************************************************************/
void Char_to_PC(char data){
while (!(UCSR0A & (1 << UDRE0)));
     268:	90 91 c0 00 	lds	r25, 0x00C0	; 0x8000c0 <__TEXT_REGION_LENGTH__+0x7fc0c0>
     26c:	95 ff       	sbrs	r25, 5
     26e:	fc cf       	rjmp	.-8      	; 0x268 <Char_to_PC>
UDR0 = data;}
     270:	80 93 c6 00 	sts	0x00C6, r24	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
     274:	08 95       	ret

00000276 <String_to_PC>:

/*********************************************************************/
void String_to_PC(char s[]){
     276:	0f 93       	push	r16
     278:	1f 93       	push	r17
     27a:	cf 93       	push	r28
     27c:	df 93       	push	r29
     27e:	ec 01       	movw	r28, r24
     280:	8c 01       	movw	r16, r24
     282:	08 53       	subi	r16, 0x38	; 56
     284:	1f 4f       	sbci	r17, 0xFF	; 255
int i = 0;
while(i < 200){
if(s[i] == '\0') break;
     286:	89 91       	ld	r24, Y+
     288:	88 23       	and	r24, r24
     28a:	29 f0       	breq	.+10     	; 0x296 <String_to_PC+0x20>
Char_to_PC(s[i++]);} }
     28c:	0e 94 34 01 	call	0x268	; 0x268 <Char_to_PC>
UDR0 = data;}

/*********************************************************************/
void String_to_PC(char s[]){
int i = 0;
while(i < 200){
     290:	c0 17       	cp	r28, r16
     292:	d1 07       	cpc	r29, r17
     294:	c1 f7       	brne	.-16     	; 0x286 <String_to_PC+0x10>
if(s[i] == '\0') break;
Char_to_PC(s[i++]);} }
     296:	df 91       	pop	r29
     298:	cf 91       	pop	r28
     29a:	1f 91       	pop	r17
     29c:	0f 91       	pop	r16
     29e:	08 95       	ret

000002a0 <newline>:

/*********************************************************************/
void newline(void){String_to_PC ("\r\n");}
     2a0:	8d e6       	ldi	r24, 0x6D	; 109
     2a2:	91 e0       	ldi	r25, 0x01	; 1
     2a4:	0c 94 3b 01 	jmp	0x276	; 0x276 <String_to_PC>

000002a8 <binUnwantedChars_dot>:



/*********************************************************************/
void binUnwantedChars_dot (void){
while(1){if (isCharavailable(5)==1){receiveChar();Char_to_PC('.');}else break;}newline();}
     2a8:	85 e0       	ldi	r24, 0x05	; 5
     2aa:	0e 94 08 01 	call	0x210	; 0x210 <isCharavailable>
     2ae:	81 30       	cpi	r24, 0x01	; 1
     2b0:	31 f4       	brne	.+12     	; 0x2be <binUnwantedChars_dot+0x16>
return UDR0;}


/*********************************************************************/
char receiveChar(void)
{return UDR0;}
     2b2:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>



/*********************************************************************/
void binUnwantedChars_dot (void){
while(1){if (isCharavailable(5)==1){receiveChar();Char_to_PC('.');}else break;}newline();}
     2b6:	8e e2       	ldi	r24, 0x2E	; 46
     2b8:	0e 94 34 01 	call	0x268	; 0x268 <Char_to_PC>
     2bc:	f5 cf       	rjmp	.-22     	; 0x2a8 <binUnwantedChars_dot>
     2be:	0c 94 50 01 	jmp	0x2a0	; 0x2a0 <newline>

000002c2 <SBtoAL>:
char array[12];							//Long has 10 chars + sign + null terminator	
SBtoAL(array, long_num, radix);			//calls the Binary to askii subroutine
NumericString_to_PC(array);}				//Prints characters in reverse order

/*********************************************************************/
void SBtoAL(char array[], long num, char radix){					//Signed Binary to Askii
     2c2:	2f 92       	push	r2
     2c4:	3f 92       	push	r3
     2c6:	4f 92       	push	r4
     2c8:	5f 92       	push	r5
     2ca:	6f 92       	push	r6
     2cc:	7f 92       	push	r7
     2ce:	8f 92       	push	r8
     2d0:	9f 92       	push	r9
     2d2:	af 92       	push	r10
     2d4:	bf 92       	push	r11
     2d6:	cf 92       	push	r12
     2d8:	df 92       	push	r13
     2da:	ef 92       	push	r14
     2dc:	ff 92       	push	r15
     2de:	0f 93       	push	r16
     2e0:	1f 93       	push	r17
     2e2:	cf 93       	push	r28
     2e4:	df 93       	push	r29
     2e6:	ec 01       	movw	r28, r24
     2e8:	2a 01       	movw	r4, r20
     2ea:	3b 01       	movw	r6, r22
int m=0;
long sign;

if (num == 0x80000000){
     2ec:	41 15       	cp	r20, r1
     2ee:	51 05       	cpc	r21, r1
     2f0:	61 05       	cpc	r22, r1
     2f2:	70 48       	sbci	r23, 0x80	; 128
     2f4:	49 f5       	brne	.+82     	; 0x348 <SBtoAL+0x86>
switch(radix){
     2f6:	2a 30       	cpi	r18, 0x0A	; 10
     2f8:	91 f0       	breq	.+36     	; 0x31e <SBtoAL+0x5c>
     2fa:	20 31       	cpi	r18, 0x10	; 16
     2fc:	09 f0       	breq	.+2      	; 0x300 <SBtoAL+0x3e>
     2fe:	63 c0       	rjmp	.+198    	; 0x3c6 <SBtoAL+0x104>
case 10: array[0] = '8';array[1] = '4'; array[2] = '6';		//0x80000000 * -1 = 0
array[3] = '3';array[4] = '8';array[5] = '4'; array[6] = '7';
array[7] = '4';array[8] = '1';array[9] = '2';
array[10] = '-'; array[11] = '\0'; break;

case 16: array[0] = '0';array[1] = '0'; array[2] = '0';		//0x80000000 * -1 = 0
     300:	80 e3       	ldi	r24, 0x30	; 48
     302:	88 83       	st	Y, r24
     304:	89 83       	std	Y+1, r24	; 0x01
     306:	8a 83       	std	Y+2, r24	; 0x02
array[3] = '0';array[4] = '0';array[5] = '0'; array[6] = '0';
     308:	8b 83       	std	Y+3, r24	; 0x03
     30a:	8c 83       	std	Y+4, r24	; 0x04
     30c:	8d 83       	std	Y+5, r24	; 0x05
     30e:	8e 83       	std	Y+6, r24	; 0x06
array[7] = '8';array[8] = '-';array[9] = '\0';
     310:	88 e3       	ldi	r24, 0x38	; 56
     312:	8f 83       	std	Y+7, r24	; 0x07
     314:	8d e2       	ldi	r24, 0x2D	; 45
     316:	88 87       	std	Y+8, r24	; 0x08
     318:	19 86       	std	Y+9, r1	; 0x09
array[10] = '\0'; array[11] = '\0'; break; } return;}
     31a:	1a 86       	std	Y+10, r1	; 0x0a
     31c:	13 c0       	rjmp	.+38     	; 0x344 <SBtoAL+0x82>
int m=0;
long sign;

if (num == 0x80000000){
switch(radix){
case 10: array[0] = '8';array[1] = '4'; array[2] = '6';		//0x80000000 * -1 = 0
     31e:	98 e3       	ldi	r25, 0x38	; 56
     320:	98 83       	st	Y, r25
     322:	84 e3       	ldi	r24, 0x34	; 52
     324:	89 83       	std	Y+1, r24	; 0x01
     326:	26 e3       	ldi	r18, 0x36	; 54
     328:	2a 83       	std	Y+2, r18	; 0x02
array[3] = '3';array[4] = '8';array[5] = '4'; array[6] = '7';
     32a:	23 e3       	ldi	r18, 0x33	; 51
     32c:	2b 83       	std	Y+3, r18	; 0x03
     32e:	9c 83       	std	Y+4, r25	; 0x04
     330:	8d 83       	std	Y+5, r24	; 0x05
     332:	97 e3       	ldi	r25, 0x37	; 55
     334:	9e 83       	std	Y+6, r25	; 0x06
array[7] = '4';array[8] = '1';array[9] = '2';
     336:	8f 83       	std	Y+7, r24	; 0x07
     338:	81 e3       	ldi	r24, 0x31	; 49
     33a:	88 87       	std	Y+8, r24	; 0x08
     33c:	82 e3       	ldi	r24, 0x32	; 50
     33e:	89 87       	std	Y+9, r24	; 0x09
array[10] = '-'; array[11] = '\0'; break;
     340:	8d e2       	ldi	r24, 0x2D	; 45
     342:	8a 87       	std	Y+10, r24	; 0x0a

case 16: array[0] = '0';array[1] = '0'; array[2] = '0';		//0x80000000 * -1 = 0
array[3] = '0';array[4] = '0';array[5] = '0'; array[6] = '0';
array[7] = '8';array[8] = '-';array[9] = '\0';
array[10] = '\0'; array[11] = '\0'; break; } return;}
     344:	1b 86       	std	Y+11, r1	; 0x0b
     346:	3f c0       	rjmp	.+126    	; 0x3c6 <SBtoAL+0x104>
     348:	8e 01       	movw	r16, r28
     34a:	ce 01       	movw	r24, r28
     34c:	0c 96       	adiw	r24, 0x0c	; 12
/*********************************************************************/
void SBtoAL(char array[], long num, char radix){					//Signed Binary to Askii
int m=0;
long sign;

if (num == 0x80000000){
     34e:	fe 01       	movw	r30, r28
case 16: array[0] = '0';array[1] = '0'; array[2] = '0';		//0x80000000 * -1 = 0
array[3] = '0';array[4] = '0';array[5] = '0'; array[6] = '0';
array[7] = '8';array[8] = '-';array[9] = '\0';
array[10] = '\0'; array[11] = '\0'; break; } return;}

for (int n = 0; n <=11; n++)array[n] = 0;	
     350:	11 92       	st	Z+, r1
     352:	e8 17       	cp	r30, r24
     354:	f9 07       	cpc	r31, r25
     356:	e1 f7       	brne	.-8      	; 0x350 <SBtoAL+0x8e>
     358:	73 01       	movw	r14, r6
     35a:	62 01       	movw	r12, r4
     35c:	77 fe       	sbrs	r7, 7
     35e:	07 c0       	rjmp	.+14     	; 0x36e <SBtoAL+0xac>
     360:	cc 24       	eor	r12, r12
     362:	dd 24       	eor	r13, r13
     364:	76 01       	movw	r14, r12
     366:	c4 18       	sub	r12, r4
     368:	d5 08       	sbc	r13, r5
     36a:	e6 08       	sbc	r14, r6
     36c:	f7 08       	sbc	r15, r7
     36e:	21 2c       	mov	r2, r1
     370:	31 2c       	mov	r3, r1
if ((sign = num) < 0) num = num * (-1);

do {array[m] = num % radix;
     372:	82 2e       	mov	r8, r18
     374:	91 2c       	mov	r9, r1
     376:	a1 2c       	mov	r10, r1
     378:	b1 2c       	mov	r11, r1
     37a:	c7 01       	movw	r24, r14
     37c:	b6 01       	movw	r22, r12
     37e:	a5 01       	movw	r20, r10
     380:	94 01       	movw	r18, r8
     382:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__divmodsi4>
     386:	f8 01       	movw	r30, r16
     388:	60 83       	st	Z, r22
if(array[m] < 10)array[m] += '0'; else array[m] += '7';
     38a:	6a 30       	cpi	r22, 0x0A	; 10
     38c:	10 f4       	brcc	.+4      	; 0x392 <SBtoAL+0xd0>
     38e:	60 5d       	subi	r22, 0xD0	; 208
     390:	02 c0       	rjmp	.+4      	; 0x396 <SBtoAL+0xd4>
     392:	69 5c       	subi	r22, 0xC9	; 201
     394:	f8 01       	movw	r30, r16
     396:	60 83       	st	Z, r22
m++;} while ((num = num/radix) > 0);
     398:	ff ef       	ldi	r31, 0xFF	; 255
     39a:	2f 1a       	sub	r2, r31
     39c:	3f 0a       	sbc	r3, r31
     39e:	c7 01       	movw	r24, r14
     3a0:	b6 01       	movw	r22, r12
     3a2:	a5 01       	movw	r20, r10
     3a4:	94 01       	movw	r18, r8
     3a6:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__divmodsi4>
     3aa:	69 01       	movw	r12, r18
     3ac:	7a 01       	movw	r14, r20
     3ae:	0f 5f       	subi	r16, 0xFF	; 255
     3b0:	1f 4f       	sbci	r17, 0xFF	; 255
     3b2:	23 2b       	or	r18, r19
     3b4:	24 2b       	or	r18, r20
     3b6:	25 2b       	or	r18, r21
     3b8:	01 f7       	brne	.-64     	; 0x37a <SBtoAL+0xb8>
if (sign < 0) {array[m] = '-';m++;}}
     3ba:	77 fe       	sbrs	r7, 7
     3bc:	04 c0       	rjmp	.+8      	; 0x3c6 <SBtoAL+0x104>
     3be:	c2 0d       	add	r28, r2
     3c0:	d3 1d       	adc	r29, r3
     3c2:	8d e2       	ldi	r24, 0x2D	; 45
     3c4:	88 83       	st	Y, r24
     3c6:	df 91       	pop	r29
     3c8:	cf 91       	pop	r28
     3ca:	1f 91       	pop	r17
     3cc:	0f 91       	pop	r16
     3ce:	ff 90       	pop	r15
     3d0:	ef 90       	pop	r14
     3d2:	df 90       	pop	r13
     3d4:	cf 90       	pop	r12
     3d6:	bf 90       	pop	r11
     3d8:	af 90       	pop	r10
     3da:	9f 90       	pop	r9
     3dc:	8f 90       	pop	r8
     3de:	7f 90       	pop	r7
     3e0:	6f 90       	pop	r6
     3e2:	5f 90       	pop	r5
     3e4:	4f 90       	pop	r4
     3e6:	3f 90       	pop	r3
     3e8:	2f 90       	pop	r2
     3ea:	08 95       	ret

000003ec <NumericString_to_PC>:


/*********************************************************************/
void NumericString_to_PC(char* s){					
     3ec:	0f 93       	push	r16
     3ee:	1f 93       	push	r17
     3f0:	cf 93       	push	r28
     3f2:	df 93       	push	r29
     3f4:	8c 01       	movw	r16, r24
int n=0;
while (s[n] != '\0')n++;							//scroll to end of string counting the number of characters
     3f6:	fc 01       	movw	r30, r24
     3f8:	ef 01       	movw	r28, r30
     3fa:	c0 1b       	sub	r28, r16
     3fc:	d1 0b       	sbc	r29, r17
     3fe:	81 91       	ld	r24, Z+
     400:	81 11       	cpse	r24, r1
     402:	fa cf       	rjmp	.-12     	; 0x3f8 <NumericString_to_PC+0xc>
     404:	c0 0f       	add	r28, r16
     406:	d1 1f       	adc	r29, r17
for(int m = n; m; m--)Char_to_PC(*(s + m-1));}		//print last character first
     408:	0c 17       	cp	r16, r28
     40a:	1d 07       	cpc	r17, r29
     40c:	21 f0       	breq	.+8      	; 0x416 <__DATA_REGION_LENGTH__+0x16>
     40e:	8a 91       	ld	r24, -Y
     410:	0e 94 34 01 	call	0x268	; 0x268 <Char_to_PC>
     414:	f9 cf       	rjmp	.-14     	; 0x408 <__DATA_REGION_LENGTH__+0x8>
     416:	df 91       	pop	r29
     418:	cf 91       	pop	r28
     41a:	1f 91       	pop	r17
     41c:	0f 91       	pop	r16
     41e:	08 95       	ret

00000420 <Num_to_PC>:
/*********************************************************************/
void newline(void){String_to_PC ("\r\n");}


/*********************************************************************/
void Num_to_PC(char radix, long long_num){
     420:	cf 93       	push	r28
     422:	df 93       	push	r29
     424:	cd b7       	in	r28, 0x3d	; 61
     426:	de b7       	in	r29, 0x3e	; 62
     428:	2c 97       	sbiw	r28, 0x0c	; 12
     42a:	0f b6       	in	r0, 0x3f	; 63
     42c:	f8 94       	cli
     42e:	de bf       	out	0x3e, r29	; 62
     430:	0f be       	out	0x3f, r0	; 63
     432:	cd bf       	out	0x3d, r28	; 61
char array[12];							//Long has 10 chars + sign + null terminator	
SBtoAL(array, long_num, radix);			//calls the Binary to askii subroutine
     434:	28 2f       	mov	r18, r24
     436:	ce 01       	movw	r24, r28
     438:	01 96       	adiw	r24, 0x01	; 1
     43a:	0e 94 61 01 	call	0x2c2	; 0x2c2 <SBtoAL>
NumericString_to_PC(array);}				//Prints characters in reverse order
     43e:	ce 01       	movw	r24, r28
     440:	01 96       	adiw	r24, 0x01	; 1
     442:	0e 94 f6 01 	call	0x3ec	; 0x3ec <NumericString_to_PC>
     446:	2c 96       	adiw	r28, 0x0c	; 12
     448:	0f b6       	in	r0, 0x3f	; 63
     44a:	f8 94       	cli
     44c:	de bf       	out	0x3e, r29	; 62
     44e:	0f be       	out	0x3f, r0	; 63
     450:	cd bf       	out	0x3d, r28	; 61
     452:	df 91       	pop	r29
     454:	cf 91       	pop	r28
     456:	08 95       	ret

00000458 <decimal_digit>:
while (s[n] != '\0')n++;							//scroll to end of string counting the number of characters
for(int m = n; m; m--)Char_to_PC(*(s + m-1));}		//print last character first


/*********************************************************************/
char decimal_digit (char data){
     458:	90 ed       	ldi	r25, 0xD0	; 208
     45a:	98 0f       	add	r25, r24
     45c:	81 e0       	ldi	r24, 0x01	; 1
     45e:	9a 30       	cpi	r25, 0x0A	; 10
     460:	08 f0       	brcs	.+2      	; 0x464 <decimal_digit+0xc>
     462:	80 e0       	ldi	r24, 0x00	; 0
if (((data > '9') || (data < '0')) )return 0;
else return 1;}
     464:	08 95       	ret

00000466 <hex_digit>:


/*********************************************************************/
char hex_digit (char data){
switch(data){
     466:	80 33       	cpi	r24, 0x30	; 48
     468:	28 f0       	brcs	.+10     	; 0x474 <hex_digit+0xe>
     46a:	8a 33       	cpi	r24, 0x3A	; 58
     46c:	28 f0       	brcs	.+10     	; 0x478 <hex_digit+0x12>
     46e:	81 54       	subi	r24, 0x41	; 65
     470:	86 30       	cpi	r24, 0x06	; 6
     472:	10 f0       	brcs	.+4      	; 0x478 <hex_digit+0x12>
case '0': case '1': case '2': case '3': case '4': case '5': case '6':
case '7': case '8': case '9': case 'A': case 'B': case 'C': case 'D':
case 'E': case 'F': return 1; break;
default: return 0; break;}}
     474:	80 e0       	ldi	r24, 0x00	; 0
     476:	08 95       	ret
/*********************************************************************/
char hex_digit (char data){
switch(data){
case '0': case '1': case '2': case '3': case '4': case '5': case '6':
case '7': case '8': case '9': case 'A': case 'B': case 'C': case 'D':
case 'E': case 'F': return 1; break;
     478:	81 e0       	ldi	r24, 0x01	; 1
default: return 0; break;}}
     47a:	08 95       	ret

0000047c <Exp_to_PC>:


/*********************************************************************/
void Exp_to_PC (signed char expt){
     47c:	cf 93       	push	r28
     47e:	c8 2f       	mov	r28, r24
if (expt < 0) { String_to_PC (" E-");Num_to_PC(10,expt*(-1));}
     480:	87 ff       	sbrs	r24, 7
     482:	0f c0       	rjmp	.+30     	; 0x4a2 <Exp_to_PC+0x26>
     484:	80 e0       	ldi	r24, 0x00	; 0
     486:	91 e0       	ldi	r25, 0x01	; 1
     488:	0e 94 3b 01 	call	0x276	; 0x276 <String_to_PC>
     48c:	8c 2f       	mov	r24, r28
     48e:	99 27       	eor	r25, r25
     490:	81 95       	neg	r24
     492:	0c f4       	brge	.+2      	; 0x496 <Exp_to_PC+0x1a>
     494:	90 95       	com	r25
     496:	ac 01       	movw	r20, r24
     498:	05 2e       	mov	r0, r21
     49a:	00 0c       	add	r0, r0
     49c:	66 0b       	sbc	r22, r22
     49e:	77 0b       	sbc	r23, r23
     4a0:	09 c0       	rjmp	.+18     	; 0x4b4 <Exp_to_PC+0x38>
else {String_to_PC (" E+");Num_to_PC(10,expt);}}
     4a2:	84 e0       	ldi	r24, 0x04	; 4
     4a4:	91 e0       	ldi	r25, 0x01	; 1
     4a6:	0e 94 3b 01 	call	0x276	; 0x276 <String_to_PC>
     4aa:	4c 2f       	mov	r20, r28
     4ac:	cc 0f       	add	r28, r28
     4ae:	55 0b       	sbc	r21, r21
     4b0:	66 0b       	sbc	r22, r22
     4b2:	77 0b       	sbc	r23, r23
     4b4:	8a e0       	ldi	r24, 0x0A	; 10
     4b6:	cf 91       	pop	r28
     4b8:	0c 94 10 02 	jmp	0x420	; 0x420 <Num_to_PC>

000004bc <UBtoAL>:
UBtoAL(array, long_num, radix);			//calls the Binary to askii subroutine
NumericString_to_PC(array);}	


/*********************************************************************/
void UBtoAL(char array[], unsigned long num, char radix){					//Signed Binary to Askii
     4bc:	8f 92       	push	r8
     4be:	9f 92       	push	r9
     4c0:	af 92       	push	r10
     4c2:	bf 92       	push	r11
     4c4:	cf 92       	push	r12
     4c6:	df 92       	push	r13
     4c8:	ef 92       	push	r14
     4ca:	ff 92       	push	r15
     4cc:	cf 93       	push	r28
     4ce:	df 93       	push	r29
     4d0:	6a 01       	movw	r12, r20
     4d2:	7b 01       	movw	r14, r22
     4d4:	ec 01       	movw	r28, r24
     4d6:	0c 96       	adiw	r24, 0x0c	; 12
     4d8:	fe 01       	movw	r30, r28
int m=0;
for (int n = 0; n <=11; n++)array[n] = 0;	
     4da:	11 92       	st	Z+, r1
     4dc:	e8 17       	cp	r30, r24
     4de:	f9 07       	cpc	r31, r25
     4e0:	e1 f7       	brne	.-8      	; 0x4da <UBtoAL+0x1e>
do {array[m] = num % radix;
     4e2:	82 2e       	mov	r8, r18
     4e4:	91 2c       	mov	r9, r1
     4e6:	a1 2c       	mov	r10, r1
     4e8:	b1 2c       	mov	r11, r1
     4ea:	c7 01       	movw	r24, r14
     4ec:	b6 01       	movw	r22, r12
     4ee:	a5 01       	movw	r20, r10
     4f0:	94 01       	movw	r18, r8
     4f2:	0e 94 31 10 	call	0x2062	; 0x2062 <__udivmodsi4>
     4f6:	68 83       	st	Y, r22
if(array[m] < 10)array[m] += '0'; else array[m] += '7';
     4f8:	6a 30       	cpi	r22, 0x0A	; 10
     4fa:	10 f4       	brcc	.+4      	; 0x500 <__stack+0x1>
     4fc:	60 5d       	subi	r22, 0xD0	; 208
     4fe:	01 c0       	rjmp	.+2      	; 0x502 <__stack+0x3>
     500:	69 5c       	subi	r22, 0xC9	; 201
     502:	68 83       	st	Y, r22
m++;} while ((num = num/radix) > 0);}
     504:	c7 01       	movw	r24, r14
     506:	b6 01       	movw	r22, r12
     508:	a5 01       	movw	r20, r10
     50a:	94 01       	movw	r18, r8
     50c:	0e 94 31 10 	call	0x2062	; 0x2062 <__udivmodsi4>
     510:	69 01       	movw	r12, r18
     512:	7a 01       	movw	r14, r20
     514:	21 96       	adiw	r28, 0x01	; 1
     516:	23 2b       	or	r18, r19
     518:	24 2b       	or	r18, r20
     51a:	25 2b       	or	r18, r21
     51c:	31 f7       	brne	.-52     	; 0x4ea <UBtoAL+0x2e>
     51e:	df 91       	pop	r29
     520:	cf 91       	pop	r28
     522:	ff 90       	pop	r15
     524:	ef 90       	pop	r14
     526:	df 90       	pop	r13
     528:	cf 90       	pop	r12
     52a:	bf 90       	pop	r11
     52c:	af 90       	pop	r10
     52e:	9f 90       	pop	r9
     530:	8f 90       	pop	r8
     532:	08 95       	ret

00000534 <Num_to_PC_U>:
if (expt < 0) { String_to_PC (" E-");Num_to_PC(10,expt*(-1));}
else {String_to_PC (" E+");Num_to_PC(10,expt);}}


/*********************************************************************/
void Num_to_PC_U(char radix, unsigned long long_num){
     534:	cf 93       	push	r28
     536:	df 93       	push	r29
     538:	cd b7       	in	r28, 0x3d	; 61
     53a:	de b7       	in	r29, 0x3e	; 62
     53c:	2c 97       	sbiw	r28, 0x0c	; 12
     53e:	0f b6       	in	r0, 0x3f	; 63
     540:	f8 94       	cli
     542:	de bf       	out	0x3e, r29	; 62
     544:	0f be       	out	0x3f, r0	; 63
     546:	cd bf       	out	0x3d, r28	; 61
char array[12];							//Long has 10 chars + sign + null terminator	
UBtoAL(array, long_num, radix);			//calls the Binary to askii subroutine
     548:	28 2f       	mov	r18, r24
     54a:	ce 01       	movw	r24, r28
     54c:	01 96       	adiw	r24, 0x01	; 1
     54e:	0e 94 5e 02 	call	0x4bc	; 0x4bc <UBtoAL>
NumericString_to_PC(array);}	
     552:	ce 01       	movw	r24, r28
     554:	01 96       	adiw	r24, 0x01	; 1
     556:	0e 94 f6 01 	call	0x3ec	; 0x3ec <NumericString_to_PC>
     55a:	2c 96       	adiw	r28, 0x0c	; 12
     55c:	0f b6       	in	r0, 0x3f	; 63
     55e:	f8 94       	cli
     560:	de bf       	out	0x3e, r29	; 62
     562:	0f be       	out	0x3f, r0	; 63
     564:	cd bf       	out	0x3d, r28	; 61
     566:	df 91       	pop	r29
     568:	cf 91       	pop	r28
     56a:	08 95       	ret

0000056c <Fraction_to_Binary_Unsigned>:
Timer_T0_10mS_delay_x_m(6);}}



/******************************************************************************/
unsigned long Fraction_to_Binary_Unsigned(unsigned long rem,unsigned long Den){	
     56c:	2f 92       	push	r2
     56e:	3f 92       	push	r3
     570:	4f 92       	push	r4
     572:	5f 92       	push	r5
     574:	6f 92       	push	r6
     576:	7f 92       	push	r7
     578:	8f 92       	push	r8
     57a:	9f 92       	push	r9
     57c:	af 92       	push	r10
     57e:	bf 92       	push	r11
     580:	cf 92       	push	r12
     582:	df 92       	push	r13
     584:	ef 92       	push	r14
     586:	ff 92       	push	r15
     588:	0f 93       	push	r16
     58a:	1f 93       	push	r17
     58c:	cf 93       	push	r28
     58e:	df 93       	push	r29
     590:	29 01       	movw	r4, r18
     592:	3a 01       	movw	r6, r20
unsigned long Result = 0; 
unsigned int res_LB=0; 
char mode = 1;

if((rem >= 0x80000000) || (Den >= 0x80000000))
     594:	97 fd       	sbrc	r25, 7
     596:	02 c0       	rjmp	.+4      	; 0x59c <Fraction_to_Binary_Unsigned+0x30>
     598:	57 ff       	sbrs	r21, 7
     59a:	08 c0       	rjmp	.+16     	; 0x5ac <Fraction_to_Binary_Unsigned+0x40>
{rem /= 2; Den /= 2;}
     59c:	96 95       	lsr	r25
     59e:	87 95       	ror	r24
     5a0:	77 95       	ror	r23
     5a2:	67 95       	ror	r22
     5a4:	76 94       	lsr	r7
     5a6:	67 94       	ror	r6
     5a8:	57 94       	ror	r5
     5aa:	47 94       	ror	r4
Timer_T0_10mS_delay_x_m(6);}}



/******************************************************************************/
unsigned long Fraction_to_Binary_Unsigned(unsigned long rem,unsigned long Den){	
     5ac:	cf e0       	ldi	r28, 0x0F	; 15
     5ae:	d0 e0       	ldi	r29, 0x00	; 0
unsigned long Result = 0; 
     5b0:	81 2c       	mov	r8, r1
     5b2:	91 2c       	mov	r9, r1
     5b4:	54 01       	movw	r10, r8
if((rem >= 0x80000000) || (Den >= 0x80000000))
{rem /= 2; Den /= 2;}

if(mode == 1){
for(int n = 0; n <= 15; n++){					//bit 0 is reserved for sign bit
if ((2*(rem))/Den)(Result) |= (1 << (15-n));
     5b6:	01 e0       	ldi	r16, 0x01	; 1
     5b8:	10 e0       	ldi	r17, 0x00	; 0
     5ba:	6b 01       	movw	r12, r22
     5bc:	7c 01       	movw	r14, r24
     5be:	cc 0c       	add	r12, r12
     5c0:	dd 1c       	adc	r13, r13
     5c2:	ee 1c       	adc	r14, r14
     5c4:	ff 1c       	adc	r15, r15
     5c6:	c7 01       	movw	r24, r14
     5c8:	b6 01       	movw	r22, r12
     5ca:	a3 01       	movw	r20, r6
     5cc:	92 01       	movw	r18, r4
     5ce:	0e 94 31 10 	call	0x2062	; 0x2062 <__udivmodsi4>
     5d2:	23 2b       	or	r18, r19
     5d4:	24 2b       	or	r18, r20
     5d6:	25 2b       	or	r18, r21
     5d8:	79 f0       	breq	.+30     	; 0x5f8 <Fraction_to_Binary_Unsigned+0x8c>
     5da:	c8 01       	movw	r24, r16
     5dc:	0c 2e       	mov	r0, r28
     5de:	02 c0       	rjmp	.+4      	; 0x5e4 <Fraction_to_Binary_Unsigned+0x78>
     5e0:	88 0f       	add	r24, r24
     5e2:	99 1f       	adc	r25, r25
     5e4:	0a 94       	dec	r0
     5e6:	e2 f7       	brpl	.-8      	; 0x5e0 <Fraction_to_Binary_Unsigned+0x74>
     5e8:	09 2e       	mov	r0, r25
     5ea:	00 0c       	add	r0, r0
     5ec:	aa 0b       	sbc	r26, r26
     5ee:	bb 0b       	sbc	r27, r27
     5f0:	88 2a       	or	r8, r24
     5f2:	99 2a       	or	r9, r25
     5f4:	aa 2a       	or	r10, r26
     5f6:	bb 2a       	or	r11, r27
rem = (2*(rem))%Den; }
     5f8:	c7 01       	movw	r24, r14
     5fa:	b6 01       	movw	r22, r12
     5fc:	a3 01       	movw	r20, r6
     5fe:	92 01       	movw	r18, r4
     600:	0e 94 31 10 	call	0x2062	; 0x2062 <__udivmodsi4>
     604:	21 97       	sbiw	r28, 0x01	; 1
     606:	c8 f6       	brcc	.-78     	; 0x5ba <Fraction_to_Binary_Unsigned+0x4e>
Result = Result << 16;
     608:	54 01       	movw	r10, r8
     60a:	99 24       	eor	r9, r9
     60c:	88 24       	eor	r8, r8
     60e:	cf e0       	ldi	r28, 0x0F	; 15
     610:	d0 e0       	ldi	r29, 0x00	; 0


/******************************************************************************/
unsigned long Fraction_to_Binary_Unsigned(unsigned long rem,unsigned long Den){	
unsigned long Result = 0; 
unsigned int res_LB=0; 
     612:	00 e0       	ldi	r16, 0x00	; 0
     614:	10 e0       	ldi	r17, 0x00	; 0
for(int n = 0; n <= 15; n++){					//bit 0 is reserved for sign bit
if ((2*(rem))/Den)(Result) |= (1 << (15-n));
rem = (2*(rem))%Den; }
Result = Result << 16;
for(int n = 0; n <= 15; n++){
if ((2*(rem))/Den)(res_LB) |= (1 << (15-n));
     616:	22 24       	eor	r2, r2
     618:	23 94       	inc	r2
     61a:	31 2c       	mov	r3, r1
     61c:	6b 01       	movw	r12, r22
     61e:	7c 01       	movw	r14, r24
     620:	cc 0c       	add	r12, r12
     622:	dd 1c       	adc	r13, r13
     624:	ee 1c       	adc	r14, r14
     626:	ff 1c       	adc	r15, r15
     628:	c7 01       	movw	r24, r14
     62a:	b6 01       	movw	r22, r12
     62c:	a3 01       	movw	r20, r6
     62e:	92 01       	movw	r18, r4
     630:	0e 94 31 10 	call	0x2062	; 0x2062 <__udivmodsi4>
     634:	23 2b       	or	r18, r19
     636:	24 2b       	or	r18, r20
     638:	25 2b       	or	r18, r21
     63a:	49 f0       	breq	.+18     	; 0x64e <Fraction_to_Binary_Unsigned+0xe2>
     63c:	c1 01       	movw	r24, r2
     63e:	0c 2e       	mov	r0, r28
     640:	02 c0       	rjmp	.+4      	; 0x646 <Fraction_to_Binary_Unsigned+0xda>
     642:	88 0f       	add	r24, r24
     644:	99 1f       	adc	r25, r25
     646:	0a 94       	dec	r0
     648:	e2 f7       	brpl	.-8      	; 0x642 <Fraction_to_Binary_Unsigned+0xd6>
     64a:	08 2b       	or	r16, r24
     64c:	19 2b       	or	r17, r25
rem = (2*(rem))%Den;}}
     64e:	c7 01       	movw	r24, r14
     650:	b6 01       	movw	r22, r12
     652:	a3 01       	movw	r20, r6
     654:	92 01       	movw	r18, r4
     656:	0e 94 31 10 	call	0x2062	; 0x2062 <__udivmodsi4>
     65a:	21 97       	sbiw	r28, 0x01	; 1
     65c:	f8 f6       	brcc	.-66     	; 0x61c <Fraction_to_Binary_Unsigned+0xb0>
for(int n = 0; n <= 15; n++){
if ((2*(rem))/Den){(res_LB) |= (1 << (15-n));sendChar('1');} else sendChar('0');
rem = (2*(rem))%Den;}sendChar('\t');}

Result += res_LB;								//Result is not affected by the signs of rem and Den
return Result;}
     65e:	c5 01       	movw	r24, r10
     660:	b4 01       	movw	r22, r8
     662:	60 0f       	add	r22, r16
     664:	71 1f       	adc	r23, r17
     666:	81 1d       	adc	r24, r1
     668:	91 1d       	adc	r25, r1
     66a:	df 91       	pop	r29
     66c:	cf 91       	pop	r28
     66e:	1f 91       	pop	r17
     670:	0f 91       	pop	r16
     672:	ff 90       	pop	r15
     674:	ef 90       	pop	r14
     676:	df 90       	pop	r13
     678:	cf 90       	pop	r12
     67a:	bf 90       	pop	r11
     67c:	af 90       	pop	r10
     67e:	9f 90       	pop	r9
     680:	8f 90       	pop	r8
     682:	7f 90       	pop	r7
     684:	6f 90       	pop	r6
     686:	5f 90       	pop	r5
     688:	4f 90       	pop	r4
     68a:	3f 90       	pop	r3
     68c:	2f 90       	pop	r2
     68e:	08 95       	ret

00000690 <Binary_points_to_Decimal_Unsigned>:


/******************************************************************************/
unsigned long Binary_points_to_Decimal_Unsigned (unsigned long RHSofBP)
{unsigned long  RHSofDP=0;
     690:	2f 92       	push	r2
     692:	3f 92       	push	r3
     694:	4f 92       	push	r4
     696:	5f 92       	push	r5
     698:	6f 92       	push	r6
     69a:	7f 92       	push	r7
     69c:	8f 92       	push	r8
     69e:	9f 92       	push	r9
     6a0:	af 92       	push	r10
     6a2:	bf 92       	push	r11
     6a4:	cf 92       	push	r12
     6a6:	df 92       	push	r13
     6a8:	ef 92       	push	r14
     6aa:	ff 92       	push	r15
     6ac:	0f 93       	push	r16
     6ae:	1f 93       	push	r17
     6b0:	cf 93       	push	r28
     6b2:	df 93       	push	r29
     6b4:	cd b7       	in	r28, 0x3d	; 61
     6b6:	de b7       	in	r29, 0x3e	; 62
     6b8:	e6 97       	sbiw	r28, 0x36	; 54
     6ba:	0f b6       	in	r0, 0x3f	; 63
     6bc:	f8 94       	cli
     6be:	de bf       	out	0x3e, r29	; 62
     6c0:	0f be       	out	0x3f, r0	; 63
     6c2:	cd bf       	out	0x3d, r28	; 61
unsigned int RHSofBP_LB;
RHSofBP_LB = RHSofBP;
     6c4:	9b 01       	movw	r18, r22
case 10: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 488281; break;
case 11: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 244141; break;
case 12: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 122070; break;
case 13: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 61035; break;
case 14: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 30518; break;
case 15: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 15259; break;}}
     6c6:	ac 01       	movw	r20, r24
     6c8:	66 27       	eor	r22, r22
     6ca:	77 27       	eor	r23, r23
     6cc:	db 01       	movw	r26, r22
     6ce:	ca 01       	movw	r24, r20
     6d0:	81 70       	andi	r24, 0x01	; 1
     6d2:	99 27       	eor	r25, r25
     6d4:	aa 27       	eor	r26, r26
     6d6:	bb 27       	eor	r27, r27
     6d8:	8d a7       	std	Y+45, r24	; 0x2d
     6da:	9e a7       	std	Y+46, r25	; 0x2e
     6dc:	af a7       	std	Y+47, r26	; 0x2f
     6de:	b8 ab       	std	Y+48, r27	; 0x30
{unsigned long  RHSofDP=0;
unsigned int RHSofBP_LB;
RHSofBP_LB = RHSofBP;

for(int n = 0; n <= 15; n++){switch(n){
case 0: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 500000000; break;
     6e0:	db 01       	movw	r26, r22
     6e2:	ca 01       	movw	r24, r20
     6e4:	88 27       	eor	r24, r24
     6e6:	90 78       	andi	r25, 0x80	; 128
     6e8:	89 83       	std	Y+1, r24	; 0x01
     6ea:	9a 83       	std	Y+2, r25	; 0x02
     6ec:	ab 83       	std	Y+3, r26	; 0x03
     6ee:	bc 83       	std	Y+4, r27	; 0x04
case 1: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 250000000; break;
     6f0:	db 01       	movw	r26, r22
     6f2:	ca 01       	movw	r24, r20
     6f4:	88 27       	eor	r24, r24
     6f6:	90 74       	andi	r25, 0x40	; 64
     6f8:	aa 27       	eor	r26, r26
     6fa:	bb 27       	eor	r27, r27
     6fc:	8d 83       	std	Y+5, r24	; 0x05
     6fe:	9e 83       	std	Y+6, r25	; 0x06
     700:	af 83       	std	Y+7, r26	; 0x07
     702:	b8 87       	std	Y+8, r27	; 0x08
case 2: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 125000000; break;
     704:	db 01       	movw	r26, r22
     706:	ca 01       	movw	r24, r20
     708:	88 27       	eor	r24, r24
     70a:	90 72       	andi	r25, 0x20	; 32
     70c:	aa 27       	eor	r26, r26
     70e:	bb 27       	eor	r27, r27
     710:	89 87       	std	Y+9, r24	; 0x09
     712:	9a 87       	std	Y+10, r25	; 0x0a
     714:	ab 87       	std	Y+11, r26	; 0x0b
     716:	bc 87       	std	Y+12, r27	; 0x0c
case 3: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 62500000; break;
     718:	db 01       	movw	r26, r22
     71a:	ca 01       	movw	r24, r20
     71c:	88 27       	eor	r24, r24
     71e:	90 71       	andi	r25, 0x10	; 16
     720:	aa 27       	eor	r26, r26
     722:	bb 27       	eor	r27, r27
     724:	8d 87       	std	Y+13, r24	; 0x0d
     726:	9e 87       	std	Y+14, r25	; 0x0e
     728:	af 87       	std	Y+15, r26	; 0x0f
     72a:	b8 8b       	std	Y+16, r27	; 0x10
case 4: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 31250000; break;
     72c:	db 01       	movw	r26, r22
     72e:	ca 01       	movw	r24, r20
     730:	88 27       	eor	r24, r24
     732:	98 70       	andi	r25, 0x08	; 8
     734:	aa 27       	eor	r26, r26
     736:	bb 27       	eor	r27, r27
     738:	89 8b       	std	Y+17, r24	; 0x11
     73a:	9a 8b       	std	Y+18, r25	; 0x12
     73c:	ab 8b       	std	Y+19, r26	; 0x13
     73e:	bc 8b       	std	Y+20, r27	; 0x14
case 5: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 15625000; break;
     740:	db 01       	movw	r26, r22
     742:	ca 01       	movw	r24, r20
     744:	88 27       	eor	r24, r24
     746:	94 70       	andi	r25, 0x04	; 4
     748:	aa 27       	eor	r26, r26
     74a:	bb 27       	eor	r27, r27
     74c:	8d 8b       	std	Y+21, r24	; 0x15
     74e:	9e 8b       	std	Y+22, r25	; 0x16
     750:	af 8b       	std	Y+23, r26	; 0x17
     752:	b8 8f       	std	Y+24, r27	; 0x18
case 6: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 7812500; break;
     754:	db 01       	movw	r26, r22
     756:	ca 01       	movw	r24, r20
     758:	88 27       	eor	r24, r24
     75a:	92 70       	andi	r25, 0x02	; 2
     75c:	aa 27       	eor	r26, r26
     75e:	bb 27       	eor	r27, r27
     760:	89 8f       	std	Y+25, r24	; 0x19
     762:	9a 8f       	std	Y+26, r25	; 0x1a
     764:	ab 8f       	std	Y+27, r26	; 0x1b
     766:	bc 8f       	std	Y+28, r27	; 0x1c
case 7: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 3906250; break;
     768:	db 01       	movw	r26, r22
     76a:	ca 01       	movw	r24, r20
     76c:	88 27       	eor	r24, r24
     76e:	91 70       	andi	r25, 0x01	; 1
     770:	aa 27       	eor	r26, r26
     772:	bb 27       	eor	r27, r27
     774:	8d 8f       	std	Y+29, r24	; 0x1d
     776:	9e 8f       	std	Y+30, r25	; 0x1e
     778:	af 8f       	std	Y+31, r26	; 0x1f
     77a:	b8 a3       	std	Y+32, r27	; 0x20
case 8: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 1953125; break;
     77c:	db 01       	movw	r26, r22
     77e:	ca 01       	movw	r24, r20
     780:	80 78       	andi	r24, 0x80	; 128
     782:	99 27       	eor	r25, r25
     784:	aa 27       	eor	r26, r26
     786:	bb 27       	eor	r27, r27
     788:	89 a3       	std	Y+33, r24	; 0x21
     78a:	9a a3       	std	Y+34, r25	; 0x22
     78c:	ab a3       	std	Y+35, r26	; 0x23
     78e:	bc a3       	std	Y+36, r27	; 0x24
case 9: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 976563; break;
     790:	db 01       	movw	r26, r22
     792:	ca 01       	movw	r24, r20
     794:	80 74       	andi	r24, 0x40	; 64
     796:	99 27       	eor	r25, r25
     798:	aa 27       	eor	r26, r26
     79a:	bb 27       	eor	r27, r27
     79c:	8d a3       	std	Y+37, r24	; 0x25
     79e:	9e a3       	std	Y+38, r25	; 0x26
     7a0:	af a3       	std	Y+39, r26	; 0x27
     7a2:	b8 a7       	std	Y+40, r27	; 0x28
case 10: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 488281; break;
     7a4:	db 01       	movw	r26, r22
     7a6:	ca 01       	movw	r24, r20
     7a8:	80 72       	andi	r24, 0x20	; 32
     7aa:	99 27       	eor	r25, r25
     7ac:	aa 27       	eor	r26, r26
     7ae:	bb 27       	eor	r27, r27
     7b0:	89 a7       	std	Y+41, r24	; 0x29
     7b2:	9a a7       	std	Y+42, r25	; 0x2a
     7b4:	ab a7       	std	Y+43, r26	; 0x2b
     7b6:	bc a7       	std	Y+44, r27	; 0x2c
case 11: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 244141; break;
     7b8:	db 01       	movw	r26, r22
     7ba:	ca 01       	movw	r24, r20
     7bc:	80 71       	andi	r24, 0x10	; 16
     7be:	99 27       	eor	r25, r25
     7c0:	aa 27       	eor	r26, r26
     7c2:	bb 27       	eor	r27, r27
     7c4:	8b ab       	std	Y+51, r24	; 0x33
     7c6:	9c ab       	std	Y+52, r25	; 0x34
     7c8:	ad ab       	std	Y+53, r26	; 0x35
     7ca:	be ab       	std	Y+54, r27	; 0x36
case 12: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 122070; break;
     7cc:	4a 01       	movw	r8, r20
     7ce:	5b 01       	movw	r10, r22
     7d0:	98 e0       	ldi	r25, 0x08	; 8
     7d2:	89 22       	and	r8, r25
     7d4:	99 24       	eor	r9, r9
     7d6:	aa 24       	eor	r10, r10
     7d8:	bb 24       	eor	r11, r11
case 13: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 61035; break;
     7da:	2a 01       	movw	r4, r20
     7dc:	3b 01       	movw	r6, r22
     7de:	a4 e0       	ldi	r26, 0x04	; 4
     7e0:	4a 22       	and	r4, r26
     7e2:	55 24       	eor	r5, r5
     7e4:	66 24       	eor	r6, r6
     7e6:	77 24       	eor	r7, r7
case 14: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 30518; break;
     7e8:	42 70       	andi	r20, 0x02	; 2
     7ea:	55 27       	eor	r21, r21
     7ec:	66 27       	eor	r22, r22
     7ee:	77 27       	eor	r23, r23
unsigned long Binary_points_to_Decimal_Unsigned (unsigned long RHSofBP)
{unsigned long  RHSofDP=0;
unsigned int RHSofBP_LB;
RHSofBP_LB = RHSofBP;

for(int n = 0; n <= 15; n++){switch(n){
     7f0:	c1 2c       	mov	r12, r1
     7f2:	d1 2c       	mov	r13, r1
return Result;}


/******************************************************************************/
unsigned long Binary_points_to_Decimal_Unsigned (unsigned long RHSofBP)
{unsigned long  RHSofDP=0;
     7f4:	80 e0       	ldi	r24, 0x00	; 0
     7f6:	90 e0       	ldi	r25, 0x00	; 0
     7f8:	dc 01       	movw	r26, r24
unsigned int RHSofBP_LB;
RHSofBP_LB = RHSofBP;

for(int n = 0; n <= 15; n++){switch(n){
     7fa:	f6 01       	movw	r30, r12
     7fc:	31 97       	sbiw	r30, 0x01	; 1
     7fe:	ef 30       	cpi	r30, 0x0F	; 15
     800:	f1 05       	cpc	r31, r1
     802:	20 f4       	brcc	.+8      	; 0x80c <Binary_points_to_Decimal_Unsigned+0x17c>
     804:	ec 5c       	subi	r30, 0xCC	; 204
     806:	ff 4f       	sbci	r31, 0xFF	; 255
     808:	0c 94 72 10 	jmp	0x20e4	; 0x20e4 <__tablejump2__>
case 0: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 500000000; break;
     80c:	e9 80       	ldd	r14, Y+1	; 0x01
     80e:	fa 80       	ldd	r15, Y+2	; 0x02
     810:	0b 81       	ldd	r16, Y+3	; 0x03
     812:	1c 81       	ldd	r17, Y+4	; 0x04
     814:	ef 28       	or	r14, r15
     816:	e0 2a       	or	r14, r16
     818:	e1 2a       	or	r14, r17
     81a:	09 f4       	brne	.+2      	; 0x81e <Binary_points_to_Decimal_Unsigned+0x18e>
     81c:	c6 c0       	rjmp	.+396    	; 0x9aa <Binary_points_to_Decimal_Unsigned+0x31a>
     81e:	9b 59       	subi	r25, 0x9B	; 155
     820:	a2 43       	sbci	r26, 0x32	; 50
     822:	b2 4e       	sbci	r27, 0xE2	; 226
     824:	c2 c0       	rjmp	.+388    	; 0x9aa <Binary_points_to_Decimal_Unsigned+0x31a>
case 1: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 250000000; break;
     826:	ed 80       	ldd	r14, Y+5	; 0x05
     828:	fe 80       	ldd	r15, Y+6	; 0x06
     82a:	0f 81       	ldd	r16, Y+7	; 0x07
     82c:	18 85       	ldd	r17, Y+8	; 0x08
     82e:	ef 28       	or	r14, r15
     830:	e0 2a       	or	r14, r16
     832:	e1 2a       	or	r14, r17
     834:	09 f4       	brne	.+2      	; 0x838 <Binary_points_to_Decimal_Unsigned+0x1a8>
     836:	b9 c0       	rjmp	.+370    	; 0x9aa <Binary_points_to_Decimal_Unsigned+0x31a>
     838:	80 58       	subi	r24, 0x80	; 128
     83a:	9d 44       	sbci	r25, 0x4D	; 77
     83c:	a9 41       	sbci	r26, 0x19	; 25
     83e:	b1 4f       	sbci	r27, 0xF1	; 241
     840:	b4 c0       	rjmp	.+360    	; 0x9aa <Binary_points_to_Decimal_Unsigned+0x31a>
case 2: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 125000000; break;
     842:	e9 84       	ldd	r14, Y+9	; 0x09
     844:	fa 84       	ldd	r15, Y+10	; 0x0a
     846:	0b 85       	ldd	r16, Y+11	; 0x0b
     848:	1c 85       	ldd	r17, Y+12	; 0x0c
     84a:	ef 28       	or	r14, r15
     84c:	e0 2a       	or	r14, r16
     84e:	e1 2a       	or	r14, r17
     850:	09 f4       	brne	.+2      	; 0x854 <Binary_points_to_Decimal_Unsigned+0x1c4>
     852:	ab c0       	rjmp	.+342    	; 0x9aa <Binary_points_to_Decimal_Unsigned+0x31a>
     854:	80 5c       	subi	r24, 0xC0	; 192
     856:	96 4a       	sbci	r25, 0xA6	; 166
     858:	ac 48       	sbci	r26, 0x8C	; 140
     85a:	b8 4f       	sbci	r27, 0xF8	; 248
     85c:	a6 c0       	rjmp	.+332    	; 0x9aa <Binary_points_to_Decimal_Unsigned+0x31a>
case 3: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 62500000; break;
     85e:	ed 84       	ldd	r14, Y+13	; 0x0d
     860:	fe 84       	ldd	r15, Y+14	; 0x0e
     862:	0f 85       	ldd	r16, Y+15	; 0x0f
     864:	18 89       	ldd	r17, Y+16	; 0x10
     866:	ef 28       	or	r14, r15
     868:	e0 2a       	or	r14, r16
     86a:	e1 2a       	or	r14, r17
     86c:	09 f4       	brne	.+2      	; 0x870 <Binary_points_to_Decimal_Unsigned+0x1e0>
     86e:	9d c0       	rjmp	.+314    	; 0x9aa <Binary_points_to_Decimal_Unsigned+0x31a>
     870:	80 56       	subi	r24, 0x60	; 96
     872:	93 45       	sbci	r25, 0x53	; 83
     874:	a6 44       	sbci	r26, 0x46	; 70
     876:	bc 4f       	sbci	r27, 0xFC	; 252
     878:	98 c0       	rjmp	.+304    	; 0x9aa <Binary_points_to_Decimal_Unsigned+0x31a>
case 4: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 31250000; break;
     87a:	e9 88       	ldd	r14, Y+17	; 0x11
     87c:	fa 88       	ldd	r15, Y+18	; 0x12
     87e:	0b 89       	ldd	r16, Y+19	; 0x13
     880:	1c 89       	ldd	r17, Y+20	; 0x14
     882:	ef 28       	or	r14, r15
     884:	e0 2a       	or	r14, r16
     886:	e1 2a       	or	r14, r17
     888:	09 f4       	brne	.+2      	; 0x88c <Binary_points_to_Decimal_Unsigned+0x1fc>
     88a:	8f c0       	rjmp	.+286    	; 0x9aa <Binary_points_to_Decimal_Unsigned+0x31a>
     88c:	80 5b       	subi	r24, 0xB0	; 176
     88e:	99 42       	sbci	r25, 0x29	; 41
     890:	a3 42       	sbci	r26, 0x23	; 35
     892:	be 4f       	sbci	r27, 0xFE	; 254
     894:	8a c0       	rjmp	.+276    	; 0x9aa <Binary_points_to_Decimal_Unsigned+0x31a>
case 5: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 15625000; break;
     896:	ed 88       	ldd	r14, Y+21	; 0x15
     898:	fe 88       	ldd	r15, Y+22	; 0x16
     89a:	0f 89       	ldd	r16, Y+23	; 0x17
     89c:	18 8d       	ldd	r17, Y+24	; 0x18
     89e:	ef 28       	or	r14, r15
     8a0:	e0 2a       	or	r14, r16
     8a2:	e1 2a       	or	r14, r17
     8a4:	09 f4       	brne	.+2      	; 0x8a8 <Binary_points_to_Decimal_Unsigned+0x218>
     8a6:	81 c0       	rjmp	.+258    	; 0x9aa <Binary_points_to_Decimal_Unsigned+0x31a>
     8a8:	88 5d       	subi	r24, 0xD8	; 216
     8aa:	94 49       	sbci	r25, 0x94	; 148
     8ac:	a1 41       	sbci	r26, 0x11	; 17
     8ae:	bf 4f       	sbci	r27, 0xFF	; 255
     8b0:	7c c0       	rjmp	.+248    	; 0x9aa <Binary_points_to_Decimal_Unsigned+0x31a>
case 6: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 7812500; break;
     8b2:	e9 8c       	ldd	r14, Y+25	; 0x19
     8b4:	fa 8c       	ldd	r15, Y+26	; 0x1a
     8b6:	0b 8d       	ldd	r16, Y+27	; 0x1b
     8b8:	1c 8d       	ldd	r17, Y+28	; 0x1c
     8ba:	ef 28       	or	r14, r15
     8bc:	e0 2a       	or	r14, r16
     8be:	e1 2a       	or	r14, r17
     8c0:	09 f4       	brne	.+2      	; 0x8c4 <Binary_points_to_Decimal_Unsigned+0x234>
     8c2:	73 c0       	rjmp	.+230    	; 0x9aa <Binary_points_to_Decimal_Unsigned+0x31a>
     8c4:	8c 56       	subi	r24, 0x6C	; 108
     8c6:	9a 4c       	sbci	r25, 0xCA	; 202
     8c8:	a8 48       	sbci	r26, 0x88	; 136
     8ca:	bf 4f       	sbci	r27, 0xFF	; 255
     8cc:	6e c0       	rjmp	.+220    	; 0x9aa <Binary_points_to_Decimal_Unsigned+0x31a>
case 7: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 3906250; break;
     8ce:	ed 8c       	ldd	r14, Y+29	; 0x1d
     8d0:	fe 8c       	ldd	r15, Y+30	; 0x1e
     8d2:	0f 8d       	ldd	r16, Y+31	; 0x1f
     8d4:	18 a1       	ldd	r17, Y+32	; 0x20
     8d6:	ef 28       	or	r14, r15
     8d8:	e0 2a       	or	r14, r16
     8da:	e1 2a       	or	r14, r17
     8dc:	09 f4       	brne	.+2      	; 0x8e0 <Binary_points_to_Decimal_Unsigned+0x250>
     8de:	65 c0       	rjmp	.+202    	; 0x9aa <Binary_points_to_Decimal_Unsigned+0x31a>
     8e0:	86 53       	subi	r24, 0x36	; 54
     8e2:	95 46       	sbci	r25, 0x65	; 101
     8e4:	a4 4c       	sbci	r26, 0xC4	; 196
     8e6:	bf 4f       	sbci	r27, 0xFF	; 255
     8e8:	60 c0       	rjmp	.+192    	; 0x9aa <Binary_points_to_Decimal_Unsigned+0x31a>
case 8: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 1953125; break;
     8ea:	e9 a0       	ldd	r14, Y+33	; 0x21
     8ec:	fa a0       	ldd	r15, Y+34	; 0x22
     8ee:	0b a1       	ldd	r16, Y+35	; 0x23
     8f0:	1c a1       	ldd	r17, Y+36	; 0x24
     8f2:	ef 28       	or	r14, r15
     8f4:	e0 2a       	or	r14, r16
     8f6:	e1 2a       	or	r14, r17
     8f8:	09 f4       	brne	.+2      	; 0x8fc <Binary_points_to_Decimal_Unsigned+0x26c>
     8fa:	57 c0       	rjmp	.+174    	; 0x9aa <Binary_points_to_Decimal_Unsigned+0x31a>
     8fc:	8b 59       	subi	r24, 0x9B	; 155
     8fe:	92 43       	sbci	r25, 0x32	; 50
     900:	a2 4e       	sbci	r26, 0xE2	; 226
     902:	bf 4f       	sbci	r27, 0xFF	; 255
     904:	52 c0       	rjmp	.+164    	; 0x9aa <Binary_points_to_Decimal_Unsigned+0x31a>
case 9: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 976563; break;
     906:	ed a0       	ldd	r14, Y+37	; 0x25
     908:	fe a0       	ldd	r15, Y+38	; 0x26
     90a:	0f a1       	ldd	r16, Y+39	; 0x27
     90c:	18 a5       	ldd	r17, Y+40	; 0x28
     90e:	ef 28       	or	r14, r15
     910:	e0 2a       	or	r14, r16
     912:	e1 2a       	or	r14, r17
     914:	09 f4       	brne	.+2      	; 0x918 <Binary_points_to_Decimal_Unsigned+0x288>
     916:	49 c0       	rjmp	.+146    	; 0x9aa <Binary_points_to_Decimal_Unsigned+0x31a>
     918:	8d 54       	subi	r24, 0x4D	; 77
     91a:	99 41       	sbci	r25, 0x19	; 25
     91c:	a1 4f       	sbci	r26, 0xF1	; 241
     91e:	bf 4f       	sbci	r27, 0xFF	; 255
     920:	44 c0       	rjmp	.+136    	; 0x9aa <Binary_points_to_Decimal_Unsigned+0x31a>
case 10: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 488281; break;
     922:	e9 a4       	ldd	r14, Y+41	; 0x29
     924:	fa a4       	ldd	r15, Y+42	; 0x2a
     926:	0b a5       	ldd	r16, Y+43	; 0x2b
     928:	1c a5       	ldd	r17, Y+44	; 0x2c
     92a:	ef 28       	or	r14, r15
     92c:	e0 2a       	or	r14, r16
     92e:	e1 2a       	or	r14, r17
     930:	e1 f1       	breq	.+120    	; 0x9aa <Binary_points_to_Decimal_Unsigned+0x31a>
     932:	87 5a       	subi	r24, 0xA7	; 167
     934:	9c 48       	sbci	r25, 0x8C	; 140
     936:	a8 4f       	sbci	r26, 0xF8	; 248
     938:	bf 4f       	sbci	r27, 0xFF	; 255
     93a:	37 c0       	rjmp	.+110    	; 0x9aa <Binary_points_to_Decimal_Unsigned+0x31a>
case 11: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 244141; break;
     93c:	eb a8       	ldd	r14, Y+51	; 0x33
     93e:	fc a8       	ldd	r15, Y+52	; 0x34
     940:	0d a9       	ldd	r16, Y+53	; 0x35
     942:	1e a9       	ldd	r17, Y+54	; 0x36
     944:	ef 28       	or	r14, r15
     946:	e0 2a       	or	r14, r16
     948:	e1 2a       	or	r14, r17
     94a:	79 f1       	breq	.+94     	; 0x9aa <Binary_points_to_Decimal_Unsigned+0x31a>
     94c:	83 55       	subi	r24, 0x53	; 83
     94e:	96 44       	sbci	r25, 0x46	; 70
     950:	ac 4f       	sbci	r26, 0xFC	; 252
     952:	bf 4f       	sbci	r27, 0xFF	; 255
     954:	2a c0       	rjmp	.+84     	; 0x9aa <Binary_points_to_Decimal_Unsigned+0x31a>
case 12: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 122070; break;
     956:	81 14       	cp	r8, r1
     958:	91 04       	cpc	r9, r1
     95a:	a1 04       	cpc	r10, r1
     95c:	b1 04       	cpc	r11, r1
     95e:	29 f1       	breq	.+74     	; 0x9aa <Binary_points_to_Decimal_Unsigned+0x31a>
     960:	8a 52       	subi	r24, 0x2A	; 42
     962:	93 42       	sbci	r25, 0x23	; 35
     964:	ae 4f       	sbci	r26, 0xFE	; 254
     966:	bf 4f       	sbci	r27, 0xFF	; 255
     968:	20 c0       	rjmp	.+64     	; 0x9aa <Binary_points_to_Decimal_Unsigned+0x31a>
case 13: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 61035; break;
     96a:	41 14       	cp	r4, r1
     96c:	51 04       	cpc	r5, r1
     96e:	61 04       	cpc	r6, r1
     970:	71 04       	cpc	r7, r1
     972:	d9 f0       	breq	.+54     	; 0x9aa <Binary_points_to_Decimal_Unsigned+0x31a>
     974:	85 59       	subi	r24, 0x95	; 149
     976:	91 41       	sbci	r25, 0x11	; 17
     978:	af 4f       	sbci	r26, 0xFF	; 255
     97a:	bf 4f       	sbci	r27, 0xFF	; 255
     97c:	16 c0       	rjmp	.+44     	; 0x9aa <Binary_points_to_Decimal_Unsigned+0x31a>
case 14: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 30518; break;
     97e:	41 15       	cp	r20, r1
     980:	51 05       	cpc	r21, r1
     982:	61 05       	cpc	r22, r1
     984:	71 05       	cpc	r23, r1
     986:	89 f0       	breq	.+34     	; 0x9aa <Binary_points_to_Decimal_Unsigned+0x31a>
     988:	8a 5c       	subi	r24, 0xCA	; 202
     98a:	98 48       	sbci	r25, 0x88	; 136
     98c:	af 4f       	sbci	r26, 0xFF	; 255
     98e:	bf 4f       	sbci	r27, 0xFF	; 255
     990:	0c c0       	rjmp	.+24     	; 0x9aa <Binary_points_to_Decimal_Unsigned+0x31a>
case 15: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 15259; break;}}
     992:	ed a4       	ldd	r14, Y+45	; 0x2d
     994:	fe a4       	ldd	r15, Y+46	; 0x2e
     996:	0f a5       	ldd	r16, Y+47	; 0x2f
     998:	18 a9       	ldd	r17, Y+48	; 0x30
     99a:	ef 28       	or	r14, r15
     99c:	e0 2a       	or	r14, r16
     99e:	e1 2a       	or	r14, r17
     9a0:	21 f0       	breq	.+8      	; 0x9aa <Binary_points_to_Decimal_Unsigned+0x31a>
     9a2:	85 56       	subi	r24, 0x65	; 101
     9a4:	94 4c       	sbci	r25, 0xC4	; 196
     9a6:	af 4f       	sbci	r26, 0xFF	; 255
     9a8:	bf 4f       	sbci	r27, 0xFF	; 255
unsigned long Binary_points_to_Decimal_Unsigned (unsigned long RHSofBP)
{unsigned long  RHSofDP=0;
unsigned int RHSofBP_LB;
RHSofBP_LB = RHSofBP;

for(int n = 0; n <= 15; n++){switch(n){
     9aa:	0f ef       	ldi	r16, 0xFF	; 255
     9ac:	c0 1a       	sub	r12, r16
     9ae:	d0 0a       	sbc	r13, r16
     9b0:	10 e1       	ldi	r17, 0x10	; 16
     9b2:	c1 16       	cp	r12, r17
     9b4:	d1 04       	cpc	r13, r1
     9b6:	09 f0       	breq	.+2      	; 0x9ba <Binary_points_to_Decimal_Unsigned+0x32a>
     9b8:	20 cf       	rjmp	.-448    	; 0x7fa <Binary_points_to_Decimal_Unsigned+0x16a>
     9ba:	40 e0       	ldi	r20, 0x00	; 0
     9bc:	50 e0       	ldi	r21, 0x00	; 0
case 8: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 30; break;
case 9: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 15; break;
case 10: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 7; break;
case 11: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 4; break;
case 12: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 2; break;
case 13: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 1; break;
     9be:	b9 01       	movw	r22, r18
     9c0:	64 70       	andi	r22, 0x04	; 4
     9c2:	77 27       	eor	r23, r23
     9c4:	7a 83       	std	Y+2, r23	; 0x02
     9c6:	69 83       	std	Y+1, r22	; 0x01
case 7: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 60; break;
case 8: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 30; break;
case 9: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 15; break;
case 10: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 7; break;
case 11: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 4; break;
case 12: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 2; break;
     9c8:	89 01       	movw	r16, r18
     9ca:	08 70       	andi	r16, 0x08	; 8
     9cc:	11 27       	eor	r17, r17
     9ce:	1e 83       	std	Y+6, r17	; 0x06
     9d0:	0d 83       	std	Y+5, r16	; 0x05
case 6: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 119; break;
case 7: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 60; break;
case 8: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 30; break;
case 9: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 15; break;
case 10: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 7; break;
case 11: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 4; break;
     9d2:	b9 01       	movw	r22, r18
     9d4:	60 71       	andi	r22, 0x10	; 16
     9d6:	77 27       	eor	r23, r23
     9d8:	7a 87       	std	Y+10, r23	; 0x0a
     9da:	69 87       	std	Y+9, r22	; 0x09
case 5: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 238; break;
case 6: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 119; break;
case 7: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 60; break;
case 8: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 30; break;
case 9: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 15; break;
case 10: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 7; break;
     9dc:	19 01       	movw	r2, r18
     9de:	70 e2       	ldi	r23, 0x20	; 32
     9e0:	27 22       	and	r2, r23
     9e2:	33 24       	eor	r3, r3
case 4: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 477; break;
case 5: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 238; break;
case 6: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 119; break;
case 7: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 60; break;
case 8: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 30; break;
case 9: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 15; break;
     9e4:	89 01       	movw	r16, r18
     9e6:	00 74       	andi	r16, 0x40	; 64
     9e8:	11 27       	eor	r17, r17
case 3: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 954; break;
case 4: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 477; break;
case 5: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 238; break;
case 6: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 119; break;
case 7: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 60; break;
case 8: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 30; break;
     9ea:	29 01       	movw	r4, r18
     9ec:	e0 e8       	ldi	r30, 0x80	; 128
     9ee:	4e 22       	and	r4, r30
     9f0:	55 24       	eor	r5, r5
case 2: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 1907; break;
case 3: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 954; break;
case 4: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 477; break;
case 5: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 238; break;
case 6: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 119; break;
case 7: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 60; break;
     9f2:	39 01       	movw	r6, r18
     9f4:	66 24       	eor	r6, r6
     9f6:	f1 e0       	ldi	r31, 0x01	; 1
     9f8:	7f 22       	and	r7, r31
case 1: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 3815; break;
case 2: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 1907; break;
case 3: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 954; break;
case 4: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 477; break;
case 5: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 238; break;
case 6: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 119; break;
     9fa:	49 01       	movw	r8, r18
     9fc:	88 24       	eor	r8, r8
     9fe:	62 e0       	ldi	r22, 0x02	; 2
     a00:	96 22       	and	r9, r22
case 0: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 7629; break;
case 1: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 3815; break;
case 2: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 1907; break;
case 3: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 954; break;
case 4: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 477; break;
case 5: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 238; break;
     a02:	b9 01       	movw	r22, r18
     a04:	66 27       	eor	r22, r22
     a06:	74 70       	andi	r23, 0x04	; 4
for(int n = 0; n <= 15; n++){switch (n){
case 0: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 7629; break;
case 1: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 3815; break;
case 2: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 1907; break;
case 3: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 954; break;
case 4: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 477; break;
     a08:	f9 01       	movw	r30, r18
     a0a:	ee 27       	eor	r30, r30
     a0c:	f8 70       	andi	r31, 0x08	; 8
     a0e:	fe 87       	std	Y+14, r31	; 0x0e
     a10:	ed 87       	std	Y+13, r30	; 0x0d
case 15: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 15259; break;}}
for(int n = 0; n <= 15; n++){switch (n){
case 0: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 7629; break;
case 1: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 3815; break;
case 2: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 1907; break;
case 3: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 954; break;
     a12:	79 01       	movw	r14, r18
     a14:	ee 24       	eor	r14, r14
     a16:	f0 e1       	ldi	r31, 0x10	; 16
     a18:	ff 22       	and	r15, r31
case 14: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 30518; break;
case 15: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 15259; break;}}
for(int n = 0; n <= 15; n++){switch (n){
case 0: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 7629; break;
case 1: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 3815; break;
case 2: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 1907; break;
     a1a:	69 01       	movw	r12, r18
     a1c:	cc 24       	eor	r12, r12
     a1e:	e0 e2       	ldi	r30, 0x20	; 32
     a20:	de 22       	and	r13, r30
case 13: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 61035; break;
case 14: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 30518; break;
case 15: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 15259; break;}}
for(int n = 0; n <= 15; n++){switch (n){
case 0: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 7629; break;
case 1: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 3815; break;
     a22:	59 01       	movw	r10, r18
     a24:	aa 24       	eor	r10, r10
     a26:	f0 e4       	ldi	r31, 0x40	; 64
     a28:	bf 22       	and	r11, r31
case 12: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 122070; break;
case 13: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 61035; break;
case 14: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 30518; break;
case 15: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 15259; break;}}
for(int n = 0; n <= 15; n++){switch (n){
case 0: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 7629; break;
     a2a:	22 27       	eor	r18, r18
     a2c:	30 78       	andi	r19, 0x80	; 128
case 11: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 244141; break;
case 12: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 122070; break;
case 13: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 61035; break;
case 14: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 30518; break;
case 15: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 15259; break;}}
for(int n = 0; n <= 15; n++){switch (n){
     a2e:	4e 30       	cpi	r20, 0x0E	; 14
     a30:	51 05       	cpc	r21, r1
     a32:	08 f0       	brcs	.+2      	; 0xa36 <Binary_points_to_Decimal_Unsigned+0x3a6>
     a34:	77 c0       	rjmp	.+238    	; 0xb24 <Binary_points_to_Decimal_Unsigned+0x494>
     a36:	fa 01       	movw	r30, r20
     a38:	ed 5b       	subi	r30, 0xBD	; 189
     a3a:	ff 4f       	sbci	r31, 0xFF	; 255
     a3c:	0c 94 72 10 	jmp	0x20e4	; 0x20e4 <__tablejump2__>
case 0: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 7629; break;
     a40:	21 15       	cp	r18, r1
     a42:	31 05       	cpc	r19, r1
     a44:	09 f4       	brne	.+2      	; 0xa48 <Binary_points_to_Decimal_Unsigned+0x3b8>
     a46:	6e c0       	rjmp	.+220    	; 0xb24 <Binary_points_to_Decimal_Unsigned+0x494>
     a48:	83 53       	subi	r24, 0x33	; 51
     a4a:	92 4e       	sbci	r25, 0xE2	; 226
     a4c:	af 4f       	sbci	r26, 0xFF	; 255
     a4e:	bf 4f       	sbci	r27, 0xFF	; 255
     a50:	69 c0       	rjmp	.+210    	; 0xb24 <Binary_points_to_Decimal_Unsigned+0x494>
case 1: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 3815; break;
     a52:	a1 14       	cp	r10, r1
     a54:	b1 04       	cpc	r11, r1
     a56:	09 f4       	brne	.+2      	; 0xa5a <Binary_points_to_Decimal_Unsigned+0x3ca>
     a58:	65 c0       	rjmp	.+202    	; 0xb24 <Binary_points_to_Decimal_Unsigned+0x494>
     a5a:	89 51       	subi	r24, 0x19	; 25
     a5c:	91 4f       	sbci	r25, 0xF1	; 241
     a5e:	af 4f       	sbci	r26, 0xFF	; 255
     a60:	bf 4f       	sbci	r27, 0xFF	; 255
     a62:	60 c0       	rjmp	.+192    	; 0xb24 <Binary_points_to_Decimal_Unsigned+0x494>
case 2: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 1907; break;
     a64:	c1 14       	cp	r12, r1
     a66:	d1 04       	cpc	r13, r1
     a68:	09 f4       	brne	.+2      	; 0xa6c <Binary_points_to_Decimal_Unsigned+0x3dc>
     a6a:	5c c0       	rjmp	.+184    	; 0xb24 <Binary_points_to_Decimal_Unsigned+0x494>
     a6c:	8d 58       	subi	r24, 0x8D	; 141
     a6e:	98 4f       	sbci	r25, 0xF8	; 248
     a70:	af 4f       	sbci	r26, 0xFF	; 255
     a72:	bf 4f       	sbci	r27, 0xFF	; 255
     a74:	57 c0       	rjmp	.+174    	; 0xb24 <Binary_points_to_Decimal_Unsigned+0x494>
case 3: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 954; break;
     a76:	e1 14       	cp	r14, r1
     a78:	f1 04       	cpc	r15, r1
     a7a:	09 f4       	brne	.+2      	; 0xa7e <Binary_points_to_Decimal_Unsigned+0x3ee>
     a7c:	53 c0       	rjmp	.+166    	; 0xb24 <Binary_points_to_Decimal_Unsigned+0x494>
     a7e:	86 54       	subi	r24, 0x46	; 70
     a80:	9c 4f       	sbci	r25, 0xFC	; 252
     a82:	af 4f       	sbci	r26, 0xFF	; 255
     a84:	bf 4f       	sbci	r27, 0xFF	; 255
     a86:	4e c0       	rjmp	.+156    	; 0xb24 <Binary_points_to_Decimal_Unsigned+0x494>
case 4: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 477; break;
     a88:	ed 85       	ldd	r30, Y+13	; 0x0d
     a8a:	fe 85       	ldd	r31, Y+14	; 0x0e
     a8c:	ef 2b       	or	r30, r31
     a8e:	09 f4       	brne	.+2      	; 0xa92 <Binary_points_to_Decimal_Unsigned+0x402>
     a90:	49 c0       	rjmp	.+146    	; 0xb24 <Binary_points_to_Decimal_Unsigned+0x494>
     a92:	83 52       	subi	r24, 0x23	; 35
     a94:	9e 4f       	sbci	r25, 0xFE	; 254
     a96:	af 4f       	sbci	r26, 0xFF	; 255
     a98:	bf 4f       	sbci	r27, 0xFF	; 255
     a9a:	44 c0       	rjmp	.+136    	; 0xb24 <Binary_points_to_Decimal_Unsigned+0x494>
case 5: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 238; break;
     a9c:	61 15       	cp	r22, r1
     a9e:	71 05       	cpc	r23, r1
     aa0:	09 f4       	brne	.+2      	; 0xaa4 <Binary_points_to_Decimal_Unsigned+0x414>
     aa2:	40 c0       	rjmp	.+128    	; 0xb24 <Binary_points_to_Decimal_Unsigned+0x494>
     aa4:	82 51       	subi	r24, 0x12	; 18
     aa6:	9f 4f       	sbci	r25, 0xFF	; 255
     aa8:	af 4f       	sbci	r26, 0xFF	; 255
     aaa:	bf 4f       	sbci	r27, 0xFF	; 255
     aac:	3b c0       	rjmp	.+118    	; 0xb24 <Binary_points_to_Decimal_Unsigned+0x494>
case 6: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 119; break;
     aae:	81 14       	cp	r8, r1
     ab0:	91 04       	cpc	r9, r1
     ab2:	c1 f1       	breq	.+112    	; 0xb24 <Binary_points_to_Decimal_Unsigned+0x494>
     ab4:	89 58       	subi	r24, 0x89	; 137
     ab6:	9f 4f       	sbci	r25, 0xFF	; 255
     ab8:	af 4f       	sbci	r26, 0xFF	; 255
     aba:	bf 4f       	sbci	r27, 0xFF	; 255
     abc:	33 c0       	rjmp	.+102    	; 0xb24 <Binary_points_to_Decimal_Unsigned+0x494>
case 7: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 60; break;
     abe:	61 14       	cp	r6, r1
     ac0:	71 04       	cpc	r7, r1
     ac2:	81 f1       	breq	.+96     	; 0xb24 <Binary_points_to_Decimal_Unsigned+0x494>
     ac4:	cc 96       	adiw	r24, 0x3c	; 60
     ac6:	a1 1d       	adc	r26, r1
     ac8:	b1 1d       	adc	r27, r1
     aca:	2c c0       	rjmp	.+88     	; 0xb24 <Binary_points_to_Decimal_Unsigned+0x494>
case 8: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 30; break;
     acc:	41 14       	cp	r4, r1
     ace:	51 04       	cpc	r5, r1
     ad0:	49 f1       	breq	.+82     	; 0xb24 <Binary_points_to_Decimal_Unsigned+0x494>
     ad2:	4e 96       	adiw	r24, 0x1e	; 30
     ad4:	a1 1d       	adc	r26, r1
     ad6:	b1 1d       	adc	r27, r1
     ad8:	25 c0       	rjmp	.+74     	; 0xb24 <Binary_points_to_Decimal_Unsigned+0x494>
case 9: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 15; break;
     ada:	01 15       	cp	r16, r1
     adc:	11 05       	cpc	r17, r1
     ade:	11 f1       	breq	.+68     	; 0xb24 <Binary_points_to_Decimal_Unsigned+0x494>
     ae0:	0f 96       	adiw	r24, 0x0f	; 15
     ae2:	a1 1d       	adc	r26, r1
     ae4:	b1 1d       	adc	r27, r1
     ae6:	1e c0       	rjmp	.+60     	; 0xb24 <Binary_points_to_Decimal_Unsigned+0x494>
case 10: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 7; break;
     ae8:	21 14       	cp	r2, r1
     aea:	31 04       	cpc	r3, r1
     aec:	d9 f0       	breq	.+54     	; 0xb24 <Binary_points_to_Decimal_Unsigned+0x494>
     aee:	07 96       	adiw	r24, 0x07	; 7
     af0:	a1 1d       	adc	r26, r1
     af2:	b1 1d       	adc	r27, r1
     af4:	17 c0       	rjmp	.+46     	; 0xb24 <Binary_points_to_Decimal_Unsigned+0x494>
case 11: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 4; break;
     af6:	e9 85       	ldd	r30, Y+9	; 0x09
     af8:	fa 85       	ldd	r31, Y+10	; 0x0a
     afa:	ef 2b       	or	r30, r31
     afc:	99 f0       	breq	.+38     	; 0xb24 <Binary_points_to_Decimal_Unsigned+0x494>
     afe:	04 96       	adiw	r24, 0x04	; 4
     b00:	a1 1d       	adc	r26, r1
     b02:	b1 1d       	adc	r27, r1
     b04:	0f c0       	rjmp	.+30     	; 0xb24 <Binary_points_to_Decimal_Unsigned+0x494>
case 12: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 2; break;
     b06:	ed 81       	ldd	r30, Y+5	; 0x05
     b08:	fe 81       	ldd	r31, Y+6	; 0x06
     b0a:	ef 2b       	or	r30, r31
     b0c:	59 f0       	breq	.+22     	; 0xb24 <Binary_points_to_Decimal_Unsigned+0x494>
     b0e:	02 96       	adiw	r24, 0x02	; 2
     b10:	a1 1d       	adc	r26, r1
     b12:	b1 1d       	adc	r27, r1
     b14:	07 c0       	rjmp	.+14     	; 0xb24 <Binary_points_to_Decimal_Unsigned+0x494>
case 13: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 1; break;
     b16:	e9 81       	ldd	r30, Y+1	; 0x01
     b18:	fa 81       	ldd	r31, Y+2	; 0x02
     b1a:	ef 2b       	or	r30, r31
     b1c:	19 f0       	breq	.+6      	; 0xb24 <Binary_points_to_Decimal_Unsigned+0x494>
     b1e:	01 96       	adiw	r24, 0x01	; 1
     b20:	a1 1d       	adc	r26, r1
     b22:	b1 1d       	adc	r27, r1
case 11: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 244141; break;
case 12: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 122070; break;
case 13: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 61035; break;
case 14: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 30518; break;
case 15: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 15259; break;}}
for(int n = 0; n <= 15; n++){switch (n){
     b24:	4f 5f       	subi	r20, 0xFF	; 255
     b26:	5f 4f       	sbci	r21, 0xFF	; 255
     b28:	40 31       	cpi	r20, 0x10	; 16
     b2a:	51 05       	cpc	r21, r1
     b2c:	09 f0       	breq	.+2      	; 0xb30 <Binary_points_to_Decimal_Unsigned+0x4a0>
     b2e:	7f cf       	rjmp	.-258    	; 0xa2e <Binary_points_to_Decimal_Unsigned+0x39e>
case 11: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 4; break;
case 12: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 2; break;
case 13: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 1; break;
case 14: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 0; break;
case 15: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 0; break;}}
return RHSofDP;}
     b30:	bc 01       	movw	r22, r24
     b32:	cd 01       	movw	r24, r26
     b34:	e6 96       	adiw	r28, 0x36	; 54
     b36:	0f b6       	in	r0, 0x3f	; 63
     b38:	f8 94       	cli
     b3a:	de bf       	out	0x3e, r29	; 62
     b3c:	0f be       	out	0x3f, r0	; 63
     b3e:	cd bf       	out	0x3d, r28	; 61
     b40:	df 91       	pop	r29
     b42:	cf 91       	pop	r28
     b44:	1f 91       	pop	r17
     b46:	0f 91       	pop	r16
     b48:	ff 90       	pop	r15
     b4a:	ef 90       	pop	r14
     b4c:	df 90       	pop	r13
     b4e:	cf 90       	pop	r12
     b50:	bf 90       	pop	r11
     b52:	af 90       	pop	r10
     b54:	9f 90       	pop	r9
     b56:	8f 90       	pop	r8
     b58:	7f 90       	pop	r7
     b5a:	6f 90       	pop	r6
     b5c:	5f 90       	pop	r5
     b5e:	4f 90       	pop	r4
     b60:	3f 90       	pop	r3
     b62:	2f 90       	pop	r2
     b64:	08 95       	ret

00000b66 <Fraction_to_Binary_Signed>:


/******************************************************************************/
long Fraction_to_Binary_Signed(long rem, long Den){
     b66:	2f 92       	push	r2
     b68:	3f 92       	push	r3
     b6a:	4f 92       	push	r4
     b6c:	5f 92       	push	r5
     b6e:	6f 92       	push	r6
     b70:	7f 92       	push	r7
     b72:	8f 92       	push	r8
     b74:	9f 92       	push	r9
     b76:	af 92       	push	r10
     b78:	bf 92       	push	r11
     b7a:	cf 92       	push	r12
     b7c:	df 92       	push	r13
     b7e:	ef 92       	push	r14
     b80:	ff 92       	push	r15
     b82:	0f 93       	push	r16
     b84:	1f 93       	push	r17
     b86:	cf 93       	push	r28
     b88:	df 93       	push	r29
     b8a:	00 d0       	rcall	.+0      	; 0xb8c <Fraction_to_Binary_Signed+0x26>
     b8c:	1f 92       	push	r1
     b8e:	cd b7       	in	r28, 0x3d	; 61
     b90:	de b7       	in	r29, 0x3e	; 62
     b92:	6b 01       	movw	r12, r22
     b94:	7c 01       	movw	r14, r24
     b96:	49 01       	movw	r8, r18
     b98:	5a 01       	movw	r10, r20
long Result = 0; 						
unsigned int res_LB=0; 
char sign = '+';

if((rem >= -0x40000000) && (rem < 0x40000000) &&
     b9a:	dc 01       	movw	r26, r24
     b9c:	cb 01       	movw	r24, r22
     b9e:	b0 5c       	subi	r27, 0xC0	; 192
     ba0:	b7 fd       	sbrc	r27, 7
     ba2:	05 c0       	rjmp	.+10     	; 0xbae <Fraction_to_Binary_Signed+0x48>
(Den >= -0x40000000) && (Den < 0x40000000));
     ba4:	da 01       	movw	r26, r20
     ba6:	c9 01       	movw	r24, r18
     ba8:	b0 5c       	subi	r27, 0xC0	; 192
     baa:	b7 ff       	sbrs	r27, 7
     bac:	15 c0       	rjmp	.+42     	; 0xbd8 <Fraction_to_Binary_Signed+0x72>
else{rem /= 2; Den /= 2;}
     bae:	42 e0       	ldi	r20, 0x02	; 2
     bb0:	44 2e       	mov	r4, r20
     bb2:	51 2c       	mov	r5, r1
     bb4:	61 2c       	mov	r6, r1
     bb6:	71 2c       	mov	r7, r1
     bb8:	c7 01       	movw	r24, r14
     bba:	b6 01       	movw	r22, r12
     bbc:	a3 01       	movw	r20, r6
     bbe:	92 01       	movw	r18, r4
     bc0:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__divmodsi4>
     bc4:	69 01       	movw	r12, r18
     bc6:	7a 01       	movw	r14, r20
     bc8:	c5 01       	movw	r24, r10
     bca:	b4 01       	movw	r22, r8
     bcc:	a3 01       	movw	r20, r6
     bce:	92 01       	movw	r18, r4
     bd0:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__divmodsi4>
     bd4:	49 01       	movw	r8, r18
     bd6:	5a 01       	movw	r10, r20

if ((rem < 0) || (Den < 0)) sign = '-';
     bd8:	f7 fc       	sbrc	r15, 7
     bda:	05 c0       	rjmp	.+10     	; 0xbe6 <Fraction_to_Binary_Signed+0x80>
     bdc:	b7 fe       	sbrs	r11, 7
     bde:	08 c0       	rjmp	.+16     	; 0xbf0 <Fraction_to_Binary_Signed+0x8a>
     be0:	9d e2       	ldi	r25, 0x2D	; 45
     be2:	99 83       	std	Y+1, r25	; 0x01
     be4:	07 c0       	rjmp	.+14     	; 0xbf4 <Fraction_to_Binary_Signed+0x8e>
if ((rem < 0) && (Den < 0)) sign = '+';
     be6:	b7 fc       	sbrc	r11, 7
     be8:	03 c0       	rjmp	.+6      	; 0xbf0 <Fraction_to_Binary_Signed+0x8a>
     bea:	8d e2       	ldi	r24, 0x2D	; 45
     bec:	89 83       	std	Y+1, r24	; 0x01
     bee:	02 c0       	rjmp	.+4      	; 0xbf4 <Fraction_to_Binary_Signed+0x8e>

/******************************************************************************/
long Fraction_to_Binary_Signed(long rem, long Den){
long Result = 0; 						
unsigned int res_LB=0; 
char sign = '+';
     bf0:	2b e2       	ldi	r18, 0x2B	; 43
     bf2:	29 83       	std	Y+1, r18	; 0x01
     bf4:	8e e0       	ldi	r24, 0x0E	; 14
     bf6:	90 e0       	ldi	r25, 0x00	; 0
     bf8:	9b 83       	std	Y+3, r25	; 0x03
     bfa:	8a 83       	std	Y+2, r24	; 0x02
return RHSofDP;}


/******************************************************************************/
long Fraction_to_Binary_Signed(long rem, long Den){
long Result = 0; 						
     bfc:	41 2c       	mov	r4, r1
     bfe:	51 2c       	mov	r5, r1
     c00:	32 01       	movw	r6, r4

if ((rem < 0) || (Den < 0)) sign = '-';
if ((rem < 0) && (Den < 0)) sign = '+';

for(int n = 1; n <= 15; n++){					//bit 0 is reserved for sign bit
if ((2*(rem))/Den)(Result) |= (1 << (15-n));
     c02:	01 e0       	ldi	r16, 0x01	; 1
     c04:	10 e0       	ldi	r17, 0x00	; 0
     c06:	cc 0c       	add	r12, r12
     c08:	dd 1c       	adc	r13, r13
     c0a:	ee 1c       	adc	r14, r14
     c0c:	ff 1c       	adc	r15, r15
     c0e:	c7 01       	movw	r24, r14
     c10:	b6 01       	movw	r22, r12
     c12:	a5 01       	movw	r20, r10
     c14:	94 01       	movw	r18, r8
     c16:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__divmodsi4>
     c1a:	23 2b       	or	r18, r19
     c1c:	24 2b       	or	r18, r20
     c1e:	25 2b       	or	r18, r21
     c20:	79 f0       	breq	.+30     	; 0xc40 <Fraction_to_Binary_Signed+0xda>
     c22:	c8 01       	movw	r24, r16
     c24:	0a 80       	ldd	r0, Y+2	; 0x02
     c26:	02 c0       	rjmp	.+4      	; 0xc2c <Fraction_to_Binary_Signed+0xc6>
     c28:	88 0f       	add	r24, r24
     c2a:	99 1f       	adc	r25, r25
     c2c:	0a 94       	dec	r0
     c2e:	e2 f7       	brpl	.-8      	; 0xc28 <Fraction_to_Binary_Signed+0xc2>
     c30:	09 2e       	mov	r0, r25
     c32:	00 0c       	add	r0, r0
     c34:	aa 0b       	sbc	r26, r26
     c36:	bb 0b       	sbc	r27, r27
     c38:	48 2a       	or	r4, r24
     c3a:	59 2a       	or	r5, r25
     c3c:	6a 2a       	or	r6, r26
     c3e:	7b 2a       	or	r7, r27
rem = (2*(rem))%Den; }
     c40:	c7 01       	movw	r24, r14
     c42:	b6 01       	movw	r22, r12
     c44:	a5 01       	movw	r20, r10
     c46:	94 01       	movw	r18, r8
     c48:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__divmodsi4>
     c4c:	6b 01       	movw	r12, r22
     c4e:	7c 01       	movw	r14, r24
     c50:	8a 81       	ldd	r24, Y+2	; 0x02
     c52:	9b 81       	ldd	r25, Y+3	; 0x03
     c54:	01 97       	sbiw	r24, 0x01	; 1
     c56:	9b 83       	std	Y+3, r25	; 0x03
     c58:	8a 83       	std	Y+2, r24	; 0x02
else{rem /= 2; Den /= 2;}

if ((rem < 0) || (Den < 0)) sign = '-';
if ((rem < 0) && (Den < 0)) sign = '+';

for(int n = 1; n <= 15; n++){					//bit 0 is reserved for sign bit
     c5a:	01 96       	adiw	r24, 0x01	; 1
     c5c:	a1 f6       	brne	.-88     	; 0xc06 <Fraction_to_Binary_Signed+0xa0>
if ((2*(rem))/Den)(Result) |= (1 << (15-n));
rem = (2*(rem))%Den; }
Result = Result << 16;
     c5e:	32 01       	movw	r6, r4
     c60:	55 24       	eor	r5, r5
     c62:	44 24       	eor	r4, r4
     c64:	8f e0       	ldi	r24, 0x0F	; 15
     c66:	90 e0       	ldi	r25, 0x00	; 0
     c68:	9b 83       	std	Y+3, r25	; 0x03
     c6a:	8a 83       	std	Y+2, r24	; 0x02


/******************************************************************************/
long Fraction_to_Binary_Signed(long rem, long Den){
long Result = 0; 						
unsigned int res_LB=0; 
     c6c:	00 e0       	ldi	r16, 0x00	; 0
     c6e:	10 e0       	ldi	r17, 0x00	; 0
for(int n = 1; n <= 15; n++){					//bit 0 is reserved for sign bit
if ((2*(rem))/Den)(Result) |= (1 << (15-n));
rem = (2*(rem))%Den; }
Result = Result << 16;
for(int n = 0; n <= 15; n++){
if ((2*(rem))/Den)(res_LB) |= (1 << (15-n));
     c70:	22 24       	eor	r2, r2
     c72:	23 94       	inc	r2
     c74:	31 2c       	mov	r3, r1
     c76:	cc 0c       	add	r12, r12
     c78:	dd 1c       	adc	r13, r13
     c7a:	ee 1c       	adc	r14, r14
     c7c:	ff 1c       	adc	r15, r15
     c7e:	c7 01       	movw	r24, r14
     c80:	b6 01       	movw	r22, r12
     c82:	a5 01       	movw	r20, r10
     c84:	94 01       	movw	r18, r8
     c86:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__divmodsi4>
     c8a:	23 2b       	or	r18, r19
     c8c:	24 2b       	or	r18, r20
     c8e:	25 2b       	or	r18, r21
     c90:	49 f0       	breq	.+18     	; 0xca4 <Fraction_to_Binary_Signed+0x13e>
     c92:	c1 01       	movw	r24, r2
     c94:	0a 80       	ldd	r0, Y+2	; 0x02
     c96:	02 c0       	rjmp	.+4      	; 0xc9c <Fraction_to_Binary_Signed+0x136>
     c98:	88 0f       	add	r24, r24
     c9a:	99 1f       	adc	r25, r25
     c9c:	0a 94       	dec	r0
     c9e:	e2 f7       	brpl	.-8      	; 0xc98 <Fraction_to_Binary_Signed+0x132>
     ca0:	08 2b       	or	r16, r24
     ca2:	19 2b       	or	r17, r25
rem = (2*(rem))%Den;}
     ca4:	c7 01       	movw	r24, r14
     ca6:	b6 01       	movw	r22, r12
     ca8:	a5 01       	movw	r20, r10
     caa:	94 01       	movw	r18, r8
     cac:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__divmodsi4>
     cb0:	6b 01       	movw	r12, r22
     cb2:	7c 01       	movw	r14, r24
     cb4:	8a 81       	ldd	r24, Y+2	; 0x02
     cb6:	9b 81       	ldd	r25, Y+3	; 0x03
     cb8:	01 97       	sbiw	r24, 0x01	; 1
     cba:	9b 83       	std	Y+3, r25	; 0x03
     cbc:	8a 83       	std	Y+2, r24	; 0x02

for(int n = 1; n <= 15; n++){					//bit 0 is reserved for sign bit
if ((2*(rem))/Den)(Result) |= (1 << (15-n));
rem = (2*(rem))%Den; }
Result = Result << 16;
for(int n = 0; n <= 15; n++){
     cbe:	01 96       	adiw	r24, 0x01	; 1
     cc0:	d1 f6       	brne	.-76     	; 0xc76 <Fraction_to_Binary_Signed+0x110>
if ((2*(rem))/Den)(res_LB) |= (1 << (15-n));
rem = (2*(rem))%Den;}
Result += res_LB;								//Result is not affected by the signs of rem and Den
     cc2:	c3 01       	movw	r24, r6
     cc4:	b2 01       	movw	r22, r4
     cc6:	60 0f       	add	r22, r16
     cc8:	71 1f       	adc	r23, r17
     cca:	81 1d       	adc	r24, r1
     ccc:	91 1d       	adc	r25, r1
if(sign == '-')Result = ~Result;				//Inverting the sign bit is equivalent to adding -1
     cce:	29 81       	ldd	r18, Y+1	; 0x01
     cd0:	2d 32       	cpi	r18, 0x2D	; 45
     cd2:	21 f4       	brne	.+8      	; 0xcdc <Fraction_to_Binary_Signed+0x176>
     cd4:	60 95       	com	r22
     cd6:	70 95       	com	r23
     cd8:	80 95       	com	r24
     cda:	90 95       	com	r25
return Result;}
     cdc:	0f 90       	pop	r0
     cde:	0f 90       	pop	r0
     ce0:	0f 90       	pop	r0
     ce2:	df 91       	pop	r29
     ce4:	cf 91       	pop	r28
     ce6:	1f 91       	pop	r17
     ce8:	0f 91       	pop	r16
     cea:	ff 90       	pop	r15
     cec:	ef 90       	pop	r14
     cee:	df 90       	pop	r13
     cf0:	cf 90       	pop	r12
     cf2:	bf 90       	pop	r11
     cf4:	af 90       	pop	r10
     cf6:	9f 90       	pop	r9
     cf8:	8f 90       	pop	r8
     cfa:	7f 90       	pop	r7
     cfc:	6f 90       	pop	r6
     cfe:	5f 90       	pop	r5
     d00:	4f 90       	pop	r4
     d02:	3f 90       	pop	r3
     d04:	2f 90       	pop	r2
     d06:	08 95       	ret

00000d08 <Binary_points_to_Decimal_Signed>:


/******************************************************************************/
long Binary_points_to_Decimal_Signed (long RHSofBP)
{long  RHSofDP=0;
     d08:	2f 92       	push	r2
     d0a:	3f 92       	push	r3
     d0c:	4f 92       	push	r4
     d0e:	5f 92       	push	r5
     d10:	6f 92       	push	r6
     d12:	7f 92       	push	r7
     d14:	8f 92       	push	r8
     d16:	9f 92       	push	r9
     d18:	af 92       	push	r10
     d1a:	bf 92       	push	r11
     d1c:	cf 92       	push	r12
     d1e:	df 92       	push	r13
     d20:	ef 92       	push	r14
     d22:	ff 92       	push	r15
     d24:	0f 93       	push	r16
     d26:	1f 93       	push	r17
     d28:	cf 93       	push	r28
     d2a:	df 93       	push	r29
     d2c:	cd b7       	in	r28, 0x3d	; 61
     d2e:	de b7       	in	r29, 0x3e	; 62
     d30:	e6 97       	sbiw	r28, 0x36	; 54
     d32:	0f b6       	in	r0, 0x3f	; 63
     d34:	f8 94       	cli
     d36:	de bf       	out	0x3e, r29	; 62
     d38:	0f be       	out	0x3f, r0	; 63
     d3a:	cd bf       	out	0x3d, r28	; 61
unsigned int RHSofBP_LB;
RHSofBP_LB = RHSofBP;
     d3c:	9b 01       	movw	r18, r22
case 10: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 976563; break;
case 11: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 488281; break;
case 12: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 244141; break;
case 13: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 122070; break;
case 14: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 61035; break;
case 15: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 30518; break;}}
     d3e:	ac 01       	movw	r20, r24
     d40:	77 27       	eor	r23, r23
     d42:	57 fd       	sbrc	r21, 7
     d44:	70 95       	com	r23
     d46:	67 2f       	mov	r22, r23
     d48:	db 01       	movw	r26, r22
     d4a:	ca 01       	movw	r24, r20
     d4c:	81 70       	andi	r24, 0x01	; 1
     d4e:	99 27       	eor	r25, r25
     d50:	aa 27       	eor	r26, r26
     d52:	bb 27       	eor	r27, r27
     d54:	8d a7       	std	Y+45, r24	; 0x2d
     d56:	9e a7       	std	Y+46, r25	; 0x2e
     d58:	af a7       	std	Y+47, r26	; 0x2f
     d5a:	b8 ab       	std	Y+48, r27	; 0x30
{long  RHSofDP=0;
unsigned int RHSofBP_LB;
RHSofBP_LB = RHSofBP;

for(int n = 0; n <= 15; n++){switch(n){						//bit zero is sign bit
case 0: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP -= 1000000000; break;
     d5c:	db 01       	movw	r26, r22
     d5e:	ca 01       	movw	r24, r20
     d60:	88 27       	eor	r24, r24
     d62:	90 78       	andi	r25, 0x80	; 128
     d64:	89 83       	std	Y+1, r24	; 0x01
     d66:	9a 83       	std	Y+2, r25	; 0x02
     d68:	ab 83       	std	Y+3, r26	; 0x03
     d6a:	bc 83       	std	Y+4, r27	; 0x04
case 1: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 500000000; break;
     d6c:	db 01       	movw	r26, r22
     d6e:	ca 01       	movw	r24, r20
     d70:	88 27       	eor	r24, r24
     d72:	90 74       	andi	r25, 0x40	; 64
     d74:	aa 27       	eor	r26, r26
     d76:	bb 27       	eor	r27, r27
     d78:	8d 83       	std	Y+5, r24	; 0x05
     d7a:	9e 83       	std	Y+6, r25	; 0x06
     d7c:	af 83       	std	Y+7, r26	; 0x07
     d7e:	b8 87       	std	Y+8, r27	; 0x08
case 2: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 250000000; break;
     d80:	db 01       	movw	r26, r22
     d82:	ca 01       	movw	r24, r20
     d84:	88 27       	eor	r24, r24
     d86:	90 72       	andi	r25, 0x20	; 32
     d88:	aa 27       	eor	r26, r26
     d8a:	bb 27       	eor	r27, r27
     d8c:	89 87       	std	Y+9, r24	; 0x09
     d8e:	9a 87       	std	Y+10, r25	; 0x0a
     d90:	ab 87       	std	Y+11, r26	; 0x0b
     d92:	bc 87       	std	Y+12, r27	; 0x0c
case 3: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 125000000; break;
     d94:	db 01       	movw	r26, r22
     d96:	ca 01       	movw	r24, r20
     d98:	88 27       	eor	r24, r24
     d9a:	90 71       	andi	r25, 0x10	; 16
     d9c:	aa 27       	eor	r26, r26
     d9e:	bb 27       	eor	r27, r27
     da0:	8d 87       	std	Y+13, r24	; 0x0d
     da2:	9e 87       	std	Y+14, r25	; 0x0e
     da4:	af 87       	std	Y+15, r26	; 0x0f
     da6:	b8 8b       	std	Y+16, r27	; 0x10
case 4: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 62500000; break;
     da8:	db 01       	movw	r26, r22
     daa:	ca 01       	movw	r24, r20
     dac:	88 27       	eor	r24, r24
     dae:	98 70       	andi	r25, 0x08	; 8
     db0:	aa 27       	eor	r26, r26
     db2:	bb 27       	eor	r27, r27
     db4:	89 8b       	std	Y+17, r24	; 0x11
     db6:	9a 8b       	std	Y+18, r25	; 0x12
     db8:	ab 8b       	std	Y+19, r26	; 0x13
     dba:	bc 8b       	std	Y+20, r27	; 0x14
case 5: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 31250000; break;
     dbc:	db 01       	movw	r26, r22
     dbe:	ca 01       	movw	r24, r20
     dc0:	88 27       	eor	r24, r24
     dc2:	94 70       	andi	r25, 0x04	; 4
     dc4:	aa 27       	eor	r26, r26
     dc6:	bb 27       	eor	r27, r27
     dc8:	8d 8b       	std	Y+21, r24	; 0x15
     dca:	9e 8b       	std	Y+22, r25	; 0x16
     dcc:	af 8b       	std	Y+23, r26	; 0x17
     dce:	b8 8f       	std	Y+24, r27	; 0x18
case 6: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 15625000; break;
     dd0:	db 01       	movw	r26, r22
     dd2:	ca 01       	movw	r24, r20
     dd4:	88 27       	eor	r24, r24
     dd6:	92 70       	andi	r25, 0x02	; 2
     dd8:	aa 27       	eor	r26, r26
     dda:	bb 27       	eor	r27, r27
     ddc:	89 8f       	std	Y+25, r24	; 0x19
     dde:	9a 8f       	std	Y+26, r25	; 0x1a
     de0:	ab 8f       	std	Y+27, r26	; 0x1b
     de2:	bc 8f       	std	Y+28, r27	; 0x1c
case 7: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 7812500; break;
     de4:	db 01       	movw	r26, r22
     de6:	ca 01       	movw	r24, r20
     de8:	88 27       	eor	r24, r24
     dea:	91 70       	andi	r25, 0x01	; 1
     dec:	aa 27       	eor	r26, r26
     dee:	bb 27       	eor	r27, r27
     df0:	8d 8f       	std	Y+29, r24	; 0x1d
     df2:	9e 8f       	std	Y+30, r25	; 0x1e
     df4:	af 8f       	std	Y+31, r26	; 0x1f
     df6:	b8 a3       	std	Y+32, r27	; 0x20
case 8: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 3906250; break;
     df8:	db 01       	movw	r26, r22
     dfa:	ca 01       	movw	r24, r20
     dfc:	80 78       	andi	r24, 0x80	; 128
     dfe:	99 27       	eor	r25, r25
     e00:	aa 27       	eor	r26, r26
     e02:	bb 27       	eor	r27, r27
     e04:	89 a3       	std	Y+33, r24	; 0x21
     e06:	9a a3       	std	Y+34, r25	; 0x22
     e08:	ab a3       	std	Y+35, r26	; 0x23
     e0a:	bc a3       	std	Y+36, r27	; 0x24
case 9: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 1953125; break;
     e0c:	db 01       	movw	r26, r22
     e0e:	ca 01       	movw	r24, r20
     e10:	80 74       	andi	r24, 0x40	; 64
     e12:	99 27       	eor	r25, r25
     e14:	aa 27       	eor	r26, r26
     e16:	bb 27       	eor	r27, r27
     e18:	8d a3       	std	Y+37, r24	; 0x25
     e1a:	9e a3       	std	Y+38, r25	; 0x26
     e1c:	af a3       	std	Y+39, r26	; 0x27
     e1e:	b8 a7       	std	Y+40, r27	; 0x28
case 10: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 976563; break;
     e20:	db 01       	movw	r26, r22
     e22:	ca 01       	movw	r24, r20
     e24:	80 72       	andi	r24, 0x20	; 32
     e26:	99 27       	eor	r25, r25
     e28:	aa 27       	eor	r26, r26
     e2a:	bb 27       	eor	r27, r27
     e2c:	89 a7       	std	Y+41, r24	; 0x29
     e2e:	9a a7       	std	Y+42, r25	; 0x2a
     e30:	ab a7       	std	Y+43, r26	; 0x2b
     e32:	bc a7       	std	Y+44, r27	; 0x2c
case 11: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 488281; break;
     e34:	db 01       	movw	r26, r22
     e36:	ca 01       	movw	r24, r20
     e38:	80 71       	andi	r24, 0x10	; 16
     e3a:	99 27       	eor	r25, r25
     e3c:	aa 27       	eor	r26, r26
     e3e:	bb 27       	eor	r27, r27
     e40:	8b ab       	std	Y+51, r24	; 0x33
     e42:	9c ab       	std	Y+52, r25	; 0x34
     e44:	ad ab       	std	Y+53, r26	; 0x35
     e46:	be ab       	std	Y+54, r27	; 0x36
case 12: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 244141; break;
     e48:	4a 01       	movw	r8, r20
     e4a:	5b 01       	movw	r10, r22
     e4c:	98 e0       	ldi	r25, 0x08	; 8
     e4e:	89 22       	and	r8, r25
     e50:	99 24       	eor	r9, r9
     e52:	aa 24       	eor	r10, r10
     e54:	bb 24       	eor	r11, r11
case 13: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 122070; break;
     e56:	2a 01       	movw	r4, r20
     e58:	3b 01       	movw	r6, r22
     e5a:	a4 e0       	ldi	r26, 0x04	; 4
     e5c:	4a 22       	and	r4, r26
     e5e:	55 24       	eor	r5, r5
     e60:	66 24       	eor	r6, r6
     e62:	77 24       	eor	r7, r7
case 14: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 61035; break;
     e64:	42 70       	andi	r20, 0x02	; 2
     e66:	55 27       	eor	r21, r21
     e68:	66 27       	eor	r22, r22
     e6a:	77 27       	eor	r23, r23
long Binary_points_to_Decimal_Signed (long RHSofBP)
{long  RHSofDP=0;
unsigned int RHSofBP_LB;
RHSofBP_LB = RHSofBP;

for(int n = 0; n <= 15; n++){switch(n){						//bit zero is sign bit
     e6c:	c1 2c       	mov	r12, r1
     e6e:	d1 2c       	mov	r13, r1
return Result;}


/******************************************************************************/
long Binary_points_to_Decimal_Signed (long RHSofBP)
{long  RHSofDP=0;
     e70:	80 e0       	ldi	r24, 0x00	; 0
     e72:	90 e0       	ldi	r25, 0x00	; 0
     e74:	dc 01       	movw	r26, r24
unsigned int RHSofBP_LB;
RHSofBP_LB = RHSofBP;

for(int n = 0; n <= 15; n++){switch(n){						//bit zero is sign bit
     e76:	f6 01       	movw	r30, r12
     e78:	31 97       	sbiw	r30, 0x01	; 1
     e7a:	ef 30       	cpi	r30, 0x0F	; 15
     e7c:	f1 05       	cpc	r31, r1
     e7e:	20 f4       	brcc	.+8      	; 0xe88 <Binary_points_to_Decimal_Signed+0x180>
     e80:	ef 5a       	subi	r30, 0xAF	; 175
     e82:	ff 4f       	sbci	r31, 0xFF	; 255
     e84:	0c 94 72 10 	jmp	0x20e4	; 0x20e4 <__tablejump2__>
case 0: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP -= 1000000000; break;
     e88:	e9 80       	ldd	r14, Y+1	; 0x01
     e8a:	fa 80       	ldd	r15, Y+2	; 0x02
     e8c:	0b 81       	ldd	r16, Y+3	; 0x03
     e8e:	1c 81       	ldd	r17, Y+4	; 0x04
     e90:	ef 28       	or	r14, r15
     e92:	e0 2a       	or	r14, r16
     e94:	e1 2a       	or	r14, r17
     e96:	09 f4       	brne	.+2      	; 0xe9a <Binary_points_to_Decimal_Signed+0x192>
     e98:	c5 c0       	rjmp	.+394    	; 0x1024 <Binary_points_to_Decimal_Signed+0x31c>
     e9a:	9a 5c       	subi	r25, 0xCA	; 202
     e9c:	aa 49       	sbci	r26, 0x9A	; 154
     e9e:	bb 43       	sbci	r27, 0x3B	; 59
     ea0:	c1 c0       	rjmp	.+386    	; 0x1024 <Binary_points_to_Decimal_Signed+0x31c>
case 1: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 500000000; break;
     ea2:	ed 80       	ldd	r14, Y+5	; 0x05
     ea4:	fe 80       	ldd	r15, Y+6	; 0x06
     ea6:	0f 81       	ldd	r16, Y+7	; 0x07
     ea8:	18 85       	ldd	r17, Y+8	; 0x08
     eaa:	ef 28       	or	r14, r15
     eac:	e0 2a       	or	r14, r16
     eae:	e1 2a       	or	r14, r17
     eb0:	09 f4       	brne	.+2      	; 0xeb4 <Binary_points_to_Decimal_Signed+0x1ac>
     eb2:	b8 c0       	rjmp	.+368    	; 0x1024 <Binary_points_to_Decimal_Signed+0x31c>
     eb4:	9b 59       	subi	r25, 0x9B	; 155
     eb6:	a2 43       	sbci	r26, 0x32	; 50
     eb8:	b2 4e       	sbci	r27, 0xE2	; 226
     eba:	b4 c0       	rjmp	.+360    	; 0x1024 <Binary_points_to_Decimal_Signed+0x31c>
case 2: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 250000000; break;
     ebc:	e9 84       	ldd	r14, Y+9	; 0x09
     ebe:	fa 84       	ldd	r15, Y+10	; 0x0a
     ec0:	0b 85       	ldd	r16, Y+11	; 0x0b
     ec2:	1c 85       	ldd	r17, Y+12	; 0x0c
     ec4:	ef 28       	or	r14, r15
     ec6:	e0 2a       	or	r14, r16
     ec8:	e1 2a       	or	r14, r17
     eca:	09 f4       	brne	.+2      	; 0xece <Binary_points_to_Decimal_Signed+0x1c6>
     ecc:	ab c0       	rjmp	.+342    	; 0x1024 <Binary_points_to_Decimal_Signed+0x31c>
     ece:	80 58       	subi	r24, 0x80	; 128
     ed0:	9d 44       	sbci	r25, 0x4D	; 77
     ed2:	a9 41       	sbci	r26, 0x19	; 25
     ed4:	b1 4f       	sbci	r27, 0xF1	; 241
     ed6:	a6 c0       	rjmp	.+332    	; 0x1024 <Binary_points_to_Decimal_Signed+0x31c>
case 3: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 125000000; break;
     ed8:	ed 84       	ldd	r14, Y+13	; 0x0d
     eda:	fe 84       	ldd	r15, Y+14	; 0x0e
     edc:	0f 85       	ldd	r16, Y+15	; 0x0f
     ede:	18 89       	ldd	r17, Y+16	; 0x10
     ee0:	ef 28       	or	r14, r15
     ee2:	e0 2a       	or	r14, r16
     ee4:	e1 2a       	or	r14, r17
     ee6:	09 f4       	brne	.+2      	; 0xeea <Binary_points_to_Decimal_Signed+0x1e2>
     ee8:	9d c0       	rjmp	.+314    	; 0x1024 <Binary_points_to_Decimal_Signed+0x31c>
     eea:	80 5c       	subi	r24, 0xC0	; 192
     eec:	96 4a       	sbci	r25, 0xA6	; 166
     eee:	ac 48       	sbci	r26, 0x8C	; 140
     ef0:	b8 4f       	sbci	r27, 0xF8	; 248
     ef2:	98 c0       	rjmp	.+304    	; 0x1024 <Binary_points_to_Decimal_Signed+0x31c>
case 4: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 62500000; break;
     ef4:	e9 88       	ldd	r14, Y+17	; 0x11
     ef6:	fa 88       	ldd	r15, Y+18	; 0x12
     ef8:	0b 89       	ldd	r16, Y+19	; 0x13
     efa:	1c 89       	ldd	r17, Y+20	; 0x14
     efc:	ef 28       	or	r14, r15
     efe:	e0 2a       	or	r14, r16
     f00:	e1 2a       	or	r14, r17
     f02:	09 f4       	brne	.+2      	; 0xf06 <Binary_points_to_Decimal_Signed+0x1fe>
     f04:	8f c0       	rjmp	.+286    	; 0x1024 <Binary_points_to_Decimal_Signed+0x31c>
     f06:	80 56       	subi	r24, 0x60	; 96
     f08:	93 45       	sbci	r25, 0x53	; 83
     f0a:	a6 44       	sbci	r26, 0x46	; 70
     f0c:	bc 4f       	sbci	r27, 0xFC	; 252
     f0e:	8a c0       	rjmp	.+276    	; 0x1024 <Binary_points_to_Decimal_Signed+0x31c>
case 5: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 31250000; break;
     f10:	ed 88       	ldd	r14, Y+21	; 0x15
     f12:	fe 88       	ldd	r15, Y+22	; 0x16
     f14:	0f 89       	ldd	r16, Y+23	; 0x17
     f16:	18 8d       	ldd	r17, Y+24	; 0x18
     f18:	ef 28       	or	r14, r15
     f1a:	e0 2a       	or	r14, r16
     f1c:	e1 2a       	or	r14, r17
     f1e:	09 f4       	brne	.+2      	; 0xf22 <Binary_points_to_Decimal_Signed+0x21a>
     f20:	81 c0       	rjmp	.+258    	; 0x1024 <Binary_points_to_Decimal_Signed+0x31c>
     f22:	80 5b       	subi	r24, 0xB0	; 176
     f24:	99 42       	sbci	r25, 0x29	; 41
     f26:	a3 42       	sbci	r26, 0x23	; 35
     f28:	be 4f       	sbci	r27, 0xFE	; 254
     f2a:	7c c0       	rjmp	.+248    	; 0x1024 <Binary_points_to_Decimal_Signed+0x31c>
case 6: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 15625000; break;
     f2c:	e9 8c       	ldd	r14, Y+25	; 0x19
     f2e:	fa 8c       	ldd	r15, Y+26	; 0x1a
     f30:	0b 8d       	ldd	r16, Y+27	; 0x1b
     f32:	1c 8d       	ldd	r17, Y+28	; 0x1c
     f34:	ef 28       	or	r14, r15
     f36:	e0 2a       	or	r14, r16
     f38:	e1 2a       	or	r14, r17
     f3a:	09 f4       	brne	.+2      	; 0xf3e <Binary_points_to_Decimal_Signed+0x236>
     f3c:	73 c0       	rjmp	.+230    	; 0x1024 <Binary_points_to_Decimal_Signed+0x31c>
     f3e:	88 5d       	subi	r24, 0xD8	; 216
     f40:	94 49       	sbci	r25, 0x94	; 148
     f42:	a1 41       	sbci	r26, 0x11	; 17
     f44:	bf 4f       	sbci	r27, 0xFF	; 255
     f46:	6e c0       	rjmp	.+220    	; 0x1024 <Binary_points_to_Decimal_Signed+0x31c>
case 7: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 7812500; break;
     f48:	ed 8c       	ldd	r14, Y+29	; 0x1d
     f4a:	fe 8c       	ldd	r15, Y+30	; 0x1e
     f4c:	0f 8d       	ldd	r16, Y+31	; 0x1f
     f4e:	18 a1       	ldd	r17, Y+32	; 0x20
     f50:	ef 28       	or	r14, r15
     f52:	e0 2a       	or	r14, r16
     f54:	e1 2a       	or	r14, r17
     f56:	09 f4       	brne	.+2      	; 0xf5a <Binary_points_to_Decimal_Signed+0x252>
     f58:	65 c0       	rjmp	.+202    	; 0x1024 <Binary_points_to_Decimal_Signed+0x31c>
     f5a:	8c 56       	subi	r24, 0x6C	; 108
     f5c:	9a 4c       	sbci	r25, 0xCA	; 202
     f5e:	a8 48       	sbci	r26, 0x88	; 136
     f60:	bf 4f       	sbci	r27, 0xFF	; 255
     f62:	60 c0       	rjmp	.+192    	; 0x1024 <Binary_points_to_Decimal_Signed+0x31c>
case 8: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 3906250; break;
     f64:	e9 a0       	ldd	r14, Y+33	; 0x21
     f66:	fa a0       	ldd	r15, Y+34	; 0x22
     f68:	0b a1       	ldd	r16, Y+35	; 0x23
     f6a:	1c a1       	ldd	r17, Y+36	; 0x24
     f6c:	ef 28       	or	r14, r15
     f6e:	e0 2a       	or	r14, r16
     f70:	e1 2a       	or	r14, r17
     f72:	09 f4       	brne	.+2      	; 0xf76 <Binary_points_to_Decimal_Signed+0x26e>
     f74:	57 c0       	rjmp	.+174    	; 0x1024 <Binary_points_to_Decimal_Signed+0x31c>
     f76:	86 53       	subi	r24, 0x36	; 54
     f78:	95 46       	sbci	r25, 0x65	; 101
     f7a:	a4 4c       	sbci	r26, 0xC4	; 196
     f7c:	bf 4f       	sbci	r27, 0xFF	; 255
     f7e:	52 c0       	rjmp	.+164    	; 0x1024 <Binary_points_to_Decimal_Signed+0x31c>
case 9: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 1953125; break;
     f80:	ed a0       	ldd	r14, Y+37	; 0x25
     f82:	fe a0       	ldd	r15, Y+38	; 0x26
     f84:	0f a1       	ldd	r16, Y+39	; 0x27
     f86:	18 a5       	ldd	r17, Y+40	; 0x28
     f88:	ef 28       	or	r14, r15
     f8a:	e0 2a       	or	r14, r16
     f8c:	e1 2a       	or	r14, r17
     f8e:	09 f4       	brne	.+2      	; 0xf92 <Binary_points_to_Decimal_Signed+0x28a>
     f90:	49 c0       	rjmp	.+146    	; 0x1024 <Binary_points_to_Decimal_Signed+0x31c>
     f92:	8b 59       	subi	r24, 0x9B	; 155
     f94:	92 43       	sbci	r25, 0x32	; 50
     f96:	a2 4e       	sbci	r26, 0xE2	; 226
     f98:	bf 4f       	sbci	r27, 0xFF	; 255
     f9a:	44 c0       	rjmp	.+136    	; 0x1024 <Binary_points_to_Decimal_Signed+0x31c>
case 10: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 976563; break;
     f9c:	e9 a4       	ldd	r14, Y+41	; 0x29
     f9e:	fa a4       	ldd	r15, Y+42	; 0x2a
     fa0:	0b a5       	ldd	r16, Y+43	; 0x2b
     fa2:	1c a5       	ldd	r17, Y+44	; 0x2c
     fa4:	ef 28       	or	r14, r15
     fa6:	e0 2a       	or	r14, r16
     fa8:	e1 2a       	or	r14, r17
     faa:	e1 f1       	breq	.+120    	; 0x1024 <Binary_points_to_Decimal_Signed+0x31c>
     fac:	8d 54       	subi	r24, 0x4D	; 77
     fae:	99 41       	sbci	r25, 0x19	; 25
     fb0:	a1 4f       	sbci	r26, 0xF1	; 241
     fb2:	bf 4f       	sbci	r27, 0xFF	; 255
     fb4:	37 c0       	rjmp	.+110    	; 0x1024 <Binary_points_to_Decimal_Signed+0x31c>
case 11: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 488281; break;
     fb6:	eb a8       	ldd	r14, Y+51	; 0x33
     fb8:	fc a8       	ldd	r15, Y+52	; 0x34
     fba:	0d a9       	ldd	r16, Y+53	; 0x35
     fbc:	1e a9       	ldd	r17, Y+54	; 0x36
     fbe:	ef 28       	or	r14, r15
     fc0:	e0 2a       	or	r14, r16
     fc2:	e1 2a       	or	r14, r17
     fc4:	79 f1       	breq	.+94     	; 0x1024 <Binary_points_to_Decimal_Signed+0x31c>
     fc6:	87 5a       	subi	r24, 0xA7	; 167
     fc8:	9c 48       	sbci	r25, 0x8C	; 140
     fca:	a8 4f       	sbci	r26, 0xF8	; 248
     fcc:	bf 4f       	sbci	r27, 0xFF	; 255
     fce:	2a c0       	rjmp	.+84     	; 0x1024 <Binary_points_to_Decimal_Signed+0x31c>
case 12: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 244141; break;
     fd0:	81 14       	cp	r8, r1
     fd2:	91 04       	cpc	r9, r1
     fd4:	a1 04       	cpc	r10, r1
     fd6:	b1 04       	cpc	r11, r1
     fd8:	29 f1       	breq	.+74     	; 0x1024 <Binary_points_to_Decimal_Signed+0x31c>
     fda:	83 55       	subi	r24, 0x53	; 83
     fdc:	96 44       	sbci	r25, 0x46	; 70
     fde:	ac 4f       	sbci	r26, 0xFC	; 252
     fe0:	bf 4f       	sbci	r27, 0xFF	; 255
     fe2:	20 c0       	rjmp	.+64     	; 0x1024 <Binary_points_to_Decimal_Signed+0x31c>
case 13: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 122070; break;
     fe4:	41 14       	cp	r4, r1
     fe6:	51 04       	cpc	r5, r1
     fe8:	61 04       	cpc	r6, r1
     fea:	71 04       	cpc	r7, r1
     fec:	d9 f0       	breq	.+54     	; 0x1024 <Binary_points_to_Decimal_Signed+0x31c>
     fee:	8a 52       	subi	r24, 0x2A	; 42
     ff0:	93 42       	sbci	r25, 0x23	; 35
     ff2:	ae 4f       	sbci	r26, 0xFE	; 254
     ff4:	bf 4f       	sbci	r27, 0xFF	; 255
     ff6:	16 c0       	rjmp	.+44     	; 0x1024 <Binary_points_to_Decimal_Signed+0x31c>
case 14: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 61035; break;
     ff8:	41 15       	cp	r20, r1
     ffa:	51 05       	cpc	r21, r1
     ffc:	61 05       	cpc	r22, r1
     ffe:	71 05       	cpc	r23, r1
    1000:	89 f0       	breq	.+34     	; 0x1024 <Binary_points_to_Decimal_Signed+0x31c>
    1002:	85 59       	subi	r24, 0x95	; 149
    1004:	91 41       	sbci	r25, 0x11	; 17
    1006:	af 4f       	sbci	r26, 0xFF	; 255
    1008:	bf 4f       	sbci	r27, 0xFF	; 255
    100a:	0c c0       	rjmp	.+24     	; 0x1024 <Binary_points_to_Decimal_Signed+0x31c>
case 15: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 30518; break;}}
    100c:	ed a4       	ldd	r14, Y+45	; 0x2d
    100e:	fe a4       	ldd	r15, Y+46	; 0x2e
    1010:	0f a5       	ldd	r16, Y+47	; 0x2f
    1012:	18 a9       	ldd	r17, Y+48	; 0x30
    1014:	ef 28       	or	r14, r15
    1016:	e0 2a       	or	r14, r16
    1018:	e1 2a       	or	r14, r17
    101a:	21 f0       	breq	.+8      	; 0x1024 <Binary_points_to_Decimal_Signed+0x31c>
    101c:	8a 5c       	subi	r24, 0xCA	; 202
    101e:	98 48       	sbci	r25, 0x88	; 136
    1020:	af 4f       	sbci	r26, 0xFF	; 255
    1022:	bf 4f       	sbci	r27, 0xFF	; 255
long Binary_points_to_Decimal_Signed (long RHSofBP)
{long  RHSofDP=0;
unsigned int RHSofBP_LB;
RHSofBP_LB = RHSofBP;

for(int n = 0; n <= 15; n++){switch(n){						//bit zero is sign bit
    1024:	0f ef       	ldi	r16, 0xFF	; 255
    1026:	c0 1a       	sub	r12, r16
    1028:	d0 0a       	sbc	r13, r16
    102a:	10 e1       	ldi	r17, 0x10	; 16
    102c:	c1 16       	cp	r12, r17
    102e:	d1 04       	cpc	r13, r1
    1030:	09 f0       	breq	.+2      	; 0x1034 <Binary_points_to_Decimal_Signed+0x32c>
    1032:	21 cf       	rjmp	.-446    	; 0xe76 <Binary_points_to_Decimal_Signed+0x16e>
    1034:	40 e0       	ldi	r20, 0x00	; 0
    1036:	50 e0       	ldi	r21, 0x00	; 0
case 9: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 30; break;
case 10: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 15; break;
case 11: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 7; break;
case 12: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 4; break;
case 13: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 2; break;
case 14: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 1; break;
    1038:	b9 01       	movw	r22, r18
    103a:	62 70       	andi	r22, 0x02	; 2
    103c:	77 27       	eor	r23, r23
    103e:	7a 83       	std	Y+2, r23	; 0x02
    1040:	69 83       	std	Y+1, r22	; 0x01
case 8: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 60; break;
case 9: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 30; break;
case 10: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 15; break;
case 11: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 7; break;
case 12: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 4; break;
case 13: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 2; break;
    1042:	89 01       	movw	r16, r18
    1044:	04 70       	andi	r16, 0x04	; 4
    1046:	11 27       	eor	r17, r17
    1048:	1e 83       	std	Y+6, r17	; 0x06
    104a:	0d 83       	std	Y+5, r16	; 0x05
case 7: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 119; break;
case 8: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 60; break;
case 9: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 30; break;
case 10: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 15; break;
case 11: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 7; break;
case 12: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 4; break;
    104c:	b9 01       	movw	r22, r18
    104e:	68 70       	andi	r22, 0x08	; 8
    1050:	77 27       	eor	r23, r23
    1052:	7a 87       	std	Y+10, r23	; 0x0a
    1054:	69 87       	std	Y+9, r22	; 0x09
case 6: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 238; break;
case 7: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 119; break;
case 8: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 60; break;
case 9: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 30; break;
case 10: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 15; break;
case 11: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 7; break;
    1056:	89 01       	movw	r16, r18
    1058:	00 71       	andi	r16, 0x10	; 16
    105a:	11 27       	eor	r17, r17
    105c:	1e 87       	std	Y+14, r17	; 0x0e
    105e:	0d 87       	std	Y+13, r16	; 0x0d
case 5: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 477; break;
case 6: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 238; break;
case 7: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 119; break;
case 8: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 60; break;
case 9: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 30; break;
case 10: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 15; break;
    1060:	19 01       	movw	r2, r18
    1062:	10 e2       	ldi	r17, 0x20	; 32
    1064:	21 22       	and	r2, r17
    1066:	33 24       	eor	r3, r3
case 4: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 954; break;
case 5: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 477; break;
case 6: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 238; break;
case 7: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 119; break;
case 8: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 60; break;
case 9: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 30; break;
    1068:	89 01       	movw	r16, r18
    106a:	00 74       	andi	r16, 0x40	; 64
    106c:	11 27       	eor	r17, r17
case 3: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 1907; break;
case 4: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 954; break;
case 5: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 477; break;
case 6: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 238; break;
case 7: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 119; break;
case 8: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 60; break;
    106e:	29 01       	movw	r4, r18
    1070:	60 e8       	ldi	r22, 0x80	; 128
    1072:	46 22       	and	r4, r22
    1074:	55 24       	eor	r5, r5
case 2: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 3815; break;
case 3: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 1907; break;
case 4: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 954; break;
case 5: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 477; break;
case 6: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 238; break;
case 7: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 119; break;
    1076:	39 01       	movw	r6, r18
    1078:	66 24       	eor	r6, r6
    107a:	71 e0       	ldi	r23, 0x01	; 1
    107c:	77 22       	and	r7, r23
case 1: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 7629; break;
case 2: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 3815; break;
case 3: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 1907; break;
case 4: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 954; break;
case 5: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 477; break;
case 6: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 238; break;
    107e:	49 01       	movw	r8, r18
    1080:	88 24       	eor	r8, r8
    1082:	e2 e0       	ldi	r30, 0x02	; 2
    1084:	9e 22       	and	r9, r30
case 0: if (RHSofBP_LB & (1 << (15-n)))RHSofDP +=  15259; break;
case 1: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 7629; break;
case 2: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 3815; break;
case 3: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 1907; break;
case 4: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 954; break;
case 5: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 477; break;
    1086:	b9 01       	movw	r22, r18
    1088:	66 27       	eor	r22, r22
    108a:	74 70       	andi	r23, 0x04	; 4
for(int n = 0; n <= 15; n++){switch (n){
case 0: if (RHSofBP_LB & (1 << (15-n)))RHSofDP +=  15259; break;
case 1: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 7629; break;
case 2: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 3815; break;
case 3: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 1907; break;
case 4: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 954; break;
    108c:	f9 01       	movw	r30, r18
    108e:	ee 27       	eor	r30, r30
    1090:	f8 70       	andi	r31, 0x08	; 8
    1092:	fa 8b       	std	Y+18, r31	; 0x12
    1094:	e9 8b       	std	Y+17, r30	; 0x11
case 15: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 30518; break;}}
for(int n = 0; n <= 15; n++){switch (n){
case 0: if (RHSofBP_LB & (1 << (15-n)))RHSofDP +=  15259; break;
case 1: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 7629; break;
case 2: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 3815; break;
case 3: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 1907; break;
    1096:	79 01       	movw	r14, r18
    1098:	ee 24       	eor	r14, r14
    109a:	f0 e1       	ldi	r31, 0x10	; 16
    109c:	ff 22       	and	r15, r31
case 14: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 61035; break;
case 15: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 30518; break;}}
for(int n = 0; n <= 15; n++){switch (n){
case 0: if (RHSofBP_LB & (1 << (15-n)))RHSofDP +=  15259; break;
case 1: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 7629; break;
case 2: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 3815; break;
    109e:	69 01       	movw	r12, r18
    10a0:	cc 24       	eor	r12, r12
    10a2:	e0 e2       	ldi	r30, 0x20	; 32
    10a4:	de 22       	and	r13, r30
case 13: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 122070; break;
case 14: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 61035; break;
case 15: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 30518; break;}}
for(int n = 0; n <= 15; n++){switch (n){
case 0: if (RHSofBP_LB & (1 << (15-n)))RHSofDP +=  15259; break;
case 1: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 7629; break;
    10a6:	59 01       	movw	r10, r18
    10a8:	aa 24       	eor	r10, r10
    10aa:	f0 e4       	ldi	r31, 0x40	; 64
    10ac:	bf 22       	and	r11, r31
case 12: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 244141; break;
case 13: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 122070; break;
case 14: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 61035; break;
case 15: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 30518; break;}}
for(int n = 0; n <= 15; n++){switch (n){
case 0: if (RHSofBP_LB & (1 << (15-n)))RHSofDP +=  15259; break;
    10ae:	22 27       	eor	r18, r18
    10b0:	30 78       	andi	r19, 0x80	; 128
case 11: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 488281; break;
case 12: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 244141; break;
case 13: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 122070; break;
case 14: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 61035; break;
case 15: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 30518; break;}}
for(int n = 0; n <= 15; n++){switch (n){
    10b2:	4f 30       	cpi	r20, 0x0F	; 15
    10b4:	51 05       	cpc	r21, r1
    10b6:	08 f0       	brcs	.+2      	; 0x10ba <Binary_points_to_Decimal_Signed+0x3b2>
    10b8:	81 c0       	rjmp	.+258    	; 0x11bc <Binary_points_to_Decimal_Signed+0x4b4>
    10ba:	fa 01       	movw	r30, r20
    10bc:	e0 5a       	subi	r30, 0xA0	; 160
    10be:	ff 4f       	sbci	r31, 0xFF	; 255
    10c0:	0c 94 72 10 	jmp	0x20e4	; 0x20e4 <__tablejump2__>
case 0: if (RHSofBP_LB & (1 << (15-n)))RHSofDP +=  15259; break;
    10c4:	21 15       	cp	r18, r1
    10c6:	31 05       	cpc	r19, r1
    10c8:	09 f4       	brne	.+2      	; 0x10cc <Binary_points_to_Decimal_Signed+0x3c4>
    10ca:	78 c0       	rjmp	.+240    	; 0x11bc <Binary_points_to_Decimal_Signed+0x4b4>
    10cc:	85 56       	subi	r24, 0x65	; 101
    10ce:	94 4c       	sbci	r25, 0xC4	; 196
    10d0:	af 4f       	sbci	r26, 0xFF	; 255
    10d2:	bf 4f       	sbci	r27, 0xFF	; 255
    10d4:	73 c0       	rjmp	.+230    	; 0x11bc <Binary_points_to_Decimal_Signed+0x4b4>
case 1: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 7629; break;
    10d6:	a1 14       	cp	r10, r1
    10d8:	b1 04       	cpc	r11, r1
    10da:	09 f4       	brne	.+2      	; 0x10de <Binary_points_to_Decimal_Signed+0x3d6>
    10dc:	6f c0       	rjmp	.+222    	; 0x11bc <Binary_points_to_Decimal_Signed+0x4b4>
    10de:	83 53       	subi	r24, 0x33	; 51
    10e0:	92 4e       	sbci	r25, 0xE2	; 226
    10e2:	af 4f       	sbci	r26, 0xFF	; 255
    10e4:	bf 4f       	sbci	r27, 0xFF	; 255
    10e6:	6a c0       	rjmp	.+212    	; 0x11bc <Binary_points_to_Decimal_Signed+0x4b4>
case 2: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 3815; break;
    10e8:	c1 14       	cp	r12, r1
    10ea:	d1 04       	cpc	r13, r1
    10ec:	09 f4       	brne	.+2      	; 0x10f0 <Binary_points_to_Decimal_Signed+0x3e8>
    10ee:	66 c0       	rjmp	.+204    	; 0x11bc <Binary_points_to_Decimal_Signed+0x4b4>
    10f0:	89 51       	subi	r24, 0x19	; 25
    10f2:	91 4f       	sbci	r25, 0xF1	; 241
    10f4:	af 4f       	sbci	r26, 0xFF	; 255
    10f6:	bf 4f       	sbci	r27, 0xFF	; 255
    10f8:	61 c0       	rjmp	.+194    	; 0x11bc <Binary_points_to_Decimal_Signed+0x4b4>
case 3: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 1907; break;
    10fa:	e1 14       	cp	r14, r1
    10fc:	f1 04       	cpc	r15, r1
    10fe:	09 f4       	brne	.+2      	; 0x1102 <Binary_points_to_Decimal_Signed+0x3fa>
    1100:	5d c0       	rjmp	.+186    	; 0x11bc <Binary_points_to_Decimal_Signed+0x4b4>
    1102:	8d 58       	subi	r24, 0x8D	; 141
    1104:	98 4f       	sbci	r25, 0xF8	; 248
    1106:	af 4f       	sbci	r26, 0xFF	; 255
    1108:	bf 4f       	sbci	r27, 0xFF	; 255
    110a:	58 c0       	rjmp	.+176    	; 0x11bc <Binary_points_to_Decimal_Signed+0x4b4>
case 4: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 954; break;
    110c:	e9 89       	ldd	r30, Y+17	; 0x11
    110e:	fa 89       	ldd	r31, Y+18	; 0x12
    1110:	ef 2b       	or	r30, r31
    1112:	09 f4       	brne	.+2      	; 0x1116 <Binary_points_to_Decimal_Signed+0x40e>
    1114:	53 c0       	rjmp	.+166    	; 0x11bc <Binary_points_to_Decimal_Signed+0x4b4>
    1116:	86 54       	subi	r24, 0x46	; 70
    1118:	9c 4f       	sbci	r25, 0xFC	; 252
    111a:	af 4f       	sbci	r26, 0xFF	; 255
    111c:	bf 4f       	sbci	r27, 0xFF	; 255
    111e:	4e c0       	rjmp	.+156    	; 0x11bc <Binary_points_to_Decimal_Signed+0x4b4>
case 5: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 477; break;
    1120:	61 15       	cp	r22, r1
    1122:	71 05       	cpc	r23, r1
    1124:	09 f4       	brne	.+2      	; 0x1128 <Binary_points_to_Decimal_Signed+0x420>
    1126:	4a c0       	rjmp	.+148    	; 0x11bc <Binary_points_to_Decimal_Signed+0x4b4>
    1128:	83 52       	subi	r24, 0x23	; 35
    112a:	9e 4f       	sbci	r25, 0xFE	; 254
    112c:	af 4f       	sbci	r26, 0xFF	; 255
    112e:	bf 4f       	sbci	r27, 0xFF	; 255
    1130:	45 c0       	rjmp	.+138    	; 0x11bc <Binary_points_to_Decimal_Signed+0x4b4>
case 6: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 238; break;
    1132:	81 14       	cp	r8, r1
    1134:	91 04       	cpc	r9, r1
    1136:	09 f4       	brne	.+2      	; 0x113a <Binary_points_to_Decimal_Signed+0x432>
    1138:	41 c0       	rjmp	.+130    	; 0x11bc <Binary_points_to_Decimal_Signed+0x4b4>
    113a:	82 51       	subi	r24, 0x12	; 18
    113c:	9f 4f       	sbci	r25, 0xFF	; 255
    113e:	af 4f       	sbci	r26, 0xFF	; 255
    1140:	bf 4f       	sbci	r27, 0xFF	; 255
    1142:	3c c0       	rjmp	.+120    	; 0x11bc <Binary_points_to_Decimal_Signed+0x4b4>
case 7: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 119; break;
    1144:	61 14       	cp	r6, r1
    1146:	71 04       	cpc	r7, r1
    1148:	c9 f1       	breq	.+114    	; 0x11bc <Binary_points_to_Decimal_Signed+0x4b4>
    114a:	89 58       	subi	r24, 0x89	; 137
    114c:	9f 4f       	sbci	r25, 0xFF	; 255
    114e:	af 4f       	sbci	r26, 0xFF	; 255
    1150:	bf 4f       	sbci	r27, 0xFF	; 255
    1152:	34 c0       	rjmp	.+104    	; 0x11bc <Binary_points_to_Decimal_Signed+0x4b4>
case 8: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 60; break;
    1154:	41 14       	cp	r4, r1
    1156:	51 04       	cpc	r5, r1
    1158:	89 f1       	breq	.+98     	; 0x11bc <Binary_points_to_Decimal_Signed+0x4b4>
    115a:	cc 96       	adiw	r24, 0x3c	; 60
    115c:	a1 1d       	adc	r26, r1
    115e:	b1 1d       	adc	r27, r1
    1160:	2d c0       	rjmp	.+90     	; 0x11bc <Binary_points_to_Decimal_Signed+0x4b4>
case 9: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 30; break;
    1162:	01 15       	cp	r16, r1
    1164:	11 05       	cpc	r17, r1
    1166:	51 f1       	breq	.+84     	; 0x11bc <Binary_points_to_Decimal_Signed+0x4b4>
    1168:	4e 96       	adiw	r24, 0x1e	; 30
    116a:	a1 1d       	adc	r26, r1
    116c:	b1 1d       	adc	r27, r1
    116e:	26 c0       	rjmp	.+76     	; 0x11bc <Binary_points_to_Decimal_Signed+0x4b4>
case 10: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 15; break;
    1170:	21 14       	cp	r2, r1
    1172:	31 04       	cpc	r3, r1
    1174:	19 f1       	breq	.+70     	; 0x11bc <Binary_points_to_Decimal_Signed+0x4b4>
    1176:	0f 96       	adiw	r24, 0x0f	; 15
    1178:	a1 1d       	adc	r26, r1
    117a:	b1 1d       	adc	r27, r1
    117c:	1f c0       	rjmp	.+62     	; 0x11bc <Binary_points_to_Decimal_Signed+0x4b4>
case 11: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 7; break;
    117e:	ed 85       	ldd	r30, Y+13	; 0x0d
    1180:	fe 85       	ldd	r31, Y+14	; 0x0e
    1182:	ef 2b       	or	r30, r31
    1184:	d9 f0       	breq	.+54     	; 0x11bc <Binary_points_to_Decimal_Signed+0x4b4>
    1186:	07 96       	adiw	r24, 0x07	; 7
    1188:	a1 1d       	adc	r26, r1
    118a:	b1 1d       	adc	r27, r1
    118c:	17 c0       	rjmp	.+46     	; 0x11bc <Binary_points_to_Decimal_Signed+0x4b4>
case 12: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 4; break;
    118e:	e9 85       	ldd	r30, Y+9	; 0x09
    1190:	fa 85       	ldd	r31, Y+10	; 0x0a
    1192:	ef 2b       	or	r30, r31
    1194:	99 f0       	breq	.+38     	; 0x11bc <Binary_points_to_Decimal_Signed+0x4b4>
    1196:	04 96       	adiw	r24, 0x04	; 4
    1198:	a1 1d       	adc	r26, r1
    119a:	b1 1d       	adc	r27, r1
    119c:	0f c0       	rjmp	.+30     	; 0x11bc <Binary_points_to_Decimal_Signed+0x4b4>
case 13: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 2; break;
    119e:	ed 81       	ldd	r30, Y+5	; 0x05
    11a0:	fe 81       	ldd	r31, Y+6	; 0x06
    11a2:	ef 2b       	or	r30, r31
    11a4:	59 f0       	breq	.+22     	; 0x11bc <Binary_points_to_Decimal_Signed+0x4b4>
    11a6:	02 96       	adiw	r24, 0x02	; 2
    11a8:	a1 1d       	adc	r26, r1
    11aa:	b1 1d       	adc	r27, r1
    11ac:	07 c0       	rjmp	.+14     	; 0x11bc <Binary_points_to_Decimal_Signed+0x4b4>
case 14: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 1; break;
    11ae:	e9 81       	ldd	r30, Y+1	; 0x01
    11b0:	fa 81       	ldd	r31, Y+2	; 0x02
    11b2:	ef 2b       	or	r30, r31
    11b4:	19 f0       	breq	.+6      	; 0x11bc <Binary_points_to_Decimal_Signed+0x4b4>
    11b6:	01 96       	adiw	r24, 0x01	; 1
    11b8:	a1 1d       	adc	r26, r1
    11ba:	b1 1d       	adc	r27, r1
case 11: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 488281; break;
case 12: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 244141; break;
case 13: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 122070; break;
case 14: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 61035; break;
case 15: if (RHSofBP>>16 & (1 << (15-n)))RHSofDP += 30518; break;}}
for(int n = 0; n <= 15; n++){switch (n){
    11bc:	4f 5f       	subi	r20, 0xFF	; 255
    11be:	5f 4f       	sbci	r21, 0xFF	; 255
    11c0:	40 31       	cpi	r20, 0x10	; 16
    11c2:	51 05       	cpc	r21, r1
    11c4:	09 f0       	breq	.+2      	; 0x11c8 <Binary_points_to_Decimal_Signed+0x4c0>
    11c6:	75 cf       	rjmp	.-278    	; 0x10b2 <Binary_points_to_Decimal_Signed+0x3aa>
case 11: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 7; break;
case 12: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 4; break;
case 13: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 2; break;
case 14: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 1; break;
case 15: if (RHSofBP_LB & (1 << (15-n)))RHSofDP += 0; break;}}	
return RHSofDP;}
    11c8:	bc 01       	movw	r22, r24
    11ca:	cd 01       	movw	r24, r26
    11cc:	e6 96       	adiw	r28, 0x36	; 54
    11ce:	0f b6       	in	r0, 0x3f	; 63
    11d0:	f8 94       	cli
    11d2:	de bf       	out	0x3e, r29	; 62
    11d4:	0f be       	out	0x3f, r0	; 63
    11d6:	cd bf       	out	0x3d, r28	; 61
    11d8:	df 91       	pop	r29
    11da:	cf 91       	pop	r28
    11dc:	1f 91       	pop	r17
    11de:	0f 91       	pop	r16
    11e0:	ff 90       	pop	r15
    11e2:	ef 90       	pop	r14
    11e4:	df 90       	pop	r13
    11e6:	cf 90       	pop	r12
    11e8:	bf 90       	pop	r11
    11ea:	af 90       	pop	r10
    11ec:	9f 90       	pop	r9
    11ee:	8f 90       	pop	r8
    11f0:	7f 90       	pop	r7
    11f2:	6f 90       	pop	r6
    11f4:	5f 90       	pop	r5
    11f6:	4f 90       	pop	r4
    11f8:	3f 90       	pop	r3
    11fa:	2f 90       	pop	r2
    11fc:	08 95       	ret

000011fe <Hex_from_KBD>:
						
return I2C_displayToNum();}


/*******************************************************************************/
long Hex_from_KBD(void){
    11fe:	cf 92       	push	r12
    1200:	df 92       	push	r13
    1202:	ef 92       	push	r14
    1204:	ff 92       	push	r15
    1206:	cf 93       	push	r28
    1208:	df 93       	push	r29
char keypress, sign = '+';
long number;

do
{keypress =  waitforkeypress();} 
    120a:	0e 94 fe 00 	call	0x1fc	; 0x1fc <waitforkeypress>
    120e:	c8 2f       	mov	r28, r24
while ((!(hex_digit(keypress)))&& (keypress != '-'));//(non_hex_char(keypress));
    1210:	0e 94 33 02 	call	0x466	; 0x466 <hex_digit>
    1214:	81 11       	cpse	r24, r1
    1216:	02 c0       	rjmp	.+4      	; 0x121c <Hex_from_KBD+0x1e>
    1218:	cd 32       	cpi	r28, 0x2D	; 45
    121a:	b9 f7       	brne	.-18     	; 0x120a <Hex_from_KBD+0xc>

newline(); Char_to_PC(keypress);
    121c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <newline>
    1220:	8c 2f       	mov	r24, r28
    1222:	0e 94 34 01 	call	0x268	; 0x268 <Char_to_PC>

if(keypress == '-') {sign = '-'; number = 0;}
    1226:	cd 32       	cpi	r28, 0x2D	; 45
    1228:	61 f0       	breq	.+24     	; 0x1242 <Hex_from_KBD+0x44>

else {keypress -= '0';
    122a:	80 ed       	ldi	r24, 0xD0	; 208
    122c:	8c 0f       	add	r24, r28
if (keypress > 9)keypress -= 7;
    122e:	8a 30       	cpi	r24, 0x0A	; 10
    1230:	10 f0       	brcs	.+4      	; 0x1236 <Hex_from_KBD+0x38>
    1232:	89 ec       	ldi	r24, 0xC9	; 201
    1234:	8c 0f       	add	r24, r28
number =  keypress;}
    1236:	c8 2e       	mov	r12, r24
    1238:	d1 2c       	mov	r13, r1
    123a:	e1 2c       	mov	r14, r1
    123c:	f1 2c       	mov	r15, r1
return I2C_displayToNum();}


/*******************************************************************************/
long Hex_from_KBD(void){
char keypress, sign = '+';
    123e:	db e2       	ldi	r29, 0x2B	; 43
    1240:	04 c0       	rjmp	.+8      	; 0x124a <Hex_from_KBD+0x4c>
{keypress =  waitforkeypress();} 
while ((!(hex_digit(keypress)))&& (keypress != '-'));//(non_hex_char(keypress));

newline(); Char_to_PC(keypress);

if(keypress == '-') {sign = '-'; number = 0;}
    1242:	c1 2c       	mov	r12, r1
    1244:	d1 2c       	mov	r13, r1
    1246:	76 01       	movw	r14, r12
    1248:	dd e2       	ldi	r29, 0x2D	; 45
else {keypress -= '0';
if (keypress > 9)keypress -= 7;
number =  keypress;}

while(1){
if ((keypress = wait_for_return_key())  =='\r')break;
    124a:	0e 94 1d 01 	call	0x23a	; 0x23a <wait_for_return_key>
    124e:	c8 2f       	mov	r28, r24
    1250:	8d 30       	cpi	r24, 0x0D	; 13
    1252:	c9 f0       	breq	.+50     	; 0x1286 <Hex_from_KBD+0x88>
if (hex_digit (keypress))	
    1254:	0e 94 33 02 	call	0x466	; 0x466 <hex_digit>
    1258:	88 23       	and	r24, r24
    125a:	b9 f3       	breq	.-18     	; 0x124a <Hex_from_KBD+0x4c>
{Char_to_PC(keypress);
    125c:	8c 2f       	mov	r24, r28
    125e:	0e 94 34 01 	call	0x268	; 0x268 <Char_to_PC>
keypress -= '0';
    1262:	80 ed       	ldi	r24, 0xD0	; 208
    1264:	8c 0f       	add	r24, r28
if (keypress > 9)keypress -= 7;
    1266:	8a 30       	cpi	r24, 0x0A	; 10
    1268:	10 f0       	brcs	.+4      	; 0x126e <Hex_from_KBD+0x70>
    126a:	89 ec       	ldi	r24, 0xC9	; 201
    126c:	8c 0f       	add	r24, r28

number = number * 0x10 + keypress;}}
    126e:	94 e0       	ldi	r25, 0x04	; 4
    1270:	cc 0c       	add	r12, r12
    1272:	dd 1c       	adc	r13, r13
    1274:	ee 1c       	adc	r14, r14
    1276:	ff 1c       	adc	r15, r15
    1278:	9a 95       	dec	r25
    127a:	d1 f7       	brne	.-12     	; 0x1270 <Hex_from_KBD+0x72>
    127c:	c8 0e       	add	r12, r24
    127e:	d1 1c       	adc	r13, r1
    1280:	e1 1c       	adc	r14, r1
    1282:	f1 1c       	adc	r15, r1
    1284:	e2 cf       	rjmp	.-60     	; 0x124a <Hex_from_KBD+0x4c>

if(sign == '-')number*= -1;					
    1286:	dd 32       	cpi	r29, 0x2D	; 45
    1288:	41 f4       	brne	.+16     	; 0x129a <Hex_from_KBD+0x9c>
    128a:	f0 94       	com	r15
    128c:	e0 94       	com	r14
    128e:	d0 94       	com	r13
    1290:	c0 94       	com	r12
    1292:	c1 1c       	adc	r12, r1
    1294:	d1 1c       	adc	r13, r1
    1296:	e1 1c       	adc	r14, r1
    1298:	f1 1c       	adc	r15, r1
return number;}
    129a:	c7 01       	movw	r24, r14
    129c:	b6 01       	movw	r22, r12
    129e:	df 91       	pop	r29
    12a0:	cf 91       	pop	r28
    12a2:	ff 90       	pop	r15
    12a4:	ef 90       	pop	r14
    12a6:	df 90       	pop	r13
    12a8:	cf 90       	pop	r12
    12aa:	08 95       	ret

000012ac <Num_from_KBD_with_echo>:



/*******************************************************************************/
long Num_from_KBD_with_echo(char digits[]){
    12ac:	cf 92       	push	r12
    12ae:	df 92       	push	r13
    12b0:	ef 92       	push	r14
    12b2:	ff 92       	push	r15
    12b4:	cf 93       	push	r28
    12b6:	df 93       	push	r29
    12b8:	9c 01       	movw	r18, r24
    12ba:	28 5f       	subi	r18, 0xF8	; 248
    12bc:	3f 4f       	sbci	r19, 0xFF	; 255
char keypress, sign = '+';
long number;
for(int n = 0; n<=7; n++) digits[n] = 0; 
    12be:	fc 01       	movw	r30, r24
    12c0:	11 92       	st	Z+, r1
    12c2:	cf 01       	movw	r24, r30
    12c4:	e2 17       	cp	r30, r18
    12c6:	f3 07       	cpc	r31, r19
    12c8:	d1 f7       	brne	.-12     	; 0x12be <Num_from_KBD_with_echo+0x12>

do
{keypress =  waitforkeypress();} 
    12ca:	0e 94 fe 00 	call	0x1fc	; 0x1fc <waitforkeypress>
    12ce:	c8 2f       	mov	r28, r24
for(int m = n; m; m--)Char_to_PC(*(s + m-1));}		//print last character first


/*********************************************************************/
char decimal_digit (char data){
if (((data > '9') || (data < '0')) )return 0;
    12d0:	d0 ed       	ldi	r29, 0xD0	; 208
    12d2:	d8 0f       	add	r29, r24
    12d4:	da 30       	cpi	r29, 0x0A	; 10
    12d6:	98 f5       	brcc	.+102    	; 0x133e <Num_from_KBD_with_echo+0x92>
while((!(decimal_digit(keypress)))&& (keypress != '-'));	// (non_hex_char(keypress)); 

newline(); Char_to_PC(keypress);
    12d8:	0e 94 50 01 	call	0x2a0	; 0x2a0 <newline>
    12dc:	8c 2f       	mov	r24, r28
    12de:	0e 94 34 01 	call	0x268	; 0x268 <Char_to_PC>

if(keypress == '-') {sign = '-'; number = 0;}
    12e2:	cd 32       	cpi	r28, 0x2D	; 45
    12e4:	31 f0       	breq	.+12     	; 0x12f2 <Num_from_KBD_with_echo+0x46>

else {
keypress -= '0';
number =  keypress;}
    12e6:	cd 2e       	mov	r12, r29
    12e8:	d1 2c       	mov	r13, r1
    12ea:	e1 2c       	mov	r14, r1
    12ec:	f1 2c       	mov	r15, r1



/*******************************************************************************/
long Num_from_KBD_with_echo(char digits[]){
char keypress, sign = '+';
    12ee:	db e2       	ldi	r29, 0x2B	; 43
    12f0:	04 c0       	rjmp	.+8      	; 0x12fa <Num_from_KBD_with_echo+0x4e>
{keypress =  waitforkeypress();} 
while((!(decimal_digit(keypress)))&& (keypress != '-'));	// (non_hex_char(keypress)); 

newline(); Char_to_PC(keypress);

if(keypress == '-') {sign = '-'; number = 0;}
    12f2:	c1 2c       	mov	r12, r1
    12f4:	d1 2c       	mov	r13, r1
    12f6:	76 01       	movw	r14, r12
    12f8:	dd e2       	ldi	r29, 0x2D	; 45
else {
keypress -= '0';
number =  keypress;}

while(1){
if ((keypress = wait_for_return_key())  =='\r')break;
    12fa:	0e 94 1d 01 	call	0x23a	; 0x23a <wait_for_return_key>
    12fe:	8d 30       	cpi	r24, 0x0D	; 13
    1300:	99 f0       	breq	.+38     	; 0x1328 <Num_from_KBD_with_echo+0x7c>
    1302:	c0 ed       	ldi	r28, 0xD0	; 208
    1304:	c8 0f       	add	r28, r24
    1306:	ca 30       	cpi	r28, 0x0A	; 10
    1308:	c0 f7       	brcc	.-16     	; 0x12fa <Num_from_KBD_with_echo+0x4e>
if (decimal_digit (keypress))		
{Char_to_PC(keypress);
    130a:	0e 94 34 01 	call	0x268	; 0x268 <Char_to_PC>
keypress -= '0';

number = number * 10 + keypress;}}
    130e:	aa e0       	ldi	r26, 0x0A	; 10
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	a7 01       	movw	r20, r14
    1314:	96 01       	movw	r18, r12
    1316:	0e 94 78 10 	call	0x20f0	; 0x20f0 <__muluhisi3>
    131a:	6b 01       	movw	r12, r22
    131c:	7c 01       	movw	r14, r24
    131e:	cc 0e       	add	r12, r28
    1320:	d1 1c       	adc	r13, r1
    1322:	e1 1c       	adc	r14, r1
    1324:	f1 1c       	adc	r15, r1
    1326:	e9 cf       	rjmp	.-46     	; 0x12fa <Num_from_KBD_with_echo+0x4e>

if(sign == '-')number*= -1;					
    1328:	dd 32       	cpi	r29, 0x2D	; 45
    132a:	61 f4       	brne	.+24     	; 0x1344 <Num_from_KBD_with_echo+0x98>
    132c:	f0 94       	com	r15
    132e:	e0 94       	com	r14
    1330:	d0 94       	com	r13
    1332:	c0 94       	com	r12
    1334:	c1 1c       	adc	r12, r1
    1336:	d1 1c       	adc	r13, r1
    1338:	e1 1c       	adc	r14, r1
    133a:	f1 1c       	adc	r15, r1
return number;}
    133c:	03 c0       	rjmp	.+6      	; 0x1344 <Num_from_KBD_with_echo+0x98>
long number;
for(int n = 0; n<=7; n++) digits[n] = 0; 

do
{keypress =  waitforkeypress();} 
while((!(decimal_digit(keypress)))&& (keypress != '-'));	// (non_hex_char(keypress)); 
    133e:	8d 32       	cpi	r24, 0x2D	; 45
    1340:	21 f6       	brne	.-120    	; 0x12ca <Num_from_KBD_with_echo+0x1e>
    1342:	ca cf       	rjmp	.-108    	; 0x12d8 <Num_from_KBD_with_echo+0x2c>
keypress -= '0';

number = number * 10 + keypress;}}

if(sign == '-')number*= -1;					
return number;}
    1344:	c7 01       	movw	r24, r14
    1346:	b6 01       	movw	r22, r12
    1348:	df 91       	pop	r29
    134a:	cf 91       	pop	r28
    134c:	ff 90       	pop	r15
    134e:	ef 90       	pop	r14
    1350:	df 90       	pop	r13
    1352:	cf 90       	pop	r12
    1354:	08 95       	ret

00001356 <Binary_to_PC>:



/*******************************************************************************/
void Binary_to_PC(long num){
    1356:	4f 92       	push	r4
    1358:	5f 92       	push	r5
    135a:	6f 92       	push	r6
    135c:	7f 92       	push	r7
    135e:	af 92       	push	r10
    1360:	bf 92       	push	r11
    1362:	cf 92       	push	r12
    1364:	df 92       	push	r13
    1366:	ef 92       	push	r14
    1368:	ff 92       	push	r15
    136a:	0f 93       	push	r16
    136c:	1f 93       	push	r17
    136e:	cf 93       	push	r28
    1370:	6b 01       	movw	r12, r22
    1372:	7c 01       	movw	r14, r24
char counter = 0; unsigned int x;
for (unsigned int m = 16; m; m--)
{if ((num>>16) & (1 << (m-1))) Char_to_PC ('1'); else Char_to_PC('0'); 
    1374:	27 01       	movw	r4, r14
    1376:	77 24       	eor	r7, r7
    1378:	57 fc       	sbrc	r5, 7
    137a:	70 94       	com	r7
    137c:	67 2c       	mov	r6, r7


/*******************************************************************************/
void Binary_to_PC(long num){
char counter = 0; unsigned int x;
for (unsigned int m = 16; m; m--)
    137e:	00 e1       	ldi	r16, 0x10	; 16
    1380:	10 e0       	ldi	r17, 0x00	; 0



/*******************************************************************************/
void Binary_to_PC(long num){
char counter = 0; unsigned int x;
    1382:	c0 e0       	ldi	r28, 0x00	; 0
for (unsigned int m = 16; m; m--)
{if ((num>>16) & (1 << (m-1))) Char_to_PC ('1'); else Char_to_PC('0'); 
    1384:	aa 24       	eor	r10, r10
    1386:	a3 94       	inc	r10
    1388:	b1 2c       	mov	r11, r1
    138a:	01 50       	subi	r16, 0x01	; 1
    138c:	11 09       	sbc	r17, r1
    138e:	c5 01       	movw	r24, r10
    1390:	00 2e       	mov	r0, r16
    1392:	02 c0       	rjmp	.+4      	; 0x1398 <Binary_to_PC+0x42>
    1394:	88 0f       	add	r24, r24
    1396:	99 1f       	adc	r25, r25
    1398:	0a 94       	dec	r0
    139a:	e2 f7       	brpl	.-8      	; 0x1394 <Binary_to_PC+0x3e>
    139c:	09 2e       	mov	r0, r25
    139e:	00 0c       	add	r0, r0
    13a0:	aa 0b       	sbc	r26, r26
    13a2:	bb 0b       	sbc	r27, r27
    13a4:	84 21       	and	r24, r4
    13a6:	95 21       	and	r25, r5
    13a8:	a6 21       	and	r26, r6
    13aa:	b7 21       	and	r27, r7
    13ac:	89 2b       	or	r24, r25
    13ae:	8a 2b       	or	r24, r26
    13b0:	8b 2b       	or	r24, r27
    13b2:	11 f0       	breq	.+4      	; 0x13b8 <Binary_to_PC+0x62>
    13b4:	81 e3       	ldi	r24, 0x31	; 49
    13b6:	01 c0       	rjmp	.+2      	; 0x13ba <Binary_to_PC+0x64>
    13b8:	80 e3       	ldi	r24, 0x30	; 48
    13ba:	0e 94 34 01 	call	0x268	; 0x268 <Char_to_PC>
counter++; if (!(counter%4))Char_to_PC(' ');}
    13be:	cf 5f       	subi	r28, 0xFF	; 255
    13c0:	8c 2f       	mov	r24, r28
    13c2:	83 70       	andi	r24, 0x03	; 3
    13c4:	19 f4       	brne	.+6      	; 0x13cc <Binary_to_PC+0x76>
    13c6:	80 e2       	ldi	r24, 0x20	; 32
    13c8:	0e 94 34 01 	call	0x268	; 0x268 <Char_to_PC>


/*******************************************************************************/
void Binary_to_PC(long num){
char counter = 0; unsigned int x;
for (unsigned int m = 16; m; m--)
    13cc:	c0 31       	cpi	r28, 0x10	; 16
    13ce:	e9 f6       	brne	.-70     	; 0x138a <Binary_to_PC+0x34>
{if ((num>>16) & (1 << (m-1))) Char_to_PC ('1'); else Char_to_PC('0'); 
counter++; if (!(counter%4))Char_to_PC(' ');}

x=num;
for (unsigned int m = 16; m; m--)
    13d0:	00 e1       	ldi	r16, 0x10	; 16
    13d2:	10 e0       	ldi	r17, 0x00	; 0
{if (x & (1 << (m-1))) Char_to_PC ('1'); else Char_to_PC('0'); 
    13d4:	ee 24       	eor	r14, r14
    13d6:	e3 94       	inc	r14
    13d8:	f1 2c       	mov	r15, r1
    13da:	01 50       	subi	r16, 0x01	; 1
    13dc:	11 09       	sbc	r17, r1
    13de:	c7 01       	movw	r24, r14
    13e0:	00 2e       	mov	r0, r16
    13e2:	02 c0       	rjmp	.+4      	; 0x13e8 <Binary_to_PC+0x92>
    13e4:	88 0f       	add	r24, r24
    13e6:	99 1f       	adc	r25, r25
    13e8:	0a 94       	dec	r0
    13ea:	e2 f7       	brpl	.-8      	; 0x13e4 <Binary_to_PC+0x8e>
    13ec:	8c 21       	and	r24, r12
    13ee:	9d 21       	and	r25, r13
    13f0:	89 2b       	or	r24, r25
    13f2:	11 f0       	breq	.+4      	; 0x13f8 <Binary_to_PC+0xa2>
    13f4:	81 e3       	ldi	r24, 0x31	; 49
    13f6:	01 c0       	rjmp	.+2      	; 0x13fa <Binary_to_PC+0xa4>
    13f8:	80 e3       	ldi	r24, 0x30	; 48
    13fa:	0e 94 34 01 	call	0x268	; 0x268 <Char_to_PC>
counter++;if (!(counter%4))Char_to_PC(' ');}}
    13fe:	cf 5f       	subi	r28, 0xFF	; 255
    1400:	8c 2f       	mov	r24, r28
    1402:	83 70       	andi	r24, 0x03	; 3
    1404:	19 f4       	brne	.+6      	; 0x140c <Binary_to_PC+0xb6>
    1406:	80 e2       	ldi	r24, 0x20	; 32
    1408:	0e 94 34 01 	call	0x268	; 0x268 <Char_to_PC>
for (unsigned int m = 16; m; m--)
{if ((num>>16) & (1 << (m-1))) Char_to_PC ('1'); else Char_to_PC('0'); 
counter++; if (!(counter%4))Char_to_PC(' ');}

x=num;
for (unsigned int m = 16; m; m--)
    140c:	c0 32       	cpi	r28, 0x20	; 32
    140e:	29 f7       	brne	.-54     	; 0x13da <Binary_to_PC+0x84>
{if (x & (1 << (m-1))) Char_to_PC ('1'); else Char_to_PC('0'); 
counter++;if (!(counter%4))Char_to_PC(' ');}}
    1410:	cf 91       	pop	r28
    1412:	1f 91       	pop	r17
    1414:	0f 91       	pop	r16
    1416:	ff 90       	pop	r15
    1418:	ef 90       	pop	r14
    141a:	df 90       	pop	r13
    141c:	cf 90       	pop	r12
    141e:	bf 90       	pop	r11
    1420:	af 90       	pop	r10
    1422:	7f 90       	pop	r7
    1424:	6f 90       	pop	r6
    1426:	5f 90       	pop	r5
    1428:	4f 90       	pop	r4
    142a:	08 95       	ret

0000142c <send_byte_with_Ack>:
TWCR = (1 << TWINT);}										//Clear interrupt and close I2C slave


/***********************************************************/
void send_byte_with_Ack(char byte){
TWDR = byte;											//Send payload size: Zero in this case
    142c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fc0bb>
TWCR = (1 << TWINT) | (1 << TWEA) | (1 << TWEN);		//clear interrupt and set Enable Acknowledge
    1430:	84 ec       	ldi	r24, 0xC4	; 196
    1432:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
while (!(TWCR & (1 << TWINT)));}
    1436:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
    143a:	87 ff       	sbrs	r24, 7
    143c:	fc cf       	rjmp	.-8      	; 0x1436 <send_byte_with_Ack+0xa>
    143e:	08 95       	ret

00001440 <send_byte_with_Nack>:

/***********************************************************/
void send_byte_with_Nack(char byte){
TWDR = byte;										//Send payload size: Zero in this case
    1440:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fc0bb>
TWCR = (1 << TWINT) | (1 << TWEN);		//clear interrupt and set Enable Acknowledge
    1444:	84 e8       	ldi	r24, 0x84	; 132
    1446:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
while (!(TWCR & (1 << TWINT)));}
    144a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
    144e:	87 ff       	sbrs	r24, 7
    1450:	fc cf       	rjmp	.-8      	; 0x144a <send_byte_with_Nack+0xa>
    1452:	08 95       	ret

00001454 <I2C_initiate_10mS_ref>:
/************************************************************************/
void I2C_initiate_10mS_ref(void){
char num_bytes=0;
char mode = 'F';

waiting_for_I2C_master;
    1454:	84 e4       	ldi	r24, 0x44	; 68
    1456:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
    145a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
    145e:	87 ff       	sbrs	r24, 7
    1460:	fc cf       	rjmp	.-8      	; 0x145a <I2C_initiate_10mS_ref+0x6>
    1462:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fc0bb>
send_byte_with_Ack(num_bytes);
    1466:	80 e0       	ldi	r24, 0x00	; 0
    1468:	0e 94 16 0a 	call	0x142c	; 0x142c <send_byte_with_Ack>
send_byte_with_Nack(mode);
    146c:	86 e4       	ldi	r24, 0x46	; 70
    146e:	0e 94 20 0a 	call	0x1440	; 0x1440 <send_byte_with_Nack>

TWCR = (1 << TWINT) | (1 << TWEN);		//clear interrupt and leave I2C slave active
    1472:	84 e8       	ldi	r24, 0x84	; 132
    1474:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
TWCR |= (1 << TWEA) | (1 << TWIE);} 	//Slave mode with interrupt and Enable Acknowledge
    1478:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
    147c:	81 64       	ori	r24, 0x41	; 65
    147e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
    1482:	08 95       	ret

00001484 <I2C_Tx_float_display_control>:
for(int m=0; m<=3; m++){s[m] = (L_number >> (8*(3-m)));}
s[4] = expnt;
I2C_Tx(num_bytes,mode, s);}

/************************************************************************/
void I2C_Tx_float_display_control(void){
    1484:	ff 92       	push	r15
    1486:	0f 93       	push	r16
    1488:	1f 93       	push	r17
    148a:	cf 93       	push	r28
    148c:	df 93       	push	r29
char PCMSK0_backup, PCMSK2_backup, float_display_mode = '0';
PCMSK0_backup= PCMSK0;
    148e:	10 91 6b 00 	lds	r17, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7fc06b>
PCMSK2_backup= PCMSK2;
    1492:	d0 91 6d 00 	lds	r29, 0x006D	; 0x80006d <__TEXT_REGION_LENGTH__+0x7fc06d>
if (PCIenabled){disable_pci_on_sw2;disable_pci_on_sw1_and_sw3;}						//CHECK are we masking or dissabling PCI interrupts
    1496:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <__TEXT_REGION_LENGTH__+0x7fc06d>
    149a:	84 78       	andi	r24, 0x84	; 132
    149c:	84 38       	cpi	r24, 0x84	; 132
    149e:	21 f0       	breq	.+8      	; 0x14a8 <I2C_Tx_float_display_control+0x24>
    14a0:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7fc06b>
    14a4:	86 ff       	sbrs	r24, 6
    14a6:	0a c0       	rjmp	.+20     	; 0x14bc <I2C_Tx_float_display_control+0x38>
    14a8:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <__TEXT_REGION_LENGTH__+0x7fc06b>
    14ac:	8f 7b       	andi	r24, 0xBF	; 191
    14ae:	80 93 6b 00 	sts	0x006B, r24	; 0x80006b <__TEXT_REGION_LENGTH__+0x7fc06b>
    14b2:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <__TEXT_REGION_LENGTH__+0x7fc06d>
    14b6:	8b 77       	andi	r24, 0x7B	; 123
    14b8:	80 93 6d 00 	sts	0x006D, r24	; 0x80006d <__TEXT_REGION_LENGTH__+0x7fc06d>
while(1){
if(switch_2_down)float_display_mode = '1'; else float_display_mode = '0';
if((switch_1_down)||(switch_3_down))float_display_mode = '2';
waiting_for_I2C_master;
    14bc:	84 e4       	ldi	r24, 0x44	; 68
    14be:	f8 2e       	mov	r15, r24
send_byte_with_Nack(float_display_mode);
clear_I2C_interrupt;
    14c0:	00 e8       	ldi	r16, 0x80	; 128
char PCMSK0_backup, PCMSK2_backup, float_display_mode = '0';
PCMSK0_backup= PCMSK0;
PCMSK2_backup= PCMSK2;
if (PCIenabled){disable_pci_on_sw2;disable_pci_on_sw1_and_sw3;}						//CHECK are we masking or dissabling PCI interrupts
while(1){
if(switch_2_down)float_display_mode = '1'; else float_display_mode = '0';
    14c2:	1e 9b       	sbis	0x03, 6	; 3
    14c4:	02 c0       	rjmp	.+4      	; 0x14ca <I2C_Tx_float_display_control+0x46>
    14c6:	c0 e3       	ldi	r28, 0x30	; 48
    14c8:	01 c0       	rjmp	.+2      	; 0x14cc <I2C_Tx_float_display_control+0x48>
    14ca:	c1 e3       	ldi	r28, 0x31	; 49
if((switch_1_down)||(switch_3_down))float_display_mode = '2';
    14cc:	4a 9b       	sbis	0x09, 2	; 9
    14ce:	01 c0       	rjmp	.+2      	; 0x14d2 <I2C_Tx_float_display_control+0x4e>
    14d0:	4f 9b       	sbis	0x09, 7	; 9
    14d2:	c2 e3       	ldi	r28, 0x32	; 50
waiting_for_I2C_master;
    14d4:	f0 92 bc 00 	sts	0x00BC, r15	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
    14d8:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
    14dc:	87 ff       	sbrs	r24, 7
    14de:	fc cf       	rjmp	.-8      	; 0x14d8 <I2C_Tx_float_display_control+0x54>
    14e0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fc0bb>
send_byte_with_Nack(float_display_mode);
    14e4:	8c 2f       	mov	r24, r28
    14e6:	0e 94 20 0a 	call	0x1440	; 0x1440 <send_byte_with_Nack>
clear_I2C_interrupt;
    14ea:	00 93 bc 00 	sts	0x00BC, r16	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
if(float_display_mode == '2')break;}
    14ee:	c2 33       	cpi	r28, 0x32	; 50
    14f0:	41 f7       	brne	.-48     	; 0x14c2 <I2C_Tx_float_display_control+0x3e>
PCMSK0 = PCMSK0_backup;
    14f2:	10 93 6b 00 	sts	0x006B, r17	; 0x80006b <__TEXT_REGION_LENGTH__+0x7fc06b>
PCMSK2 = PCMSK2_backup;}
    14f6:	d0 93 6d 00 	sts	0x006D, r29	; 0x80006d <__TEXT_REGION_LENGTH__+0x7fc06d>
    14fa:	df 91       	pop	r29
    14fc:	cf 91       	pop	r28
    14fe:	1f 91       	pop	r17
    1500:	0f 91       	pop	r16
    1502:	ff 90       	pop	r15
    1504:	08 95       	ret

00001506 <I2C_Tx_initiate_mode>:
char receive_byte_with_Ack(void);
char receive_byte_with_Nack(void);
void I2C_Rx_RN(unsigned long *, signed char *);		//Real numbers only


void I2C_Tx_initiate_mode(char mode){
    1506:	cf 93       	push	r28
    1508:	c8 2f       	mov	r28, r24
char num_bytes = 0;
waiting_for_I2C_master;		
    150a:	84 e4       	ldi	r24, 0x44	; 68
    150c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
    1510:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
    1514:	87 ff       	sbrs	r24, 7
    1516:	fc cf       	rjmp	.-8      	; 0x1510 <I2C_Tx_initiate_mode+0xa>
    1518:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fc0bb>
send_byte_with_Ack(num_bytes);
    151c:	80 e0       	ldi	r24, 0x00	; 0
    151e:	0e 94 16 0a 	call	0x142c	; 0x142c <send_byte_with_Ack>
send_byte_with_Nack(mode);
    1522:	8c 2f       	mov	r24, r28
    1524:	0e 94 20 0a 	call	0x1440	; 0x1440 <send_byte_with_Nack>
TWCR = (1 << TWINT);}
    1528:	80 e8       	ldi	r24, 0x80	; 128
    152a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
    152e:	cf 91       	pop	r28
    1530:	08 95       	ret

00001532 <I2C_Tx>:



/***********************************************************/
void I2C_Tx(char num_bytes, char mode, char s[]){
    1532:	cf 92       	push	r12
    1534:	df 92       	push	r13
    1536:	ef 92       	push	r14
    1538:	ff 92       	push	r15
    153a:	0f 93       	push	r16
    153c:	1f 93       	push	r17
    153e:	cf 93       	push	r28
    1540:	df 93       	push	r29
    1542:	08 2f       	mov	r16, r24
    1544:	c6 2f       	mov	r28, r22
    1546:	f4 2e       	mov	r15, r20
    1548:	15 2f       	mov	r17, r21
waiting_for_I2C_master;
    154a:	84 e4       	ldi	r24, 0x44	; 68
    154c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
    1550:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
    1554:	87 ff       	sbrs	r24, 7
    1556:	fc cf       	rjmp	.-8      	; 0x1550 <I2C_Tx+0x1e>
    1558:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fc0bb>
send_byte_with_Ack(num_bytes);
    155c:	80 2f       	mov	r24, r16
    155e:	0e 94 16 0a 	call	0x142c	; 0x142c <send_byte_with_Ack>
send_byte_with_Ack(mode);
    1562:	8c 2f       	mov	r24, r28
    1564:	0e 94 16 0a 	call	0x142c	; 0x142c <send_byte_with_Ack>
    1568:	cf 2d       	mov	r28, r15
    156a:	d1 2f       	mov	r29, r17
for (int m = 0;  m < num_bytes; m++){
    156c:	e1 2c       	mov	r14, r1
    156e:	f1 2c       	mov	r15, r1
    1570:	10 e0       	ldi	r17, 0x00	; 0
if (m==num_bytes-1){send_byte_with_Nack(s[m]);}
    1572:	68 01       	movw	r12, r16
    1574:	81 e0       	ldi	r24, 0x01	; 1
    1576:	c8 1a       	sub	r12, r24
    1578:	d1 08       	sbc	r13, r1
/***********************************************************/
void I2C_Tx(char num_bytes, char mode, char s[]){
waiting_for_I2C_master;
send_byte_with_Ack(num_bytes);
send_byte_with_Ack(mode);
for (int m = 0;  m < num_bytes; m++){
    157a:	e0 16       	cp	r14, r16
    157c:	f1 06       	cpc	r15, r17
    157e:	74 f4       	brge	.+28     	; 0x159c <I2C_Tx+0x6a>
if (m==num_bytes-1){send_byte_with_Nack(s[m]);}
    1580:	88 81       	ld	r24, Y
    1582:	ec 14       	cp	r14, r12
    1584:	fd 04       	cpc	r15, r13
    1586:	19 f4       	brne	.+6      	; 0x158e <I2C_Tx+0x5c>
    1588:	0e 94 20 0a 	call	0x1440	; 0x1440 <send_byte_with_Nack>
    158c:	02 c0       	rjmp	.+4      	; 0x1592 <I2C_Tx+0x60>
else {send_byte_with_Ack(s[m]);}}
    158e:	0e 94 16 0a 	call	0x142c	; 0x142c <send_byte_with_Ack>
/***********************************************************/
void I2C_Tx(char num_bytes, char mode, char s[]){
waiting_for_I2C_master;
send_byte_with_Ack(num_bytes);
send_byte_with_Ack(mode);
for (int m = 0;  m < num_bytes; m++){
    1592:	8f ef       	ldi	r24, 0xFF	; 255
    1594:	e8 1a       	sub	r14, r24
    1596:	f8 0a       	sbc	r15, r24
    1598:	21 96       	adiw	r28, 0x01	; 1
    159a:	ef cf       	rjmp	.-34     	; 0x157a <I2C_Tx+0x48>
if (m==num_bytes-1){send_byte_with_Nack(s[m]);}
else {send_byte_with_Ack(s[m]);}}
TWCR = (1 << TWINT);}										//Clear interrupt and close I2C slave
    159c:	80 e8       	ldi	r24, 0x80	; 128
    159e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
    15a2:	df 91       	pop	r29
    15a4:	cf 91       	pop	r28
    15a6:	1f 91       	pop	r17
    15a8:	0f 91       	pop	r16
    15aa:	ff 90       	pop	r15
    15ac:	ef 90       	pop	r14
    15ae:	df 90       	pop	r13
    15b0:	cf 90       	pop	r12
    15b2:	08 95       	ret

000015b4 <I2C_Tx_2_integers>:
void send_byte_with_Nack(char);
char receive_byte_with_Ack(void);
char receive_byte_with_Nack(void);

/************************************************************************/
void I2C_Tx_2_integers(unsigned int s1, unsigned int s2){			
    15b4:	cf 93       	push	r28
    15b6:	df 93       	push	r29
    15b8:	00 d0       	rcall	.+0      	; 0x15ba <I2C_Tx_2_integers+0x6>
    15ba:	00 d0       	rcall	.+0      	; 0x15bc <I2C_Tx_2_integers+0x8>
    15bc:	cd b7       	in	r28, 0x3d	; 61
    15be:	de b7       	in	r29, 0x3e	; 62
char num_bytes=4; char mode = 1; char s[4];
for (int m = 0;  m < 4; m++){
switch (m){
case 0: s[m] = s1; break; 											//Send S1 lower byte
    15c0:	89 83       	std	Y+1, r24	; 0x01
case 1: s[m] = s1 >> 8; break; 									//Send S1 higher byte									
    15c2:	9a 83       	std	Y+2, r25	; 0x02
case 2: s[m] = s2; 	break;											//Send S1 lower byte
    15c4:	6b 83       	std	Y+3, r22	; 0x03
case 3: s[m] = s2 >> 8; break;}}									//Send S1 higher byte
    15c6:	7c 83       	std	Y+4, r23	; 0x04
I2C_Tx(num_bytes,mode, s);}
    15c8:	ae 01       	movw	r20, r28
    15ca:	4f 5f       	subi	r20, 0xFF	; 255
    15cc:	5f 4f       	sbci	r21, 0xFF	; 255
    15ce:	61 e0       	ldi	r22, 0x01	; 1
    15d0:	84 e0       	ldi	r24, 0x04	; 4
    15d2:	0e 94 99 0a 	call	0x1532	; 0x1532 <I2C_Tx>
    15d6:	0f 90       	pop	r0
    15d8:	0f 90       	pop	r0
    15da:	0f 90       	pop	r0
    15dc:	0f 90       	pop	r0
    15de:	df 91       	pop	r29
    15e0:	cf 91       	pop	r28
    15e2:	08 95       	ret

000015e4 <I2C_Tx_any_segment>:


/************************************************************************/
void I2C_Tx_any_segment(char segment, char digit_num){
    15e4:	cf 93       	push	r28
    15e6:	df 93       	push	r29
    15e8:	00 d0       	rcall	.+0      	; 0x15ea <I2C_Tx_any_segment+0x6>
    15ea:	cd b7       	in	r28, 0x3d	; 61
    15ec:	de b7       	in	r29, 0x3e	; 62
char s[2]; char num_bytes=2; char mode = 3;
s[0] = segment;
    15ee:	89 83       	std	Y+1, r24	; 0x01
s[1] = digit_num; 
    15f0:	6a 83       	std	Y+2, r22	; 0x02
I2C_Tx(num_bytes,mode, s);}
    15f2:	ae 01       	movw	r20, r28
    15f4:	4f 5f       	subi	r20, 0xFF	; 255
    15f6:	5f 4f       	sbci	r21, 0xFF	; 255
    15f8:	63 e0       	ldi	r22, 0x03	; 3
    15fa:	82 e0       	ldi	r24, 0x02	; 2
    15fc:	0e 94 99 0a 	call	0x1532	; 0x1532 <I2C_Tx>
    1600:	0f 90       	pop	r0
    1602:	0f 90       	pop	r0
    1604:	df 91       	pop	r29
    1606:	cf 91       	pop	r28
    1608:	08 95       	ret

0000160a <I2C_Tx_any_segment_clear_all>:


/************************************************************************/
void I2C_Tx_any_segment_clear_all(void){
    160a:	cf 93       	push	r28
    160c:	df 93       	push	r29
    160e:	00 d0       	rcall	.+0      	; 0x1610 <I2C_Tx_any_segment_clear_all+0x6>
    1610:	cd b7       	in	r28, 0x3d	; 61
    1612:	de b7       	in	r29, 0x3e	; 62
char segment = 'a'; char digit_num = 0;
char s[2]; char num_bytes=2; char mode = 2;
s[0] = segment;
    1614:	81 e6       	ldi	r24, 0x61	; 97
    1616:	89 83       	std	Y+1, r24	; 0x01
s[1] = digit_num; 
    1618:	1a 82       	std	Y+2, r1	; 0x02
I2C_Tx(num_bytes,mode, s);}
    161a:	ae 01       	movw	r20, r28
    161c:	4f 5f       	subi	r20, 0xFF	; 255
    161e:	5f 4f       	sbci	r21, 0xFF	; 255
    1620:	62 e0       	ldi	r22, 0x02	; 2
    1622:	82 e0       	ldi	r24, 0x02	; 2
    1624:	0e 94 99 0a 	call	0x1532	; 0x1532 <I2C_Tx>
    1628:	0f 90       	pop	r0
    162a:	0f 90       	pop	r0
    162c:	df 91       	pop	r29
    162e:	cf 91       	pop	r28
    1630:	08 95       	ret

00001632 <I2C_Tx_8_byte_array>:


/************************************************************************/
void I2C_Tx_8_byte_array(char s[]){									//was I2C_Tx_1
char num_bytes=8; char mode=4;
I2C_Tx(num_bytes,mode, s);}
    1632:	ac 01       	movw	r20, r24
    1634:	64 e0       	ldi	r22, 0x04	; 4
    1636:	88 e0       	ldi	r24, 0x08	; 8
    1638:	0c 94 99 0a 	jmp	0x1532	; 0x1532 <I2C_Tx>

0000163c <fraction_to_decimal_string>:
long Binary_points_to_Decimal_Signed (long);



/******************************************************************************/
void fraction_to_decimal_string(long remainder, long denominator, char digits[]){
    163c:	4f 92       	push	r4
    163e:	5f 92       	push	r5
    1640:	6f 92       	push	r6
    1642:	7f 92       	push	r7
    1644:	8f 92       	push	r8
    1646:	9f 92       	push	r9
    1648:	af 92       	push	r10
    164a:	bf 92       	push	r11
    164c:	ff 92       	push	r15
    164e:	0f 93       	push	r16
    1650:	1f 93       	push	r17
    1652:	cf 93       	push	r28
    1654:	df 93       	push	r29
    1656:	4b 01       	movw	r8, r22
    1658:	5c 01       	movw	r10, r24
    165a:	29 01       	movw	r4, r18
    165c:	3a 01       	movw	r6, r20
    165e:	e8 01       	movw	r28, r16
    1660:	f8 01       	movw	r30, r16
    1662:	c8 01       	movw	r24, r16
    1664:	08 96       	adiw	r24, 0x08	; 8
long digit;
int m=6;

clear_digits;
    1666:	11 92       	st	Z+, r1
    1668:	e8 17       	cp	r30, r24
    166a:	f9 07       	cpc	r31, r25
    166c:	e1 f7       	brne	.-8      	; 0x1666 <fraction_to_decimal_string+0x2a>

digits[7]= '0';
    166e:	80 e3       	ldi	r24, 0x30	; 48
    1670:	8f 83       	std	Y+7, r24	; 0x07
digits[6] = '_';
    1672:	8f e5       	ldi	r24, 0x5F	; 95
    1674:	8e 83       	std	Y+6, r24	; 0x06
String_to_PC("0.");
    1676:	8a e0       	ldi	r24, 0x0A	; 10
    1678:	91 e0       	ldi	r25, 0x01	; 1
    167a:	0e 94 3b 01 	call	0x276	; 0x276 <String_to_PC>


/******************************************************************************/
void fraction_to_decimal_string(long remainder, long denominator, char digits[]){
long digit;
int m=6;
    167e:	06 e0       	ldi	r16, 0x06	; 6
    1680:	10 e0       	ldi	r17, 0x00	; 0

digits[7]= '0';
digits[6] = '_';
String_to_PC("0.");

while(switch_2_up){
    1682:	1e 9b       	sbis	0x03, 6	; 3
    1684:	28 c0       	rjmp	.+80     	; 0x16d6 <fraction_to_decimal_string+0x9a>
digit = (remainder *10/denominator);
    1686:	aa e0       	ldi	r26, 0x0A	; 10
    1688:	b0 e0       	ldi	r27, 0x00	; 0
    168a:	a5 01       	movw	r20, r10
    168c:	94 01       	movw	r18, r8
    168e:	0e 94 78 10 	call	0x20f0	; 0x20f0 <__muluhisi3>
remainder = ((remainder *10)%denominator);
    1692:	a3 01       	movw	r20, r6
    1694:	92 01       	movw	r18, r4
    1696:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__divmodsi4>
    169a:	4b 01       	movw	r8, r22
    169c:	5c 01       	movw	r10, r24

Char_to_PC(digit+'0');
    169e:	80 e3       	ldi	r24, 0x30	; 48
    16a0:	f8 2e       	mov	r15, r24
    16a2:	f2 0e       	add	r15, r18
    16a4:	8f 2d       	mov	r24, r15
    16a6:	0e 94 34 01 	call	0x268	; 0x268 <Char_to_PC>
if(m){digits[m-1] = (digit+'0');m--;I2C_Tx_8_byte_array(digits);Timer_T0_10mS_delay_x_m(12);}
    16aa:	01 15       	cp	r16, r1
    16ac:	11 05       	cpc	r17, r1
    16ae:	71 f0       	breq	.+28     	; 0x16cc <fraction_to_decimal_string+0x90>
    16b0:	fe 01       	movw	r30, r28
    16b2:	e0 0f       	add	r30, r16
    16b4:	f1 1f       	adc	r31, r17
    16b6:	31 97       	sbiw	r30, 0x01	; 1
    16b8:	f0 82       	st	Z, r15
    16ba:	01 50       	subi	r16, 0x01	; 1
    16bc:	11 09       	sbc	r17, r1
    16be:	ce 01       	movw	r24, r28
    16c0:	0e 94 19 0b 	call	0x1632	; 0x1632 <I2C_Tx_8_byte_array>
    16c4:	8c e0       	ldi	r24, 0x0C	; 12
    16c6:	90 e0       	ldi	r25, 0x00	; 0
    16c8:	0e 94 af 00 	call	0x15e	; 0x15e <Timer_T0_10mS_delay_x_m>
Timer_T0_10mS_delay_x_m(6);}}
    16cc:	86 e0       	ldi	r24, 0x06	; 6
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	0e 94 af 00 	call	0x15e	; 0x15e <Timer_T0_10mS_delay_x_m>
    16d4:	d6 cf       	rjmp	.-84     	; 0x1682 <fraction_to_decimal_string+0x46>
    16d6:	df 91       	pop	r29
    16d8:	cf 91       	pop	r28
    16da:	1f 91       	pop	r17
    16dc:	0f 91       	pop	r16
    16de:	ff 90       	pop	r15
    16e0:	bf 90       	pop	r11
    16e2:	af 90       	pop	r10
    16e4:	9f 90       	pop	r9
    16e6:	8f 90       	pop	r8
    16e8:	7f 90       	pop	r7
    16ea:	6f 90       	pop	r6
    16ec:	5f 90       	pop	r5
    16ee:	4f 90       	pop	r4
    16f0:	08 95       	ret

000016f2 <I2C_Tx_BWops>:

/************************************************************************/
void I2C_Tx_BWops(char s[]){										//Bit wise operations
char num_bytes=8;
char mode = 'G';
I2C_Tx(num_bytes,mode, s);}
    16f2:	ac 01       	movw	r20, r24
    16f4:	67 e4       	ldi	r22, 0x47	; 71
    16f6:	88 e0       	ldi	r24, 0x08	; 8
    16f8:	0c 94 99 0a 	jmp	0x1532	; 0x1532 <I2C_Tx>

000016fc <binary_char_from_KBD>:



/*******************************************************************************/
char binary_char_from_KBD(void){
    16fc:	ff 92       	push	r15
    16fe:	0f 93       	push	r16
    1700:	1f 93       	push	r17
    1702:	cf 93       	push	r28
    1704:	df 93       	push	r29
    1706:	cd b7       	in	r28, 0x3d	; 61
    1708:	de b7       	in	r29, 0x3e	; 62
    170a:	28 97       	sbiw	r28, 0x08	; 8
    170c:	0f b6       	in	r0, 0x3f	; 63
    170e:	f8 94       	cli
    1710:	de bf       	out	0x3e, r29	; 62
    1712:	0f be       	out	0x3f, r0	; 63
    1714:	cd bf       	out	0x3d, r28	; 61
    1716:	fe 01       	movw	r30, r28
    1718:	31 96       	adiw	r30, 0x01	; 1
    171a:	ce 01       	movw	r24, r28
    171c:	09 96       	adiw	r24, 0x09	; 9
    171e:	fe 2e       	mov	r15, r30
    1720:	0f 2f       	mov	r16, r31
char keypress=0, LSB, array[8];

for(int m = 0; m<=7; m++)array[m]=0;
    1722:	11 92       	st	Z+, r1
    1724:	8e 17       	cp	r24, r30
    1726:	9f 07       	cpc	r25, r31
    1728:	e1 f7       	brne	.-8      	; 0x1722 <binary_char_from_KBD+0x26>
    172a:	10 e0       	ldi	r17, 0x00	; 0
do{
LSB = wait_for_return_key(); 
    172c:	0e 94 1d 01 	call	0x23a	; 0x23a <wait_for_return_key>
if (LSB == '\r')break;
    1730:	8d 30       	cpi	r24, 0x0D	; 13
    1732:	69 f0       	breq	.+26     	; 0x174e <binary_char_from_KBD+0x52>
if((LSB != '0') && (LSB != '1'));
    1734:	90 ed       	ldi	r25, 0xD0	; 208
    1736:	98 0f       	add	r25, r24
    1738:	92 30       	cpi	r25, 0x02	; 2
    173a:	c0 f7       	brcc	.-16     	; 0x172c <binary_char_from_KBD+0x30>
    173c:	11 0f       	add	r17, r17
    173e:	10 53       	subi	r17, 0x30	; 48

else {keypress = (keypress << 1) + LSB - '0';
    1740:	18 0f       	add	r17, r24
array[0] = keypress;
    1742:	19 83       	std	Y+1, r17	; 0x01
I2C_Tx_BWops(array);
    1744:	8f 2d       	mov	r24, r15
    1746:	90 2f       	mov	r25, r16
    1748:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <I2C_Tx_BWops>
    174c:	ef cf       	rjmp	.-34     	; 0x172c <binary_char_from_KBD+0x30>
}} while(1);
return keypress;}
    174e:	81 2f       	mov	r24, r17
    1750:	28 96       	adiw	r28, 0x08	; 8
    1752:	0f b6       	in	r0, 0x3f	; 63
    1754:	f8 94       	cli
    1756:	de bf       	out	0x3e, r29	; 62
    1758:	0f be       	out	0x3f, r0	; 63
    175a:	cd bf       	out	0x3d, r28	; 61
    175c:	df 91       	pop	r29
    175e:	cf 91       	pop	r28
    1760:	1f 91       	pop	r17
    1762:	0f 91       	pop	r16
    1764:	ff 90       	pop	r15
    1766:	08 95       	ret

00001768 <I2C_Tx_OS_timer>:


/************************************************************************/
void I2C_Tx_OS_timer(char mode, char s[]){								
    1768:	ab 01       	movw	r20, r22
char num_bytes=8;
I2C_Tx(num_bytes,mode, s);}
    176a:	68 2f       	mov	r22, r24
    176c:	88 e0       	ldi	r24, 0x08	; 8
    176e:	0c 94 99 0a 	jmp	0x1532	; 0x1532 <I2C_Tx>

00001772 <I2C_Tx_8_byte_array_plus_mode>:
    1772:	0c 94 b4 0b 	jmp	0x1768	; 0x1768 <I2C_Tx_OS_timer>

00001776 <I2C_Tx_Clock_command>:

/************************************************************************/
void I2C_Tx_Clock_command(char timer_mode, char command){			
    1776:	cf 93       	push	r28
    1778:	df 93       	push	r29
    177a:	00 d0       	rcall	.+0      	; 0x177c <I2C_Tx_Clock_command+0x6>
    177c:	cd b7       	in	r28, 0x3d	; 61
    177e:	de b7       	in	r29, 0x3e	; 62
char s[2]; char num_bytes=1;
s[0] = command;
    1780:	69 83       	std	Y+1, r22	; 0x01
I2C_Tx(num_bytes, timer_mode, s);}
    1782:	ae 01       	movw	r20, r28
    1784:	4f 5f       	subi	r20, 0xFF	; 255
    1786:	5f 4f       	sbci	r21, 0xFF	; 255
    1788:	68 2f       	mov	r22, r24
    178a:	81 e0       	ldi	r24, 0x01	; 1
    178c:	0e 94 99 0a 	call	0x1532	; 0x1532 <I2C_Tx>
    1790:	0f 90       	pop	r0
    1792:	0f 90       	pop	r0
    1794:	df 91       	pop	r29
    1796:	cf 91       	pop	r28
    1798:	08 95       	ret

0000179a <I2C_Tx_display_char>:

/************************************************************************/
void I2C_Tx_display_char (char single_char, char sign_bit){
    179a:	cf 93       	push	r28
    179c:	df 93       	push	r29
    179e:	00 d0       	rcall	.+0      	; 0x17a0 <I2C_Tx_display_char+0x6>
    17a0:	cd b7       	in	r28, 0x3d	; 61
    17a2:	de b7       	in	r29, 0x3e	; 62
char s[2]; char num_bytes=2; char mode = 5;
s[0] = single_char;
    17a4:	89 83       	std	Y+1, r24	; 0x01
s[1] = sign_bit;
    17a6:	6a 83       	std	Y+2, r22	; 0x02
I2C_Tx(num_bytes, mode, s);}
    17a8:	ae 01       	movw	r20, r28
    17aa:	4f 5f       	subi	r20, 0xFF	; 255
    17ac:	5f 4f       	sbci	r21, 0xFF	; 255
    17ae:	65 e0       	ldi	r22, 0x05	; 5
    17b0:	82 e0       	ldi	r24, 0x02	; 2
    17b2:	0e 94 99 0a 	call	0x1532	; 0x1532 <I2C_Tx>
    17b6:	0f 90       	pop	r0
    17b8:	0f 90       	pop	r0
    17ba:	df 91       	pop	r29
    17bc:	cf 91       	pop	r28
    17be:	08 95       	ret

000017c0 <I2C_Tx_2_chars>:


/************************************************************************/
void I2C_Tx_2_chars(char mode, char letter, char digit_num){		//was I2C_Tx_4
    17c0:	cf 93       	push	r28
    17c2:	df 93       	push	r29
    17c4:	00 d0       	rcall	.+0      	; 0x17c6 <I2C_Tx_2_chars+0x6>
    17c6:	cd b7       	in	r28, 0x3d	; 61
    17c8:	de b7       	in	r29, 0x3e	; 62
char s[2]; char num_bytes=2;
for (int m = 0;  m < 2; m++){
switch(m){
case 0: s[m] = letter;break;
    17ca:	69 83       	std	Y+1, r22	; 0x01
case 1: s[m] = digit_num; break;}}
    17cc:	4a 83       	std	Y+2, r20	; 0x02
I2C_Tx(num_bytes,mode, s);}
    17ce:	ae 01       	movw	r20, r28
    17d0:	4f 5f       	subi	r20, 0xFF	; 255
    17d2:	5f 4f       	sbci	r21, 0xFF	; 255
    17d4:	68 2f       	mov	r22, r24
    17d6:	82 e0       	ldi	r24, 0x02	; 2
    17d8:	0e 94 99 0a 	call	0x1532	; 0x1532 <I2C_Tx>
    17dc:	0f 90       	pop	r0
    17de:	0f 90       	pop	r0
    17e0:	df 91       	pop	r29
    17e2:	cf 91       	pop	r28
    17e4:	08 95       	ret

000017e6 <I2C_Tx_LED_dimmer>:
TWCR = (1 << TWINT) | (1 << TWEN);		//clear interrupt and leave I2C slave active
TWCR |= (1 << TWEA) | (1 << TWIE);} 	//Slave mode with interrupt and Enable Acknowledge


/************************************************************************/
void I2C_Tx_LED_dimmer(void){
    17e6:	cf 93       	push	r28
    17e8:	df 93       	push	r29
    17ea:	1f 92       	push	r1
    17ec:	cd b7       	in	r28, 0x3d	; 61
    17ee:	de b7       	in	r29, 0x3e	; 62
char Dimmer_control;

if((PINB & 0x40)^0x40)Dimmer_control = 1;			//if Switch_2 down
    17f0:	1e 99       	sbic	0x03, 6	; 3
    17f2:	03 c0       	rjmp	.+6      	; 0x17fa <I2C_Tx_LED_dimmer+0x14>
    17f4:	81 e0       	ldi	r24, 0x01	; 1
    17f6:	89 83       	std	Y+1, r24	; 0x01
    17f8:	01 c0       	rjmp	.+2      	; 0x17fc <I2C_Tx_LED_dimmer+0x16>
else Dimmer_control = 0;							//Normal operation
    17fa:	19 82       	std	Y+1, r1	; 0x01

I2C_Tx(1, 'Q', &Dimmer_control);}	
    17fc:	ae 01       	movw	r20, r28
    17fe:	4f 5f       	subi	r20, 0xFF	; 255
    1800:	5f 4f       	sbci	r21, 0xFF	; 255
    1802:	61 e5       	ldi	r22, 0x51	; 81
    1804:	81 e0       	ldi	r24, 0x01	; 1
    1806:	0e 94 99 0a 	call	0x1532	; 0x1532 <I2C_Tx>
    180a:	0f 90       	pop	r0
    180c:	df 91       	pop	r29
    180e:	cf 91       	pop	r28
    1810:	08 95       	ret

00001812 <I2C_Tx_long>:
void Num_to_PC(char, long);
void String_to_PC(char*);
void Exp_to_PC (signed char);

/************************************************************************/
void I2C_Tx_long(long L_number){
    1812:	cf 93       	push	r28
    1814:	df 93       	push	r29
    1816:	00 d0       	rcall	.+0      	; 0x1818 <I2C_Tx_long+0x6>
    1818:	00 d0       	rcall	.+0      	; 0x181a <I2C_Tx_long+0x8>
    181a:	cd b7       	in	r28, 0x3d	; 61
    181c:	de b7       	in	r29, 0x3e	; 62
char s[4];
char num_bytes=4; char mode=6;
for(int m=0; m<=3; m++){s[m] = (L_number >> (8*(3-m)));}
    181e:	99 83       	std	Y+1, r25	; 0x01
    1820:	8a 83       	std	Y+2, r24	; 0x02
    1822:	7b 83       	std	Y+3, r23	; 0x03
    1824:	6c 83       	std	Y+4, r22	; 0x04
I2C_Tx(num_bytes,mode, s);}
    1826:	ae 01       	movw	r20, r28
    1828:	4f 5f       	subi	r20, 0xFF	; 255
    182a:	5f 4f       	sbci	r21, 0xFF	; 255
    182c:	66 e0       	ldi	r22, 0x06	; 6
    182e:	84 e0       	ldi	r24, 0x04	; 4
    1830:	0e 94 99 0a 	call	0x1532	; 0x1532 <I2C_Tx>
    1834:	0f 90       	pop	r0
    1836:	0f 90       	pop	r0
    1838:	0f 90       	pop	r0
    183a:	0f 90       	pop	r0
    183c:	df 91       	pop	r29
    183e:	cf 91       	pop	r28
    1840:	08 95       	ret

00001842 <I2C_Tx_real_num>:


/************************************************************************/
void I2C_Tx_real_num(long L_number){
    1842:	cf 93       	push	r28
    1844:	df 93       	push	r29
    1846:	00 d0       	rcall	.+0      	; 0x1848 <I2C_Tx_real_num+0x6>
    1848:	00 d0       	rcall	.+0      	; 0x184a <I2C_Tx_real_num+0x8>
    184a:	cd b7       	in	r28, 0x3d	; 61
    184c:	de b7       	in	r29, 0x3e	; 62
char s[4];
char num_bytes=4; char mode='J';
for(int m=0; m<=3; m++){s[m] = (L_number >> (8*(3-m)));}
    184e:	99 83       	std	Y+1, r25	; 0x01
    1850:	8a 83       	std	Y+2, r24	; 0x02
    1852:	7b 83       	std	Y+3, r23	; 0x03
    1854:	6c 83       	std	Y+4, r22	; 0x04
I2C_Tx(num_bytes,mode, s);}
    1856:	ae 01       	movw	r20, r28
    1858:	4f 5f       	subi	r20, 0xFF	; 255
    185a:	5f 4f       	sbci	r21, 0xFF	; 255
    185c:	6a e4       	ldi	r22, 0x4A	; 74
    185e:	84 e0       	ldi	r24, 0x04	; 4
    1860:	0e 94 99 0a 	call	0x1532	; 0x1532 <I2C_Tx>
    1864:	0f 90       	pop	r0
    1866:	0f 90       	pop	r0
    1868:	0f 90       	pop	r0
    186a:	0f 90       	pop	r0
    186c:	df 91       	pop	r29
    186e:	cf 91       	pop	r28
    1870:	08 95       	ret

00001872 <I2C_Tx_float_num>:

/************************************************************************/
void I2C_Tx_float_num(long L_number, char expnt){
    1872:	cf 93       	push	r28
    1874:	df 93       	push	r29
    1876:	00 d0       	rcall	.+0      	; 0x1878 <I2C_Tx_float_num+0x6>
    1878:	00 d0       	rcall	.+0      	; 0x187a <I2C_Tx_float_num+0x8>
    187a:	1f 92       	push	r1
    187c:	cd b7       	in	r28, 0x3d	; 61
    187e:	de b7       	in	r29, 0x3e	; 62
char s[5];
char num_bytes=5; char mode='K';
for(int m=0; m<=3; m++){s[m] = (L_number >> (8*(3-m)));}
    1880:	99 83       	std	Y+1, r25	; 0x01
    1882:	8a 83       	std	Y+2, r24	; 0x02
    1884:	7b 83       	std	Y+3, r23	; 0x03
    1886:	6c 83       	std	Y+4, r22	; 0x04
s[4] = expnt;
    1888:	4d 83       	std	Y+5, r20	; 0x05
I2C_Tx(num_bytes,mode, s);}
    188a:	ae 01       	movw	r20, r28
    188c:	4f 5f       	subi	r20, 0xFF	; 255
    188e:	5f 4f       	sbci	r21, 0xFF	; 255
    1890:	6b e4       	ldi	r22, 0x4B	; 75
    1892:	85 e0       	ldi	r24, 0x05	; 5
    1894:	0e 94 99 0a 	call	0x1532	; 0x1532 <I2C_Tx>
    1898:	0f 90       	pop	r0
    189a:	0f 90       	pop	r0
    189c:	0f 90       	pop	r0
    189e:	0f 90       	pop	r0
    18a0:	0f 90       	pop	r0
    18a2:	df 91       	pop	r29
    18a4:	cf 91       	pop	r28
    18a6:	08 95       	ret

000018a8 <I2C_Tx_Initiate_tables>:


/************************************************************************/
void I2C_Tx_Initiate_tables(char s[]){									//was I2C_Tx_1
char num_bytes=8; char mode=7;
I2C_Tx(num_bytes,mode, s);}
    18a8:	ac 01       	movw	r20, r24
    18aa:	67 e0       	ldi	r22, 0x07	; 7
    18ac:	88 e0       	ldi	r24, 0x08	; 8
    18ae:	0c 94 99 0a 	jmp	0x1532	; 0x1532 <I2C_Tx>

000018b2 <I2C_Tx_Inc_tables>:

/************************************************************************/
void I2C_Tx_Inc_tables(char s[]){
char num_bytes=8; char mode=7;
s[7] = '1';
    18b2:	21 e3       	ldi	r18, 0x31	; 49
    18b4:	fc 01       	movw	r30, r24
    18b6:	27 83       	std	Z+7, r18	; 0x07
I2C_Tx(num_bytes,mode, s);}
    18b8:	ac 01       	movw	r20, r24
    18ba:	67 e0       	ldi	r22, 0x07	; 7
    18bc:	88 e0       	ldi	r24, 0x08	; 8
    18be:	0c 94 99 0a 	jmp	0x1532	; 0x1532 <I2C_Tx>

000018c2 <I2C_Tx_dec_tables>:

/************************************************************************/
void I2C_Tx_dec_tables(char s[]){
char num_bytes=8; char mode=7;
s[7] = '2';
    18c2:	22 e3       	ldi	r18, 0x32	; 50
    18c4:	fc 01       	movw	r30, r24
    18c6:	27 83       	std	Z+7, r18	; 0x07
I2C_Tx(num_bytes,mode, s);}
    18c8:	ac 01       	movw	r20, r24
    18ca:	67 e0       	ldi	r22, 0x07	; 7
    18cc:	88 e0       	ldi	r24, 0x08	; 8
    18ce:	0c 94 99 0a 	jmp	0x1532	; 0x1532 <I2C_Tx>

000018d2 <I2C_Tx_2URNs_from_IO>:


/************************************************************************/
void I2C_Tx_2URNs_from_IO(char s[]){								//Two unsigned real numbers to display
char num_bytes=8; char mode=8;
I2C_Tx(num_bytes,mode, s);}
    18d2:	ac 01       	movw	r20, r24
    18d4:	68 e0       	ldi	r22, 0x08	; 8
    18d6:	88 e0       	ldi	r24, 0x08	; 8
    18d8:	0c 94 99 0a 	jmp	0x1532	; 0x1532 <I2C_Tx>

000018dc <I2C_Tx_accumulator_op>:


/************************************************************************/
void I2C_Tx_accumulator_op(char s[],char Op){			//was I2C_Tx_5
    18dc:	ac 01       	movw	r20, r24
char num_bytes, mode;

switch(Op){
    18de:	69 34       	cpi	r22, 0x49	; 73
    18e0:	29 f0       	breq	.+10     	; 0x18ec <I2C_Tx_accumulator_op+0x10>
    18e2:	6e 34       	cpi	r22, 0x4E	; 78
    18e4:	71 f0       	breq	.+28     	; 0x1902 <I2C_Tx_accumulator_op+0x26>
    18e6:	64 34       	cpi	r22, 0x44	; 68
    18e8:	c1 f4       	brne	.+48     	; 0x191a <I2C_Tx_accumulator_op+0x3e>
    18ea:	14 c0       	rjmp	.+40     	; 0x1914 <I2C_Tx_accumulator_op+0x38>
    18ec:	fc 01       	movw	r30, r24
    18ee:	08 96       	adiw	r24, 0x08	; 8

case 'I': for (int m = 0; m < 8; m++)s[m] = 0;
    18f0:	11 92       	st	Z+, r1
    18f2:	8e 17       	cp	r24, r30
    18f4:	9f 07       	cpc	r25, r31
    18f6:	e1 f7       	brne	.-8      	; 0x18f0 <I2C_Tx_accumulator_op+0x14>
s[0] = '0'; num_bytes=8; mode = 4;
    18f8:	80 e3       	ldi	r24, 0x30	; 48
    18fa:	fa 01       	movw	r30, r20
    18fc:	80 83       	st	Z, r24
I2C_Tx(num_bytes,mode, s); break;
    18fe:	64 e0       	ldi	r22, 0x04	; 4
    1900:	0a c0       	rjmp	.+20     	; 0x1916 <I2C_Tx_accumulator_op+0x3a>
    1902:	fc 01       	movw	r30, r24
    1904:	08 96       	adiw	r24, 0x08	; 8
case 'D': num_bytes=8; mode = 'B';
I2C_Tx(num_bytes,mode, s); break;
case 'N': for (int m = 0; m < 8; m++)s[m] = 0;
    1906:	11 92       	st	Z+, r1
    1908:	e8 17       	cp	r30, r24
    190a:	f9 07       	cpc	r31, r25
    190c:	e1 f7       	brne	.-8      	; 0x1906 <I2C_Tx_accumulator_op+0x2a>
s[0] = '0'; num_bytes=8; mode = 'B';
    190e:	80 e3       	ldi	r24, 0x30	; 48
    1910:	fa 01       	movw	r30, r20
    1912:	80 83       	st	Z, r24
I2C_Tx(num_bytes,mode, s); break;
    1914:	62 e4       	ldi	r22, 0x42	; 66
    1916:	88 e0       	ldi	r24, 0x08	; 8
    1918:	04 c0       	rjmp	.+8      	; 0x1922 <I2C_Tx_accumulator_op+0x46>
default: mode = 'A'; num_bytes=9;
s[8] = Op; I2C_Tx(num_bytes,mode, s); break;}}
    191a:	fc 01       	movw	r30, r24
    191c:	60 87       	std	Z+8, r22	; 0x08
    191e:	61 e4       	ldi	r22, 0x41	; 65
    1920:	89 e0       	ldi	r24, 0x09	; 9
    1922:	0c 94 99 0a 	jmp	0x1532	; 0x1532 <I2C_Tx>

00001926 <receive_byte_with_Ack>:
while (!(TWCR & (1 << TWINT)));}

/***********************************************************/
char receive_byte_with_Ack(void){
char byte;
TWCR = (1 << TWEA) | (1 << TWEN) | (1 << TWINT);		//Set Ack enable and clear interrupt
    1926:	84 ec       	ldi	r24, 0xC4	; 196
    1928:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
while (!(TWCR & (1 << TWINT)));						//Wait for interrupt
    192c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
    1930:	87 ff       	sbrs	r24, 7
    1932:	fc cf       	rjmp	.-8      	; 0x192c <receive_byte_with_Ack+0x6>
byte = TWDR;
    1934:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fc0bb>
return byte;}
    1938:	08 95       	ret

0000193a <receive_byte_with_Nack>:

/***********************************************************/
char receive_byte_with_Nack(void){
char byte;
TWCR = (1 << TWEN) | (1 << TWINT);		//Set Ack enable and clear interrupt
    193a:	84 e8       	ldi	r24, 0x84	; 132
    193c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
while (!(TWCR & (1 << TWINT)));						//Wait for interrupt
    1940:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
    1944:	87 ff       	sbrs	r24, 7
    1946:	fc cf       	rjmp	.-8      	; 0x1940 <receive_byte_with_Nack+0x6>
byte = TWDR;
    1948:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fc0bb>
return byte;}
    194c:	08 95       	ret

0000194e <I2C_displayToNum>:
if(float_display_mode == '2')break;}
PCMSK0 = PCMSK0_backup;
PCMSK2 = PCMSK2_backup;}

/************************************************************************/
long I2C_displayToNum(void){		
    194e:	cf 92       	push	r12
    1950:	df 92       	push	r13
    1952:	ef 92       	push	r14
    1954:	ff 92       	push	r15
    1956:	cf 93       	push	r28
    1958:	df 93       	push	r29
long L_number = 0;
char receive_byte;
char num_bytes=0;
char mode = 'I';

waiting_for_I2C_master;		
    195a:	84 e4       	ldi	r24, 0x44	; 68
    195c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
    1960:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
    1964:	87 ff       	sbrs	r24, 7
    1966:	fc cf       	rjmp	.-8      	; 0x1960 <I2C_displayToNum+0x12>
    1968:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fc0bb>
send_byte_with_Ack(num_bytes);
    196c:	80 e0       	ldi	r24, 0x00	; 0
    196e:	0e 94 16 0a 	call	0x142c	; 0x142c <send_byte_with_Ack>
send_byte_with_Nack(mode);
    1972:	89 e4       	ldi	r24, 0x49	; 73
    1974:	0e 94 20 0a 	call	0x1440	; 0x1440 <send_byte_with_Nack>
TWCR = (1 << TWINT) | (1 << TWEN);			//clear interrupt and leave I2C active
    1978:	84 e8       	ldi	r24, 0x84	; 132
    197a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
waiting_for_I2C_master;
    197e:	84 e4       	ldi	r24, 0x44	; 68
    1980:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
    1984:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
    1988:	87 ff       	sbrs	r24, 7
    198a:	fc cf       	rjmp	.-8      	; 0x1984 <I2C_displayToNum+0x36>
    198c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fc0bb>

for (int m = 0; m<=3; m++){				//Receive 4 chars and assemble into unsigned long result
    1990:	c0 e0       	ldi	r28, 0x00	; 0
    1992:	d0 e0       	ldi	r29, 0x00	; 0
PCMSK0 = PCMSK0_backup;
PCMSK2 = PCMSK2_backup;}

/************************************************************************/
long I2C_displayToNum(void){		
long L_number = 0;
    1994:	c1 2c       	mov	r12, r1
    1996:	d1 2c       	mov	r13, r1
    1998:	76 01       	movw	r14, r12
send_byte_with_Nack(mode);
TWCR = (1 << TWINT) | (1 << TWEN);			//clear interrupt and leave I2C active
waiting_for_I2C_master;

for (int m = 0; m<=3; m++){				//Receive 4 chars and assemble into unsigned long result
if (m ==3){receive_byte = receive_byte_with_Nack();}
    199a:	c3 30       	cpi	r28, 0x03	; 3
    199c:	d1 05       	cpc	r29, r1
    199e:	39 f4       	brne	.+14     	; 0x19ae <I2C_displayToNum+0x60>
    19a0:	0e 94 9d 0c 	call	0x193a	; 0x193a <receive_byte_with_Nack>
else {receive_byte = receive_byte_with_Ack();}
switch(m){
case 0: case 1: case 2:L_number =  L_number + receive_byte; 
L_number = L_number << 8; break;
case 3: L_number =  L_number + receive_byte; break;}}
    19a4:	c8 0e       	add	r12, r24
    19a6:	d1 1c       	adc	r13, r1
    19a8:	e1 1c       	adc	r14, r1
    19aa:	f1 1c       	adc	r15, r1
    19ac:	0a c0       	rjmp	.+20     	; 0x19c2 <I2C_displayToNum+0x74>
TWCR = (1 << TWINT) | (1 << TWEN);			//clear interrupt and leave I2C active
waiting_for_I2C_master;

for (int m = 0; m<=3; m++){				//Receive 4 chars and assemble into unsigned long result
if (m ==3){receive_byte = receive_byte_with_Nack();}
else {receive_byte = receive_byte_with_Ack();}
    19ae:	0e 94 93 0c 	call	0x1926	; 0x1926 <receive_byte_with_Ack>
switch(m){
case 0: case 1: case 2:L_number =  L_number + receive_byte; 
    19b2:	c8 0e       	add	r12, r24
    19b4:	d1 1c       	adc	r13, r1
    19b6:	e1 1c       	adc	r14, r1
    19b8:	f1 1c       	adc	r15, r1
L_number = L_number << 8; break;
    19ba:	fe 2c       	mov	r15, r14
    19bc:	ed 2c       	mov	r14, r13
    19be:	dc 2c       	mov	r13, r12
    19c0:	cc 24       	eor	r12, r12
send_byte_with_Ack(num_bytes);
send_byte_with_Nack(mode);
TWCR = (1 << TWINT) | (1 << TWEN);			//clear interrupt and leave I2C active
waiting_for_I2C_master;

for (int m = 0; m<=3; m++){				//Receive 4 chars and assemble into unsigned long result
    19c2:	21 96       	adiw	r28, 0x01	; 1
    19c4:	c4 30       	cpi	r28, 0x04	; 4
    19c6:	d1 05       	cpc	r29, r1
    19c8:	41 f7       	brne	.-48     	; 0x199a <I2C_displayToNum+0x4c>
else {receive_byte = receive_byte_with_Ack();}
switch(m){
case 0: case 1: case 2:L_number =  L_number + receive_byte; 
L_number = L_number << 8; break;
case 3: L_number =  L_number + receive_byte; break;}}
clear_I2C_interrupt;
    19ca:	80 e8       	ldi	r24, 0x80	; 128
    19cc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
return L_number;}
    19d0:	c7 01       	movw	r24, r14
    19d2:	b6 01       	movw	r22, r12
    19d4:	df 91       	pop	r29
    19d6:	cf 91       	pop	r28
    19d8:	ff 90       	pop	r15
    19da:	ef 90       	pop	r14
    19dc:	df 90       	pop	r13
    19de:	cf 90       	pop	r12
    19e0:	08 95       	ret

000019e2 <Num_from_KBD>:
void I2C_Tx_8_byte_array(char*);



/*******************************************************************************/
long Num_from_KBD(char digits[]){
    19e2:	cf 93       	push	r28
    19e4:	df 93       	push	r29
    19e6:	ec 01       	movw	r28, r24
    19e8:	08 96       	adiw	r24, 0x08	; 8
    19ea:	fe 01       	movw	r30, r28
char keypress;
for(int n = 0; n<=7; n++) digits[n] = 0; 
    19ec:	11 92       	st	Z+, r1
    19ee:	e8 17       	cp	r30, r24
    19f0:	f9 07       	cpc	r31, r25
    19f2:	e1 f7       	brne	.-8      	; 0x19ec <Num_from_KBD+0xa>

do
{keypress =  waitforkeypress();} 
    19f4:	0e 94 fe 00 	call	0x1fc	; 0x1fc <waitforkeypress>
    19f8:	90 ed       	ldi	r25, 0xD0	; 208
    19fa:	98 0f       	add	r25, r24
    19fc:	9a 30       	cpi	r25, 0x0A	; 10
    19fe:	c0 f4       	brcc	.+48     	; 0x1a30 <Num_from_KBD+0x4e>
while ((!(decimal_digit(keypress)))&& (keypress != '-'));						//(non_decimal_char(keypress));  //Not -,0,1,2,3,4,5,6,7,8 or 9
digits[0] = keypress;
    1a00:	88 83       	st	Y, r24
I2C_Tx_8_byte_array(digits);
    1a02:	ce 01       	movw	r24, r28
    1a04:	0e 94 19 0b 	call	0x1632	; 0x1632 <I2C_Tx_8_byte_array>

while(1){
if ((keypress = wait_for_return_key())  =='\r')break;
    1a08:	0e 94 1d 01 	call	0x23a	; 0x23a <wait_for_return_key>
    1a0c:	8d 30       	cpi	r24, 0x0D	; 13
    1a0e:	61 f0       	breq	.+24     	; 0x1a28 <Num_from_KBD+0x46>
    1a10:	90 ed       	ldi	r25, 0xD0	; 208
    1a12:	98 0f       	add	r25, r24
    1a14:	9a 30       	cpi	r25, 0x0A	; 10
    1a16:	c0 f7       	brcc	.-16     	; 0x1a08 <Num_from_KBD+0x26>
    1a18:	fe 01       	movw	r30, r28
    1a1a:	37 96       	adiw	r30, 0x07	; 7
if (decimal_digit (keypress))						//012345678or9	:Builds up the number one keypress at a time
{for(int n = 7; n>=1; n--)
digits[n] = digits[n-1];							//Shifts display left for each keypress
    1a1c:	92 91       	ld	r25, -Z
    1a1e:	91 83       	std	Z+1, r25	; 0x01
I2C_Tx_8_byte_array(digits);

while(1){
if ((keypress = wait_for_return_key())  =='\r')break;
if (decimal_digit (keypress))						//012345678or9	:Builds up the number one keypress at a time
{for(int n = 7; n>=1; n--)
    1a20:	ce 17       	cp	r28, r30
    1a22:	df 07       	cpc	r29, r31
    1a24:	d9 f7       	brne	.-10     	; 0x1a1c <Num_from_KBD+0x3a>
    1a26:	ec cf       	rjmp	.-40     	; 0x1a00 <Num_from_KBD+0x1e>
digits[n] = digits[n-1];							//Shifts display left for each keypress
digits[0] = keypress;
I2C_Tx_8_byte_array(digits);}}
						
return I2C_displayToNum();}
    1a28:	df 91       	pop	r29
    1a2a:	cf 91       	pop	r28
    1a2c:	0c 94 a7 0c 	jmp	0x194e	; 0x194e <I2C_displayToNum>
char keypress;
for(int n = 0; n<=7; n++) digits[n] = 0; 

do
{keypress =  waitforkeypress();} 
while ((!(decimal_digit(keypress)))&& (keypress != '-'));						//(non_decimal_char(keypress));  //Not -,0,1,2,3,4,5,6,7,8 or 9
    1a30:	8d 32       	cpi	r24, 0x2D	; 45
    1a32:	01 f7       	brne	.-64     	; 0x19f4 <Num_from_KBD+0x12>
    1a34:	e5 cf       	rjmp	.-54     	; 0x1a00 <Num_from_KBD+0x1e>

00001a36 <I2C_Rx_RN>:

/***********************************************************/
void I2C_Rx_RN(unsigned long *RHSofDP, signed char *res_exp){
    1a36:	ef 92       	push	r14
    1a38:	ff 92       	push	r15
    1a3a:	0f 93       	push	r16
    1a3c:	1f 93       	push	r17
    1a3e:	cf 93       	push	r28
    1a40:	df 93       	push	r29
    1a42:	8c 01       	movw	r16, r24
    1a44:	7b 01       	movw	r14, r22
char receive_byte;				

waiting_for_I2C_master;						
    1a46:	84 e4       	ldi	r24, 0x44	; 68
    1a48:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
    1a4c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
    1a50:	87 ff       	sbrs	r24, 7
    1a52:	fc cf       	rjmp	.-8      	; 0x1a4c <I2C_Rx_RN+0x16>
    1a54:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7fc0bb>

for (int m = 0; m<=3; m++){				//Receive 4 chars and assemble into unsigned long result
    1a58:	c0 e0       	ldi	r28, 0x00	; 0
    1a5a:	d0 e0       	ldi	r29, 0x00	; 0
receive_byte = receive_byte_with_Ack();
    1a5c:	0e 94 93 0c 	call	0x1926	; 0x1926 <receive_byte_with_Ack>
    1a60:	48 2f       	mov	r20, r24
    1a62:	50 e0       	ldi	r21, 0x00	; 0
    1a64:	60 e0       	ldi	r22, 0x00	; 0
    1a66:	70 e0       	ldi	r23, 0x00	; 0
    1a68:	f8 01       	movw	r30, r16
    1a6a:	80 81       	ld	r24, Z
    1a6c:	91 81       	ldd	r25, Z+1	; 0x01
    1a6e:	a2 81       	ldd	r26, Z+2	; 0x02
    1a70:	b3 81       	ldd	r27, Z+3	; 0x03
switch(m){
case 0: case 1: case 2:*RHSofDP =  *RHSofDP + receive_byte; 
*RHSofDP = *RHSofDP << 8; break;
case 3: *RHSofDP =  *RHSofDP + receive_byte; break;}}
    1a72:	48 0f       	add	r20, r24
    1a74:	59 1f       	adc	r21, r25
    1a76:	6a 1f       	adc	r22, r26
    1a78:	7b 1f       	adc	r23, r27

waiting_for_I2C_master;						

for (int m = 0; m<=3; m++){				//Receive 4 chars and assemble into unsigned long result
receive_byte = receive_byte_with_Ack();
switch(m){
    1a7a:	c3 30       	cpi	r28, 0x03	; 3
    1a7c:	d1 05       	cpc	r29, r1
    1a7e:	29 f0       	breq	.+10     	; 0x1a8a <I2C_Rx_RN+0x54>
case 0: case 1: case 2:*RHSofDP =  *RHSofDP + receive_byte; 
*RHSofDP = *RHSofDP << 8; break;
    1a80:	76 2f       	mov	r23, r22
    1a82:	65 2f       	mov	r22, r21
    1a84:	54 2f       	mov	r21, r20
    1a86:	44 27       	eor	r20, r20
    1a88:	01 c0       	rjmp	.+2      	; 0x1a8c <I2C_Rx_RN+0x56>
case 3: *RHSofDP =  *RHSofDP + receive_byte; break;}}
    1a8a:	f8 01       	movw	r30, r16
    1a8c:	40 83       	st	Z, r20
    1a8e:	51 83       	std	Z+1, r21	; 0x01
    1a90:	62 83       	std	Z+2, r22	; 0x02
    1a92:	73 83       	std	Z+3, r23	; 0x03
void I2C_Rx_RN(unsigned long *RHSofDP, signed char *res_exp){
char receive_byte;				

waiting_for_I2C_master;						

for (int m = 0; m<=3; m++){				//Receive 4 chars and assemble into unsigned long result
    1a94:	21 96       	adiw	r28, 0x01	; 1
    1a96:	c4 30       	cpi	r28, 0x04	; 4
    1a98:	d1 05       	cpc	r29, r1
    1a9a:	01 f7       	brne	.-64     	; 0x1a5c <I2C_Rx_RN+0x26>
switch(m){
case 0: case 1: case 2:*RHSofDP =  *RHSofDP + receive_byte; 
*RHSofDP = *RHSofDP << 8; break;
case 3: *RHSofDP =  *RHSofDP + receive_byte; break;}}

*res_exp = receive_byte_with_Nack();		//last char is the exponent
    1a9c:	0e 94 9d 0c 	call	0x193a	; 0x193a <receive_byte_with_Nack>
    1aa0:	f7 01       	movw	r30, r14
    1aa2:	80 83       	st	Z, r24
clear_I2C_interrupt;}					
    1aa4:	80 e8       	ldi	r24, 0x80	; 128
    1aa6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7fc0bc>
    1aaa:	df 91       	pop	r29
    1aac:	cf 91       	pop	r28
    1aae:	1f 91       	pop	r17
    1ab0:	0f 91       	pop	r16
    1ab2:	ff 90       	pop	r15
    1ab4:	ef 90       	pop	r14
    1ab6:	08 95       	ret

00001ab8 <I2C_Tx_Uarithmetic_OP>:
s[7] = '2';
I2C_Tx(num_bytes,mode, s);}


/************************************************************************/
void I2C_Tx_Uarithmetic_OP(char Op){
    1ab8:	cf 93       	push	r28
    1aba:	df 93       	push	r29
    1abc:	cd b7       	in	r28, 0x3d	; 61
    1abe:	de b7       	in	r29, 0x3e	; 62
    1ac0:	27 97       	sbiw	r28, 0x07	; 7
    1ac2:	0f b6       	in	r0, 0x3f	; 63
    1ac4:	f8 94       	cli
    1ac6:	de bf       	out	0x3e, r29	; 62
    1ac8:	0f be       	out	0x3f, r0	; 63
    1aca:	cd bf       	out	0x3d, r28	; 61
unsigned long RHSofDP; 
signed char res_exp;
char num_bytes=1; char mode=9;
char s[2];
RHSofDP=0; res_exp=0;
    1acc:	19 82       	std	Y+1, r1	; 0x01
    1ace:	1a 82       	std	Y+2, r1	; 0x02
    1ad0:	1b 82       	std	Y+3, r1	; 0x03
    1ad2:	1c 82       	std	Y+4, r1	; 0x04
    1ad4:	1f 82       	std	Y+7, r1	; 0x07
s[0] = Op;
    1ad6:	8d 83       	std	Y+5, r24	; 0x05
I2C_Tx(num_bytes,mode,s);
    1ad8:	ae 01       	movw	r20, r28
    1ada:	4b 5f       	subi	r20, 0xFB	; 251
    1adc:	5f 4f       	sbci	r21, 0xFF	; 255
    1ade:	69 e0       	ldi	r22, 0x09	; 9
    1ae0:	81 e0       	ldi	r24, 0x01	; 1
    1ae2:	0e 94 99 0a 	call	0x1532	; 0x1532 <I2C_Tx>
if(s[0] == 'A')return;{
    1ae6:	8d 81       	ldd	r24, Y+5	; 0x05
    1ae8:	81 34       	cpi	r24, 0x41	; 65
    1aea:	a9 f0       	breq	.+42     	; 0x1b16 <I2C_Tx_Uarithmetic_OP+0x5e>
I2C_Rx_RN(&RHSofDP, &res_exp);
    1aec:	be 01       	movw	r22, r28
    1aee:	69 5f       	subi	r22, 0xF9	; 249
    1af0:	7f 4f       	sbci	r23, 0xFF	; 255
    1af2:	ce 01       	movw	r24, r28
    1af4:	01 96       	adiw	r24, 0x01	; 1
    1af6:	0e 94 1b 0d 	call	0x1a36	; 0x1a36 <I2C_Rx_RN>
String_to_PC("\r\n0.");Num_to_PC(10,RHSofDP); Exp_to_PC(res_exp);} }
    1afa:	88 e0       	ldi	r24, 0x08	; 8
    1afc:	91 e0       	ldi	r25, 0x01	; 1
    1afe:	0e 94 3b 01 	call	0x276	; 0x276 <String_to_PC>
    1b02:	49 81       	ldd	r20, Y+1	; 0x01
    1b04:	5a 81       	ldd	r21, Y+2	; 0x02
    1b06:	6b 81       	ldd	r22, Y+3	; 0x03
    1b08:	7c 81       	ldd	r23, Y+4	; 0x04
    1b0a:	8a e0       	ldi	r24, 0x0A	; 10
    1b0c:	0e 94 10 02 	call	0x420	; 0x420 <Num_to_PC>
    1b10:	8f 81       	ldd	r24, Y+7	; 0x07
    1b12:	0e 94 3e 02 	call	0x47c	; 0x47c <Exp_to_PC>
    1b16:	27 96       	adiw	r28, 0x07	; 7
    1b18:	0f b6       	in	r0, 0x3f	; 63
    1b1a:	f8 94       	cli
    1b1c:	de bf       	out	0x3e, r29	; 62
    1b1e:	0f be       	out	0x3f, r0	; 63
    1b20:	cd bf       	out	0x3d, r28	; 61
    1b22:	df 91       	pop	r29
    1b24:	cf 91       	pop	r28
    1b26:	08 95       	ret

00001b28 <Num_from_KBD_Local>:




/******************************************************************************************/
long Num_from_KBD_Local(char digits[]){						//Local version, ignores negative number
    1b28:	cf 93       	push	r28
    1b2a:	df 93       	push	r29
    1b2c:	ec 01       	movw	r28, r24
    1b2e:	08 96       	adiw	r24, 0x08	; 8
    1b30:	fe 01       	movw	r30, r28
	char keypress;												//library version does not.
	for(int n = 0; n<=7; n++) digits[n] = 0; 					//Clear array
    1b32:	11 92       	st	Z+, r1
    1b34:	e8 17       	cp	r30, r24
    1b36:	f9 07       	cpc	r31, r25
    1b38:	e1 f7       	brne	.-8      	; 0x1b32 <Num_from_KBD_Local+0xa>
	String_to_PC("Echo keypresses ");
    1b3a:	8d e0       	ldi	r24, 0x0D	; 13
    1b3c:	91 e0       	ldi	r25, 0x01	; 1
    1b3e:	0e 94 3b 01 	call	0x276	; 0x276 <String_to_PC>
	do
	{keypress =  waitforkeypress();}							//wait for first keypress
    1b42:	0e 94 fe 00 	call	0x1fc	; 0x1fc <waitforkeypress>
    1b46:	90 ed       	ldi	r25, 0xD0	; 208
    1b48:	98 0f       	add	r25, r24
    1b4a:	9a 30       	cpi	r25, 0x0A	; 10
    1b4c:	d0 f7       	brcc	.-12     	; 0x1b42 <Num_from_KBD_Local+0x1a>

	while ((keypress = wait_for_return_key()) != '\r'){		//Continue until return key is pressed

		if (decimal_digit (keypress))								//Ignore illegal characters
		{for(int n = 7; n>=1; n--)digits[n] = digits[n-1];		//Shifts display left for each keypress
			digits[0] = keypress;										//Places new digit in array[0]
    1b4e:	88 83       	st	Y, r24
			Char_to_PC(digits[0]);										//Updates the PC
    1b50:	0e 94 34 01 	call	0x268	; 0x268 <Char_to_PC>
		I2C_Tx_8_byte_array(digits);}}								//Updates the display
    1b54:	ce 01       	movw	r24, r28
    1b56:	0e 94 19 0b 	call	0x1632	; 0x1632 <I2C_Tx_8_byte_array>
	while (!(decimal_digit(keypress)));						//Ignore illegal characters
	digits[0] = keypress;										//Save first one to array
	Char_to_PC(digits[0]);
	I2C_Tx_8_byte_array(digits);								//send array to display

	while ((keypress = wait_for_return_key()) != '\r'){		//Continue until return key is pressed
    1b5a:	0e 94 1d 01 	call	0x23a	; 0x23a <wait_for_return_key>
    1b5e:	8d 30       	cpi	r24, 0x0D	; 13
    1b60:	61 f0       	breq	.+24     	; 0x1b7a <Num_from_KBD_Local+0x52>
    1b62:	90 ed       	ldi	r25, 0xD0	; 208
    1b64:	98 0f       	add	r25, r24
    1b66:	9a 30       	cpi	r25, 0x0A	; 10
    1b68:	c0 f7       	brcc	.-16     	; 0x1b5a <Num_from_KBD_Local+0x32>
    1b6a:	fe 01       	movw	r30, r28
    1b6c:	37 96       	adiw	r30, 0x07	; 7

		if (decimal_digit (keypress))								//Ignore illegal characters
		{for(int n = 7; n>=1; n--)digits[n] = digits[n-1];		//Shifts display left for each keypress
    1b6e:	92 91       	ld	r25, -Z
    1b70:	91 83       	std	Z+1, r25	; 0x01
    1b72:	ce 17       	cp	r28, r30
    1b74:	df 07       	cpc	r29, r31
    1b76:	d9 f7       	brne	.-10     	; 0x1b6e <Num_from_KBD_Local+0x46>
    1b78:	ea cf       	rjmp	.-44     	; 0x1b4e <Num_from_KBD_Local+0x26>
			digits[0] = keypress;										//Places new digit in array[0]
			Char_to_PC(digits[0]);										//Updates the PC
		I2C_Tx_8_byte_array(digits);}}								//Updates the display
		newline();
    1b7a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <newline>
		String_to_PC("Number entered   ");
    1b7e:	8e e1       	ldi	r24, 0x1E	; 30
    1b80:	91 e0       	ldi	r25, 0x01	; 1
    1b82:	0e 94 3b 01 	call	0x276	; 0x276 <String_to_PC>
	return I2C_displayToNum();}
    1b86:	df 91       	pop	r29
    1b88:	cf 91       	pop	r28
    1b8a:	0c 94 a7 0c 	jmp	0x194e	; 0x194e <I2C_displayToNum>

00001b8e <display_in_scientific_notation>:




	/******************************************************************************************/
	void display_in_scientific_notation(long Numerator,  char digits[], char mode){
    1b8e:	2f 92       	push	r2
    1b90:	3f 92       	push	r3
    1b92:	4f 92       	push	r4
    1b94:	5f 92       	push	r5
    1b96:	6f 92       	push	r6
    1b98:	7f 92       	push	r7
    1b9a:	8f 92       	push	r8
    1b9c:	9f 92       	push	r9
    1b9e:	af 92       	push	r10
    1ba0:	bf 92       	push	r11
    1ba2:	cf 92       	push	r12
    1ba4:	df 92       	push	r13
    1ba6:	ef 92       	push	r14
    1ba8:	ff 92       	push	r15
    1baa:	0f 93       	push	r16
    1bac:	1f 93       	push	r17
    1bae:	cf 93       	push	r28
    1bb0:	df 93       	push	r29
    1bb2:	00 d0       	rcall	.+0      	; 0x1bb4 <display_in_scientific_notation+0x26>
    1bb4:	00 d0       	rcall	.+0      	; 0x1bb6 <display_in_scientific_notation+0x28>
    1bb6:	cd b7       	in	r28, 0x3d	; 61
    1bb8:	de b7       	in	r29, 0x3e	; 62
    1bba:	6b 01       	movw	r12, r22
    1bbc:	7c 01       	movw	r14, r24
    1bbe:	5c 83       	std	Y+4, r21	; 0x04
    1bc0:	4b 83       	std	Y+3, r20	; 0x03
    1bc2:	12 2f       	mov	r17, r18

		long digit, denominator=1;
		int m=6, n=0;
		char exp=0;
    1bc4:	19 82       	std	Y+1, r1	; 0x01

		while (Numerator >= 1000000000){Numerator /=10; exp++;}		//Avoid overflow of denominator
    1bc6:	2a e0       	ldi	r18, 0x0A	; 10
    1bc8:	82 2e       	mov	r8, r18
    1bca:	91 2c       	mov	r9, r1
    1bcc:	a1 2c       	mov	r10, r1
    1bce:	b1 2c       	mov	r11, r1
    1bd0:	c1 14       	cp	r12, r1
    1bd2:	ea ec       	ldi	r30, 0xCA	; 202
    1bd4:	de 06       	cpc	r13, r30
    1bd6:	ea e9       	ldi	r30, 0x9A	; 154
    1bd8:	ee 06       	cpc	r14, r30
    1bda:	eb e3       	ldi	r30, 0x3B	; 59
    1bdc:	fe 06       	cpc	r15, r30
    1bde:	64 f0       	brlt	.+24     	; 0x1bf8 <display_in_scientific_notation+0x6a>
    1be0:	c7 01       	movw	r24, r14
    1be2:	b6 01       	movw	r22, r12
    1be4:	a5 01       	movw	r20, r10
    1be6:	94 01       	movw	r18, r8
    1be8:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__divmodsi4>
    1bec:	69 01       	movw	r12, r18
    1bee:	7a 01       	movw	r14, r20
    1bf0:	89 81       	ldd	r24, Y+1	; 0x01
    1bf2:	8f 5f       	subi	r24, 0xFF	; 255
    1bf4:	89 83       	std	Y+1, r24	; 0x01
    1bf6:	ec cf       	rjmp	.-40     	; 0x1bd0 <display_in_scientific_notation+0x42>
    1bf8:	eb 81       	ldd	r30, Y+3	; 0x03
    1bfa:	fc 81       	ldd	r31, Y+4	; 0x04
    1bfc:	cf 01       	movw	r24, r30
    1bfe:	08 96       	adiw	r24, 0x08	; 8

		clear_digits;													//For each number, generate a denominator (such as 1,10,100 etc)
    1c00:	11 92       	st	Z+, r1
    1c02:	e8 17       	cp	r30, r24
    1c04:	f9 07       	cpc	r31, r25
    1c06:	e1 f7       	brne	.-8      	; 0x1c00 <display_in_scientific_notation+0x72>
		if(!(Numerator)){Char_to_PC('0');return;}						//and corresponding exponent
    1c08:	c1 14       	cp	r12, r1
    1c0a:	d1 04       	cpc	r13, r1
    1c0c:	e1 04       	cpc	r14, r1
    1c0e:	f1 04       	cpc	r15, r1
    1c10:	29 f0       	breq	.+10     	; 0x1c1c <display_in_scientific_notation+0x8e>
    1c12:	81 2c       	mov	r8, r1
    1c14:	91 2c       	mov	r9, r1
    1c16:	54 01       	movw	r10, r8
    1c18:	83 94       	inc	r8
    1c1a:	19 c0       	rjmp	.+50     	; 0x1c4e <display_in_scientific_notation+0xc0>
    1c1c:	80 e3       	ldi	r24, 0x30	; 48
		n--;}

		String_to_PC(" E ");Num_to_PC(10, exp);
		digits[0] = exp +'0';											//Overwrite the two LSBs of the display
		digits[1] = 'X';												//Displays 'E'.
	I2C_Tx_8_byte_array(digits);}
    1c1e:	0f 90       	pop	r0
    1c20:	0f 90       	pop	r0
    1c22:	0f 90       	pop	r0
    1c24:	0f 90       	pop	r0
    1c26:	df 91       	pop	r29
    1c28:	cf 91       	pop	r28
    1c2a:	1f 91       	pop	r17
    1c2c:	0f 91       	pop	r16
    1c2e:	ff 90       	pop	r15
    1c30:	ef 90       	pop	r14
    1c32:	df 90       	pop	r13
    1c34:	cf 90       	pop	r12
    1c36:	bf 90       	pop	r11
    1c38:	af 90       	pop	r10
    1c3a:	9f 90       	pop	r9
    1c3c:	8f 90       	pop	r8
    1c3e:	7f 90       	pop	r7
    1c40:	6f 90       	pop	r6
    1c42:	5f 90       	pop	r5
    1c44:	4f 90       	pop	r4
    1c46:	3f 90       	pop	r3
    1c48:	2f 90       	pop	r2
		char exp=0;

		while (Numerator >= 1000000000){Numerator /=10; exp++;}		//Avoid overflow of denominator

		clear_digits;													//For each number, generate a denominator (such as 1,10,100 etc)
		if(!(Numerator)){Char_to_PC('0');return;}						//and corresponding exponent
    1c4a:	0c 94 34 01 	jmp	0x268	; 0x268 <Char_to_PC>
		while(denominator <= Numerator)									//The denominator should have one zero for each digit in the number -1
    1c4e:	c8 14       	cp	r12, r8
    1c50:	d9 04       	cpc	r13, r9
    1c52:	ea 04       	cpc	r14, r10
    1c54:	fb 04       	cpc	r15, r11
    1c56:	64 f0       	brlt	.+24     	; 0x1c70 <display_in_scientific_notation+0xe2>
		{denominator *=10; exp++;}										//10 to the power of the exponent should equal the denominator
    1c58:	aa e0       	ldi	r26, 0x0A	; 10
    1c5a:	b0 e0       	ldi	r27, 0x00	; 0
    1c5c:	a5 01       	movw	r20, r10
    1c5e:	94 01       	movw	r18, r8
    1c60:	0e 94 78 10 	call	0x20f0	; 0x20f0 <__muluhisi3>
    1c64:	4b 01       	movw	r8, r22
    1c66:	5c 01       	movw	r10, r24
    1c68:	f9 81       	ldd	r31, Y+1	; 0x01
    1c6a:	ff 5f       	subi	r31, 0xFF	; 255
    1c6c:	f9 83       	std	Y+1, r31	; 0x01
    1c6e:	ef cf       	rjmp	.-34     	; 0x1c4e <display_in_scientific_notation+0xc0>
		if(mode){denominator /= 10;	exp--;}							//If this line is omitted the 1234 is converted to the form 0.1234 E4
    1c70:	11 23       	and	r17, r17
    1c72:	69 f0       	breq	.+26     	; 0x1c8e <display_in_scientific_notation+0x100>
    1c74:	c5 01       	movw	r24, r10
    1c76:	b4 01       	movw	r22, r8
    1c78:	2a e0       	ldi	r18, 0x0A	; 10
    1c7a:	30 e0       	ldi	r19, 0x00	; 0
    1c7c:	40 e0       	ldi	r20, 0x00	; 0
    1c7e:	50 e0       	ldi	r21, 0x00	; 0
    1c80:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__divmodsi4>
    1c84:	49 01       	movw	r8, r18
    1c86:	5a 01       	movw	r10, r20
    1c88:	89 81       	ldd	r24, Y+1	; 0x01
    1c8a:	81 50       	subi	r24, 0x01	; 1
    1c8c:	89 83       	std	Y+1, r24	; 0x01
		n = exp;														//rather than 1.234 E3
    1c8e:	e9 81       	ldd	r30, Y+1	; 0x01
    1c90:	2e 2e       	mov	r2, r30
    1c92:	31 2c       	mov	r3, r1


		digits[7]=Numerator/denominator + '0';
    1c94:	c7 01       	movw	r24, r14
    1c96:	b6 01       	movw	r22, r12
    1c98:	a5 01       	movw	r20, r10
    1c9a:	94 01       	movw	r18, r8
    1c9c:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__divmodsi4>
    1ca0:	3b 01       	movw	r6, r22
    1ca2:	8c 01       	movw	r16, r24
    1ca4:	80 e3       	ldi	r24, 0x30	; 48
    1ca6:	82 0f       	add	r24, r18
    1ca8:	eb 81       	ldd	r30, Y+3	; 0x03
    1caa:	fc 81       	ldd	r31, Y+4	; 0x04
    1cac:	87 83       	std	Z+7, r24	; 0x07
		digits[6] = '_';												//place first digit followed by a decimal point in the "data array"
    1cae:	9f e5       	ldi	r25, 0x5F	; 95
    1cb0:	96 83       	std	Z+6, r25	; 0x06
		Numerator =Numerator%denominator;								//Update the numerator
		Char_to_PC(digits[7]);											//Send data to pc
    1cb2:	0e 94 34 01 	call	0x268	; 0x268 <Char_to_PC>
		Char_to_PC('.');
    1cb6:	8e e2       	ldi	r24, 0x2E	; 46
    1cb8:	0e 94 34 01 	call	0x268	; 0x268 <Char_to_PC>


		if(!(n)){digits[5] = '0';										//Tidy up display if exponent is zero
    1cbc:	21 14       	cp	r2, r1
    1cbe:	31 04       	cpc	r3, r1
    1cc0:	39 f4       	brne	.+14     	; 0x1cd0 <display_in_scientific_notation+0x142>
    1cc2:	80 e3       	ldi	r24, 0x30	; 48
    1cc4:	eb 81       	ldd	r30, Y+3	; 0x03
    1cc6:	fc 81       	ldd	r31, Y+4	; 0x04
    1cc8:	85 83       	std	Z+5, r24	; 0x05
		Char_to_PC('0');}
    1cca:	0e 94 34 01 	call	0x268	; 0x268 <Char_to_PC>
    1cce:	4e c0       	rjmp	.+156    	; 0x1d6c <display_in_scientific_notation+0x1de>
		n = exp;														//rather than 1.234 E3


		digits[7]=Numerator/denominator + '0';
		digits[6] = '_';												//place first digit followed by a decimal point in the "data array"
		Numerator =Numerator%denominator;								//Update the numerator
    1cd0:	63 01       	movw	r12, r6
    1cd2:	78 01       	movw	r14, r16
    1cd4:	06 e0       	ldi	r16, 0x06	; 6
    1cd6:	10 e0       	ldi	r17, 0x00	; 0
		if(!(n)){digits[5] = '0';										//Tidy up display if exponent is zero
		Char_to_PC('0');}

		while(n){														//Only calculate significant decimal places
			if (Numerator >= 0xCCCCCCC)
			{Numerator /= 10; denominator /=10;}							//0xCCCCCCC x 10 0x7FFF FFF8
    1cd8:	8a e0       	ldi	r24, 0x0A	; 10
    1cda:	48 2e       	mov	r4, r24
    1cdc:	51 2c       	mov	r5, r1
    1cde:	61 2c       	mov	r6, r1
    1ce0:	71 2c       	mov	r7, r1

		if(!(n)){digits[5] = '0';										//Tidy up display if exponent is zero
		Char_to_PC('0');}

		while(n){														//Only calculate significant decimal places
			if (Numerator >= 0xCCCCCCC)
    1ce2:	fc ec       	ldi	r31, 0xCC	; 204
    1ce4:	cf 16       	cp	r12, r31
    1ce6:	df 06       	cpc	r13, r31
    1ce8:	ef 06       	cpc	r14, r31
    1cea:	fc e0       	ldi	r31, 0x0C	; 12
    1cec:	ff 06       	cpc	r15, r31
    1cee:	84 f0       	brlt	.+32     	; 0x1d10 <display_in_scientific_notation+0x182>
			{Numerator /= 10; denominator /=10;}							//0xCCCCCCC x 10 0x7FFF FFF8
    1cf0:	c7 01       	movw	r24, r14
    1cf2:	b6 01       	movw	r22, r12
    1cf4:	a3 01       	movw	r20, r6
    1cf6:	92 01       	movw	r18, r4
    1cf8:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__divmodsi4>
    1cfc:	69 01       	movw	r12, r18
    1cfe:	7a 01       	movw	r14, r20
    1d00:	c5 01       	movw	r24, r10
    1d02:	b4 01       	movw	r22, r8
    1d04:	a3 01       	movw	r20, r6
    1d06:	92 01       	movw	r18, r4
    1d08:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__divmodsi4>
    1d0c:	49 01       	movw	r8, r18
    1d0e:	5a 01       	movw	r10, r20
			digit = (Numerator *10/denominator);
    1d10:	aa e0       	ldi	r26, 0x0A	; 10
    1d12:	b0 e0       	ldi	r27, 0x00	; 0
    1d14:	a7 01       	movw	r20, r14
    1d16:	96 01       	movw	r18, r12
    1d18:	0e 94 78 10 	call	0x20f0	; 0x20f0 <__muluhisi3>
			Numerator = ((Numerator *10)%denominator);						//check with pencil and paper
    1d1c:	a5 01       	movw	r20, r10
    1d1e:	94 01       	movw	r18, r8
    1d20:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__divmodsi4>
    1d24:	6b 01       	movw	r12, r22
    1d26:	7c 01       	movw	r14, r24

			Char_to_PC(digit+'0');
    1d28:	20 5d       	subi	r18, 0xD0	; 208
    1d2a:	2a 83       	std	Y+2, r18	; 0x02
    1d2c:	82 2f       	mov	r24, r18
    1d2e:	0e 94 34 01 	call	0x268	; 0x268 <Char_to_PC>
			if(m){digits[m-1] = (digit+'0');m--;							//Update the display: six characters max
    1d32:	01 15       	cp	r16, r1
    1d34:	11 05       	cpc	r17, r1
    1d36:	89 f0       	breq	.+34     	; 0x1d5a <display_in_scientific_notation+0x1cc>
    1d38:	eb 81       	ldd	r30, Y+3	; 0x03
    1d3a:	fc 81       	ldd	r31, Y+4	; 0x04
    1d3c:	e0 0f       	add	r30, r16
    1d3e:	f1 1f       	adc	r31, r17
    1d40:	31 97       	sbiw	r30, 0x01	; 1
    1d42:	8a 81       	ldd	r24, Y+2	; 0x02
    1d44:	80 83       	st	Z, r24
    1d46:	01 50       	subi	r16, 0x01	; 1
    1d48:	11 09       	sbc	r17, r1
				I2C_Tx_8_byte_array(digits);
    1d4a:	8b 81       	ldd	r24, Y+3	; 0x03
    1d4c:	9c 81       	ldd	r25, Y+4	; 0x04
    1d4e:	0e 94 19 0b 	call	0x1632	; 0x1632 <I2C_Tx_8_byte_array>
			Timer_T0_10mS_delay_x_m(12);}
    1d52:	8c e0       	ldi	r24, 0x0C	; 12
    1d54:	90 e0       	ldi	r25, 0x00	; 0
    1d56:	0e 94 af 00 	call	0x15e	; 0x15e <Timer_T0_10mS_delay_x_m>
			Timer_T0_10mS_delay_x_m(6);
    1d5a:	86 e0       	ldi	r24, 0x06	; 6
    1d5c:	90 e0       	ldi	r25, 0x00	; 0
    1d5e:	0e 94 af 00 	call	0x15e	; 0x15e <Timer_T0_10mS_delay_x_m>
		n--;}
    1d62:	e1 e0       	ldi	r30, 0x01	; 1
    1d64:	2e 1a       	sub	r2, r30
    1d66:	31 08       	sbc	r3, r1


		if(!(n)){digits[5] = '0';										//Tidy up display if exponent is zero
		Char_to_PC('0');}

		while(n){														//Only calculate significant decimal places
    1d68:	09 f0       	breq	.+2      	; 0x1d6c <display_in_scientific_notation+0x1de>
    1d6a:	bb cf       	rjmp	.-138    	; 0x1ce2 <display_in_scientific_notation+0x154>
				I2C_Tx_8_byte_array(digits);
			Timer_T0_10mS_delay_x_m(12);}
			Timer_T0_10mS_delay_x_m(6);
		n--;}

		String_to_PC(" E ");Num_to_PC(10, exp);
    1d6c:	80 e3       	ldi	r24, 0x30	; 48
    1d6e:	91 e0       	ldi	r25, 0x01	; 1
    1d70:	0e 94 3b 01 	call	0x276	; 0x276 <String_to_PC>
    1d74:	f9 81       	ldd	r31, Y+1	; 0x01
    1d76:	4f 2f       	mov	r20, r31
    1d78:	50 e0       	ldi	r21, 0x00	; 0
    1d7a:	60 e0       	ldi	r22, 0x00	; 0
    1d7c:	70 e0       	ldi	r23, 0x00	; 0
    1d7e:	8a e0       	ldi	r24, 0x0A	; 10
    1d80:	0e 94 10 02 	call	0x420	; 0x420 <Num_to_PC>
		digits[0] = exp +'0';											//Overwrite the two LSBs of the display
    1d84:	89 81       	ldd	r24, Y+1	; 0x01
    1d86:	80 5d       	subi	r24, 0xD0	; 208
    1d88:	eb 81       	ldd	r30, Y+3	; 0x03
    1d8a:	fc 81       	ldd	r31, Y+4	; 0x04
    1d8c:	80 83       	st	Z, r24
		digits[1] = 'X';												//Displays 'E'.
    1d8e:	88 e5       	ldi	r24, 0x58	; 88
    1d90:	81 83       	std	Z+1, r24	; 0x01
	I2C_Tx_8_byte_array(digits);}
    1d92:	cf 01       	movw	r24, r30
    1d94:	0f 90       	pop	r0
    1d96:	0f 90       	pop	r0
    1d98:	0f 90       	pop	r0
    1d9a:	0f 90       	pop	r0
    1d9c:	df 91       	pop	r29
    1d9e:	cf 91       	pop	r28
    1da0:	1f 91       	pop	r17
    1da2:	0f 91       	pop	r16
    1da4:	ff 90       	pop	r15
    1da6:	ef 90       	pop	r14
    1da8:	df 90       	pop	r13
    1daa:	cf 90       	pop	r12
    1dac:	bf 90       	pop	r11
    1dae:	af 90       	pop	r10
    1db0:	9f 90       	pop	r9
    1db2:	8f 90       	pop	r8
    1db4:	7f 90       	pop	r7
    1db6:	6f 90       	pop	r6
    1db8:	5f 90       	pop	r5
    1dba:	4f 90       	pop	r4
    1dbc:	3f 90       	pop	r3
    1dbe:	2f 90       	pop	r2
    1dc0:	0c 94 19 0b 	jmp	0x1632	; 0x1632 <I2C_Tx_8_byte_array>

00001dc4 <Divide_and_round>:




	/******************************************************************************************/
	long Divide_and_round(long A, int B){
    1dc4:	8f 92       	push	r8
    1dc6:	9f 92       	push	r9
    1dc8:	af 92       	push	r10
    1dca:	bf 92       	push	r11
    1dcc:	cf 92       	push	r12
    1dce:	df 92       	push	r13
    1dd0:	ef 92       	push	r14
    1dd2:	ff 92       	push	r15
		long result;
		int error;
		result = A/B;
    1dd4:	6a 01       	movw	r12, r20
    1dd6:	55 0f       	add	r21, r21
    1dd8:	ee 08       	sbc	r14, r14
    1dda:	ff 08       	sbc	r15, r15
    1ddc:	a7 01       	movw	r20, r14
    1dde:	96 01       	movw	r18, r12
    1de0:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__divmodsi4>
    1de4:	49 01       	movw	r8, r18
    1de6:	5a 01       	movw	r10, r20
    1de8:	9b 01       	movw	r18, r22
    1dea:	ac 01       	movw	r20, r24
		error = (A%B)*10/B;
		if (error > 5) result += 1;
    1dec:	aa e0       	ldi	r26, 0x0A	; 10
    1dee:	b0 e0       	ldi	r27, 0x00	; 0
    1df0:	0e 94 78 10 	call	0x20f0	; 0x20f0 <__muluhisi3>
    1df4:	a7 01       	movw	r20, r14
    1df6:	96 01       	movw	r18, r12
    1df8:	0e 94 53 10 	call	0x20a6	; 0x20a6 <__divmodsi4>
    1dfc:	26 30       	cpi	r18, 0x06	; 6
    1dfe:	31 05       	cpc	r19, r1
    1e00:	2c f0       	brlt	.+10     	; 0x1e0c <Divide_and_round+0x48>
    1e02:	8f ef       	ldi	r24, 0xFF	; 255
    1e04:	88 1a       	sub	r8, r24
    1e06:	98 0a       	sbc	r9, r24
    1e08:	a8 0a       	sbc	r10, r24
    1e0a:	b8 0a       	sbc	r11, r24
	return result;}
    1e0c:	c5 01       	movw	r24, r10
    1e0e:	b4 01       	movw	r22, r8
    1e10:	ff 90       	pop	r15
    1e12:	ef 90       	pop	r14
    1e14:	df 90       	pop	r13
    1e16:	cf 90       	pop	r12
    1e18:	bf 90       	pop	r11
    1e1a:	af 90       	pop	r10
    1e1c:	9f 90       	pop	r9
    1e1e:	8f 90       	pop	r8
    1e20:	08 95       	ret

00001e22 <main>:
#include "Proj_3E_header_file.h"

long Divide_and_round(long A, int B);										//subroutine prototype


int main (void){
    1e22:	cf 93       	push	r28
    1e24:	df 93       	push	r29
    1e26:	cd b7       	in	r28, 0x3d	; 61
    1e28:	de b7       	in	r29, 0x3e	; 62
    1e2a:	28 97       	sbiw	r28, 0x08	; 8
    1e2c:	0f b6       	in	r0, 0x3f	; 63
    1e2e:	f8 94       	cli
    1e30:	de bf       	out	0x3e, r29	; 62
    1e32:	0f be       	out	0x3f, r0	; 63
    1e34:	cd bf       	out	0x3d, r28	; 61
	long Num_1;
	char digits[8], OVF;
	char User_response, mode;
	int m;

	setup_HW_basic;
    1e36:	04 b6       	in	r0, 0x34	; 52
    1e38:	03 fe       	sbrs	r0, 3
    1e3a:	03 c0       	rjmp	.+6      	; 0x1e42 <main+0x20>
    1e3c:	81 e0       	ldi	r24, 0x01	; 1
    1e3e:	80 93 98 01 	sts	0x0198, r24	; 0x800198 <__data_end>
    1e42:	a8 95       	wdr
    1e44:	84 b7       	in	r24, 0x34	; 52
    1e46:	87 7f       	andi	r24, 0xF7	; 247
    1e48:	84 bf       	out	0x34, r24	; 52
    1e4a:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
    1e4e:	88 61       	ori	r24, 0x18	; 24
    1e50:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
    1e54:	10 92 60 00 	sts	0x0060, r1	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
    1e58:	82 e0       	ldi	r24, 0x02	; 2
    1e5a:	80 93 ba 00 	sts	0x00BA, r24	; 0x8000ba <__TEXT_REGION_LENGTH__+0x7fc0ba>
    1e5e:	80 91 7c 00 	lds	r24, 0x007C	; 0x80007c <__TEXT_REGION_LENGTH__+0x7fc07c>
    1e62:	80 64       	ori	r24, 0x40	; 64
    1e64:	80 93 7c 00 	sts	0x007C, r24	; 0x80007c <__TEXT_REGION_LENGTH__+0x7fc07c>
    1e68:	85 b7       	in	r24, 0x35	; 53
    1e6a:	8f 7e       	andi	r24, 0xEF	; 239
    1e6c:	85 bf       	out	0x35, r24	; 53
    1e6e:	8a b1       	in	r24, 0x0a	; 10
    1e70:	8b 77       	andi	r24, 0x7B	; 123
    1e72:	8a b9       	out	0x0a, r24	; 10
    1e74:	8b b1       	in	r24, 0x0b	; 11
    1e76:	84 68       	ori	r24, 0x84	; 132
    1e78:	8b b9       	out	0x0b, r24	; 11
    1e7a:	26 98       	cbi	0x04, 6	; 4
    1e7c:	2e 9a       	sbi	0x05, 6	; 5
    1e7e:	85 b7       	in	r24, 0x35	; 53
    1e80:	8f 7e       	andi	r24, 0xEF	; 239
    1e82:	85 bf       	out	0x35, r24	; 53
    1e84:	84 b1       	in	r24, 0x04	; 4
    1e86:	8b 77       	andi	r24, 0x7B	; 123
    1e88:	84 b9       	out	0x04, r24	; 4
    1e8a:	87 b1       	in	r24, 0x07	; 7
    1e8c:	88 7f       	andi	r24, 0xF8	; 248
    1e8e:	87 b9       	out	0x07, r24	; 7
    1e90:	8a b1       	in	r24, 0x0a	; 10
    1e92:	87 78       	andi	r24, 0x87	; 135
    1e94:	8a b9       	out	0x0a, r24	; 10
    1e96:	85 b1       	in	r24, 0x05	; 5
    1e98:	84 68       	ori	r24, 0x84	; 132
    1e9a:	85 b9       	out	0x05, r24	; 5
    1e9c:	88 b1       	in	r24, 0x08	; 8
    1e9e:	87 60       	ori	r24, 0x07	; 7
    1ea0:	88 b9       	out	0x08, r24	; 8
    1ea2:	8b b1       	in	r24, 0x0b	; 11
    1ea4:	88 67       	ori	r24, 0x78	; 120
    1ea6:	8b b9       	out	0x0b, r24	; 11
    1ea8:	60 91 66 00 	lds	r22, 0x0066	; 0x800066 <__TEXT_REGION_LENGTH__+0x7fc066>
    1eac:	8d ef       	ldi	r24, 0xFD	; 253
    1eae:	91 e0       	ldi	r25, 0x01	; 1
    1eb0:	0e 94 9a 10 	call	0x2134	; 0x2134 <eeprom_write_byte>
    1eb4:	49 9b       	sbis	0x09, 1	; 9
    1eb6:	fe cf       	rjmp	.-4      	; 0x1eb4 <main+0x92>
    1eb8:	6c ed       	ldi	r22, 0xDC	; 220
    1eba:	85 e0       	ldi	r24, 0x05	; 5
    1ebc:	0e 94 a8 00 	call	0x150	; 0x150 <Timer_T0_sub>
    1ec0:	8e ef       	ldi	r24, 0xFE	; 254
    1ec2:	91 e0       	ldi	r25, 0x01	; 1
    1ec4:	0e 94 92 10 	call	0x2124	; 0x2124 <eeprom_read_byte>
    1ec8:	18 2f       	mov	r17, r24
    1eca:	80 ef       	ldi	r24, 0xF0	; 240
    1ecc:	81 0f       	add	r24, r17
    1ece:	80 3e       	cpi	r24, 0xE0	; 224
    1ed0:	40 f4       	brcc	.+16     	; 0x1ee2 <main+0xc0>
    1ed2:	8f ef       	ldi	r24, 0xFF	; 255
    1ed4:	91 e0       	ldi	r25, 0x01	; 1
    1ed6:	0e 94 92 10 	call	0x2124	; 0x2124 <eeprom_read_byte>
    1eda:	18 13       	cpse	r17, r24
    1edc:	02 c0       	rjmp	.+4      	; 0x1ee2 <main+0xc0>
    1ede:	10 93 66 00 	sts	0x0066, r17	; 0x800066 <__TEXT_REGION_LENGTH__+0x7fc066>
    1ee2:	60 e1       	ldi	r22, 0x10	; 16
    1ee4:	80 e0       	ldi	r24, 0x00	; 0
    1ee6:	0e 94 8e 00 	call	0x11c	; 0x11c <USART_init>
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	0e 94 af 00 	call	0x15e	; 0x15e <Timer_T0_10mS_delay_x_m>
    1ef2:	80 91 98 01 	lds	r24, 0x0198	; 0x800198 <__data_end>
    1ef6:	81 11       	cpse	r24, r1
    1ef8:	02 c0       	rjmp	.+4      	; 0x1efe <main+0xdc>
    1efa:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <I2C_Tx_LED_dimmer>
	User_prompt;
    1efe:	84 e3       	ldi	r24, 0x34	; 52
    1f00:	91 e0       	ldi	r25, 0x01	; 1
    1f02:	0e 94 3b 01 	call	0x276	; 0x276 <String_to_PC>
    1f06:	8a ef       	ldi	r24, 0xFA	; 250
    1f08:	0e 94 08 01 	call	0x210	; 0x210 <isCharavailable>
    1f0c:	88 23       	and	r24, r24
    1f0e:	b9 f3       	breq	.-18     	; 0x1efe <main+0xdc>
return UDR0;}


/*********************************************************************/
char receiveChar(void)
{return UDR0;}
    1f10:	10 91 c6 00 	lds	r17, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7fc0c6>
    1f14:	12 35       	cpi	r17, 0x52	; 82
    1f16:	11 f0       	breq	.+4      	; 0x1f1c <main+0xfa>
    1f18:	12 37       	cpi	r17, 0x72	; 114
    1f1a:	89 f7       	brne	.-30     	; 0x1efe <main+0xdc>
    1f1c:	8d e6       	ldi	r24, 0x6D	; 109
    1f1e:	91 e0       	ldi	r25, 0x01	; 1
    1f20:	0e 94 3b 01 	call	0x276	; 0x276 <String_to_PC>
	if(User_response == 'r')mode = 1; else mode = 0;
    1f24:	01 e0       	ldi	r16, 0x01	; 1
    1f26:	12 37       	cpi	r17, 0x72	; 114
    1f28:	09 f0       	breq	.+2      	; 0x1f2c <main+0x10a>
    1f2a:	00 e0       	ldi	r16, 0x00	; 0


	String_to_PC("Enter positive number & terminate with Return key.\r\n");
    1f2c:	8b e3       	ldi	r24, 0x3B	; 59
    1f2e:	91 e0       	ldi	r25, 0x01	; 1
    1f30:	0e 94 3b 01 	call	0x276	; 0x276 <String_to_PC>
	Num_1 = Num_from_KBD_Local(digits);											//Acquires data and Echoes keypresses to screen
    1f34:	ce 01       	movw	r24, r28
    1f36:	01 96       	adiw	r24, 0x01	; 1
    1f38:	0e 94 94 0d 	call	0x1b28	; 0x1b28 <Num_from_KBD_Local>
    1f3c:	6b 01       	movw	r12, r22
    1f3e:	7c 01       	movw	r14, r24
	Num_to_PC(10,Num_1); newline();											//Converts number back to a string and sends it to the pc.
    1f40:	ab 01       	movw	r20, r22
    1f42:	bc 01       	movw	r22, r24
    1f44:	8a e0       	ldi	r24, 0x0A	; 10
    1f46:	0e 94 10 02 	call	0x420	; 0x420 <Num_to_PC>
    1f4a:	0e 94 50 01 	call	0x2a0	; 0x2a0 <newline>

	String_to_PC("Scientific notation  ");newline();
    1f4e:	80 e7       	ldi	r24, 0x70	; 112
    1f50:	91 e0       	ldi	r25, 0x01	; 1
    1f52:	0e 94 3b 01 	call	0x276	; 0x276 <String_to_PC>
    1f56:	0e 94 50 01 	call	0x2a0	; 0x2a0 <newline>
    1f5a:	81 2c       	mov	r8, r1
    1f5c:	91 2c       	mov	r9, r1
    1f5e:	54 01       	movw	r10, r8
    1f60:	83 94       	inc	r8
	OVF=0;																		//Set to 1 when multiplication would generate overflow
    1f62:	10 e0       	ldi	r17, 0x00	; 0
	m = 1;																		//Used for arithmetic
	do {
		if(!(OVF))Num_1 *= m; 														//Do arithmetic
    1f64:	11 11       	cpse	r17, r1
    1f66:	07 c0       	rjmp	.+14     	; 0x1f76 <main+0x154>
    1f68:	a7 01       	movw	r20, r14
    1f6a:	96 01       	movw	r18, r12
    1f6c:	c5 01       	movw	r24, r10
    1f6e:	b4 01       	movw	r22, r8
    1f70:	0e 94 21 10 	call	0x2042	; 0x2042 <__mulsi3>
    1f74:	05 c0       	rjmp	.+10     	; 0x1f80 <main+0x15e>
		else Num_1 = Divide_and_round(Num_1,m);										//depending on value to OVF
    1f76:	a4 01       	movw	r20, r8
    1f78:	c7 01       	movw	r24, r14
    1f7a:	b6 01       	movw	r22, r12
    1f7c:	0e 94 e2 0e 	call	0x1dc4	; 0x1dc4 <Divide_and_round>
    1f80:	6b 01       	movw	r12, r22
    1f82:	7c 01       	movw	r14, r24
		m++;
		display_in_scientific_notation (Num_1, digits,mode);						//Displays result in scientific notation
    1f84:	20 2f       	mov	r18, r16
    1f86:	ae 01       	movw	r20, r28
    1f88:	4f 5f       	subi	r20, 0xFF	; 255
    1f8a:	5f 4f       	sbci	r21, 0xFF	; 255
    1f8c:	0e 94 c7 0d 	call	0x1b8e	; 0x1b8e <display_in_scientific_notation>
		if((!OVF)&&((Num_1 > 0xFFFFFFFF/(m+1)) || ((Num_1 * (m+1)) < 0)))		//Check for a potential overflow
    1f90:	11 11       	cpse	r17, r1
    1f92:	51 c0       	rjmp	.+162    	; 0x2036 <main+0x214>
    1f94:	c4 01       	movw	r24, r8
    1f96:	02 96       	adiw	r24, 0x02	; 2
    1f98:	2c 01       	movw	r4, r24
    1f9a:	99 0f       	add	r25, r25
    1f9c:	66 08       	sbc	r6, r6
    1f9e:	77 08       	sbc	r7, r7
    1fa0:	6f ef       	ldi	r22, 0xFF	; 255
    1fa2:	7f ef       	ldi	r23, 0xFF	; 255
    1fa4:	cb 01       	movw	r24, r22
    1fa6:	a3 01       	movw	r20, r6
    1fa8:	92 01       	movw	r18, r4
    1faa:	0e 94 31 10 	call	0x2062	; 0x2062 <__udivmodsi4>
    1fae:	2c 15       	cp	r18, r12
    1fb0:	3d 05       	cpc	r19, r13
    1fb2:	4e 05       	cpc	r20, r14
    1fb4:	5f 05       	cpc	r21, r15
    1fb6:	08 f4       	brcc	.+2      	; 0x1fba <main+0x198>
    1fb8:	3e c0       	rjmp	.+124    	; 0x2036 <main+0x214>
    1fba:	a3 01       	movw	r20, r6
    1fbc:	92 01       	movw	r18, r4
    1fbe:	c7 01       	movw	r24, r14
    1fc0:	b6 01       	movw	r22, r12
    1fc2:	0e 94 21 10 	call	0x2042	; 0x2042 <__mulsi3>
    1fc6:	97 fd       	sbrc	r25, 7
    1fc8:	36 c0       	rjmp	.+108    	; 0x2036 <main+0x214>
		OVF = 1;																	//If A*B > 0xFFFF then A > 0xFFFF/B and overflow will occur
		//Also if A*B is a negative number overflow has occurred


		if (!OVF)String_to_PC(" x "); else String_to_PC(" / ");					//Finnish Printing out equation
    1fca:	8f e8       	ldi	r24, 0x8F	; 143
    1fcc:	91 e0       	ldi	r25, 0x01	; 1
    1fce:	0e 94 3b 01 	call	0x276	; 0x276 <String_to_PC>
    1fd2:	8f ef       	ldi	r24, 0xFF	; 255
    1fd4:	88 1a       	sub	r8, r24
    1fd6:	98 0a       	sbc	r9, r24
    1fd8:	a8 0a       	sbc	r10, r24
    1fda:	b8 0a       	sbc	r11, r24
		Num_to_PC(10,m);String_to_PC(" = ");
    1fdc:	b5 01       	movw	r22, r10
    1fde:	a4 01       	movw	r20, r8
    1fe0:	8a e0       	ldi	r24, 0x0A	; 10
    1fe2:	0e 94 10 02 	call	0x420	; 0x420 <Num_to_PC>
    1fe6:	86 e8       	ldi	r24, 0x86	; 134
    1fe8:	91 e0       	ldi	r25, 0x01	; 1
    1fea:	0e 94 3b 01 	call	0x276	; 0x276 <String_to_PC>

		if(!(Num_1)) String_to_PC("Zero");newline();
    1fee:	c1 14       	cp	r12, r1
    1ff0:	d1 04       	cpc	r13, r1
    1ff2:	e1 04       	cpc	r14, r1
    1ff4:	f1 04       	cpc	r15, r1
    1ff6:	21 f4       	brne	.+8      	; 0x2000 <main+0x1de>
    1ff8:	8a e8       	ldi	r24, 0x8A	; 138
    1ffa:	91 e0       	ldi	r25, 0x01	; 1
    1ffc:	0e 94 3b 01 	call	0x276	; 0x276 <String_to_PC>
    2000:	0e 94 50 01 	call	0x2a0	; 0x2a0 <newline>

		Timer_T0_10mS_delay_x_m(25);
    2004:	89 e1       	ldi	r24, 0x19	; 25
    2006:	90 e0       	ldi	r25, 0x00	; 0
    2008:	0e 94 af 00 	call	0x15e	; 0x15e <Timer_T0_10mS_delay_x_m>
		if(waitforkeypress() == 'x') break;										//press -x- to escape early or AOK to continue
    200c:	0e 94 fe 00 	call	0x1fc	; 0x1fc <waitforkeypress>
    2010:	88 37       	cpi	r24, 0x78	; 120
    2012:	31 f0       	breq	.+12     	; 0x2020 <main+0x1fe>

	}while (Num_1);
    2014:	c1 14       	cp	r12, r1
    2016:	d1 04       	cpc	r13, r1
    2018:	e1 04       	cpc	r14, r1
    201a:	f1 04       	cpc	r15, r1
    201c:	09 f0       	breq	.+2      	; 0x2020 <main+0x1fe>
    201e:	a2 cf       	rjmp	.-188    	; 0x1f64 <main+0x142>
				: "r0"
		);
	}
	else
	{
		__asm__ __volatile__ (
    2020:	99 e0       	ldi	r25, 0x09	; 9
    2022:	88 e1       	ldi	r24, 0x18	; 24
    2024:	0f b6       	in	r0, 0x3f	; 63
    2026:	f8 94       	cli
    2028:	a8 95       	wdr
    202a:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
    202e:	0f be       	out	0x3f, r0	; 63
    2030:	90 93 60 00 	sts	0x0060, r25	; 0x800060 <__TEXT_REGION_LENGTH__+0x7fc060>
    2034:	ff cf       	rjmp	.-2      	; 0x2034 <main+0x212>
		if((!OVF)&&((Num_1 > 0xFFFFFFFF/(m+1)) || ((Num_1 * (m+1)) < 0)))		//Check for a potential overflow
		OVF = 1;																	//If A*B > 0xFFFF then A > 0xFFFF/B and overflow will occur
		//Also if A*B is a negative number overflow has occurred


		if (!OVF)String_to_PC(" x "); else String_to_PC(" / ");					//Finnish Printing out equation
    2036:	83 e9       	ldi	r24, 0x93	; 147
    2038:	91 e0       	ldi	r25, 0x01	; 1
    203a:	0e 94 3b 01 	call	0x276	; 0x276 <String_to_PC>
    203e:	11 e0       	ldi	r17, 0x01	; 1
    2040:	c8 cf       	rjmp	.-112    	; 0x1fd2 <main+0x1b0>

00002042 <__mulsi3>:
    2042:	db 01       	movw	r26, r22
    2044:	8f 93       	push	r24
    2046:	9f 93       	push	r25
    2048:	0e 94 78 10 	call	0x20f0	; 0x20f0 <__muluhisi3>
    204c:	bf 91       	pop	r27
    204e:	af 91       	pop	r26
    2050:	a2 9f       	mul	r26, r18
    2052:	80 0d       	add	r24, r0
    2054:	91 1d       	adc	r25, r1
    2056:	a3 9f       	mul	r26, r19
    2058:	90 0d       	add	r25, r0
    205a:	b2 9f       	mul	r27, r18
    205c:	90 0d       	add	r25, r0
    205e:	11 24       	eor	r1, r1
    2060:	08 95       	ret

00002062 <__udivmodsi4>:
    2062:	a1 e2       	ldi	r26, 0x21	; 33
    2064:	1a 2e       	mov	r1, r26
    2066:	aa 1b       	sub	r26, r26
    2068:	bb 1b       	sub	r27, r27
    206a:	fd 01       	movw	r30, r26
    206c:	0d c0       	rjmp	.+26     	; 0x2088 <__udivmodsi4_ep>

0000206e <__udivmodsi4_loop>:
    206e:	aa 1f       	adc	r26, r26
    2070:	bb 1f       	adc	r27, r27
    2072:	ee 1f       	adc	r30, r30
    2074:	ff 1f       	adc	r31, r31
    2076:	a2 17       	cp	r26, r18
    2078:	b3 07       	cpc	r27, r19
    207a:	e4 07       	cpc	r30, r20
    207c:	f5 07       	cpc	r31, r21
    207e:	20 f0       	brcs	.+8      	; 0x2088 <__udivmodsi4_ep>
    2080:	a2 1b       	sub	r26, r18
    2082:	b3 0b       	sbc	r27, r19
    2084:	e4 0b       	sbc	r30, r20
    2086:	f5 0b       	sbc	r31, r21

00002088 <__udivmodsi4_ep>:
    2088:	66 1f       	adc	r22, r22
    208a:	77 1f       	adc	r23, r23
    208c:	88 1f       	adc	r24, r24
    208e:	99 1f       	adc	r25, r25
    2090:	1a 94       	dec	r1
    2092:	69 f7       	brne	.-38     	; 0x206e <__udivmodsi4_loop>
    2094:	60 95       	com	r22
    2096:	70 95       	com	r23
    2098:	80 95       	com	r24
    209a:	90 95       	com	r25
    209c:	9b 01       	movw	r18, r22
    209e:	ac 01       	movw	r20, r24
    20a0:	bd 01       	movw	r22, r26
    20a2:	cf 01       	movw	r24, r30
    20a4:	08 95       	ret

000020a6 <__divmodsi4>:
    20a6:	05 2e       	mov	r0, r21
    20a8:	97 fb       	bst	r25, 7
    20aa:	1e f4       	brtc	.+6      	; 0x20b2 <__divmodsi4+0xc>
    20ac:	00 94       	com	r0
    20ae:	0e 94 6a 10 	call	0x20d4	; 0x20d4 <__negsi2>
    20b2:	57 fd       	sbrc	r21, 7
    20b4:	07 d0       	rcall	.+14     	; 0x20c4 <__divmodsi4_neg2>
    20b6:	0e 94 31 10 	call	0x2062	; 0x2062 <__udivmodsi4>
    20ba:	07 fc       	sbrc	r0, 7
    20bc:	03 d0       	rcall	.+6      	; 0x20c4 <__divmodsi4_neg2>
    20be:	4e f4       	brtc	.+18     	; 0x20d2 <__divmodsi4_exit>
    20c0:	0c 94 6a 10 	jmp	0x20d4	; 0x20d4 <__negsi2>

000020c4 <__divmodsi4_neg2>:
    20c4:	50 95       	com	r21
    20c6:	40 95       	com	r20
    20c8:	30 95       	com	r19
    20ca:	21 95       	neg	r18
    20cc:	3f 4f       	sbci	r19, 0xFF	; 255
    20ce:	4f 4f       	sbci	r20, 0xFF	; 255
    20d0:	5f 4f       	sbci	r21, 0xFF	; 255

000020d2 <__divmodsi4_exit>:
    20d2:	08 95       	ret

000020d4 <__negsi2>:
    20d4:	90 95       	com	r25
    20d6:	80 95       	com	r24
    20d8:	70 95       	com	r23
    20da:	61 95       	neg	r22
    20dc:	7f 4f       	sbci	r23, 0xFF	; 255
    20de:	8f 4f       	sbci	r24, 0xFF	; 255
    20e0:	9f 4f       	sbci	r25, 0xFF	; 255
    20e2:	08 95       	ret

000020e4 <__tablejump2__>:
    20e4:	ee 0f       	add	r30, r30
    20e6:	ff 1f       	adc	r31, r31
    20e8:	05 90       	lpm	r0, Z+
    20ea:	f4 91       	lpm	r31, Z
    20ec:	e0 2d       	mov	r30, r0
    20ee:	09 94       	ijmp

000020f0 <__muluhisi3>:
    20f0:	0e 94 83 10 	call	0x2106	; 0x2106 <__umulhisi3>
    20f4:	a5 9f       	mul	r26, r21
    20f6:	90 0d       	add	r25, r0
    20f8:	b4 9f       	mul	r27, r20
    20fa:	90 0d       	add	r25, r0
    20fc:	a4 9f       	mul	r26, r20
    20fe:	80 0d       	add	r24, r0
    2100:	91 1d       	adc	r25, r1
    2102:	11 24       	eor	r1, r1
    2104:	08 95       	ret

00002106 <__umulhisi3>:
    2106:	a2 9f       	mul	r26, r18
    2108:	b0 01       	movw	r22, r0
    210a:	b3 9f       	mul	r27, r19
    210c:	c0 01       	movw	r24, r0
    210e:	a3 9f       	mul	r26, r19
    2110:	70 0d       	add	r23, r0
    2112:	81 1d       	adc	r24, r1
    2114:	11 24       	eor	r1, r1
    2116:	91 1d       	adc	r25, r1
    2118:	b2 9f       	mul	r27, r18
    211a:	70 0d       	add	r23, r0
    211c:	81 1d       	adc	r24, r1
    211e:	11 24       	eor	r1, r1
    2120:	91 1d       	adc	r25, r1
    2122:	08 95       	ret

00002124 <eeprom_read_byte>:
    2124:	f9 99       	sbic	0x1f, 1	; 31
    2126:	fe cf       	rjmp	.-4      	; 0x2124 <eeprom_read_byte>
    2128:	92 bd       	out	0x22, r25	; 34
    212a:	81 bd       	out	0x21, r24	; 33
    212c:	f8 9a       	sbi	0x1f, 0	; 31
    212e:	99 27       	eor	r25, r25
    2130:	80 b5       	in	r24, 0x20	; 32
    2132:	08 95       	ret

00002134 <eeprom_write_byte>:
    2134:	26 2f       	mov	r18, r22

00002136 <eeprom_write_r18>:
    2136:	f9 99       	sbic	0x1f, 1	; 31
    2138:	fe cf       	rjmp	.-4      	; 0x2136 <eeprom_write_r18>
    213a:	1f ba       	out	0x1f, r1	; 31
    213c:	92 bd       	out	0x22, r25	; 34
    213e:	81 bd       	out	0x21, r24	; 33
    2140:	20 bd       	out	0x20, r18	; 32
    2142:	0f b6       	in	r0, 0x3f	; 63
    2144:	f8 94       	cli
    2146:	fa 9a       	sbi	0x1f, 2	; 31
    2148:	f9 9a       	sbi	0x1f, 1	; 31
    214a:	0f be       	out	0x3f, r0	; 63
    214c:	01 96       	adiw	r24, 0x01	; 1
    214e:	08 95       	ret

00002150 <_exit>:
    2150:	f8 94       	cli

00002152 <__stop_program>:
    2152:	ff cf       	rjmp	.-2      	; 0x2152 <__stop_program>
